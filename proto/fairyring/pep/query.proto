syntax = "proto3";

package fairyring.pep;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fairyring/common/shared_types.proto";
import "fairyring/pep/encrypted_tx.proto";
import "fairyring/pep/params.proto";
import "fairyring/pep/pep_nonce.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/Fairblock/fairyring/x/pep/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fairyring/pep/params";
  }

  // Queries a EncryptedTx by index.
  rpc EncryptedTx(QueryEncryptedTxRequest) returns (QueryEncryptedTxResponse) {
    option (google.api.http).get = "/fairyring/pep/encrypted_tx/{target_height}/{index}";
  }

  // Queries a list of EncryptedTx items.
  rpc EncryptedTxAll(QueryEncryptedTxAllRequest) returns (QueryEncryptedTxAllResponse) {
    option (google.api.http).get = "/fairyring/pep/encrypted_tx";
  }

  // Queries a list of EncryptedTx items.
  rpc EncryptedTxAllFromHeight(QueryEncryptedTxAllFromHeightRequest) returns (QueryEncryptedTxAllFromHeightResponse) {
    option (google.api.http).get = "/fairyring/pep/encrypted_tx/{target_height}";
  }

  // Queries a list of LatestHeight items.
  rpc LatestHeight(QueryLatestHeightRequest) returns (QueryLatestHeightResponse) {
    option (google.api.http).get = "/fairyring/pep/latest_height";
  }

  // Queries a PepNonce by index.
  rpc PepNonce(QueryPepNonceRequest) returns (QueryPepNonceResponse) {
    option (google.api.http).get = "/fairyring/pep/pep_nonce/{address}";
  }

  // Queries a list of PepNonce items.
  rpc PepNonceAll(QueryPepNonceAllRequest) returns (QueryPepNonceAllResponse) {
    option (google.api.http).get = "/fairyring/pep/pep_nonce";
  }

  // Queries the public keys
  rpc Pubkey(QueryPubkeyRequest) returns (QueryPubkeyResponse) {
    option (google.api.http).get = "/fairyring/pep/pubkey";
  }

  // Queries a General Identity request by identity
  rpc GeneralIdentity(QueryGeneralIdentityRequest) returns (QueryGeneralIdentityResponse) {
    option (google.api.http).get = "/fairyring/pep/general_identity/{identity}";
  }

  // Queries a list of General Identity requests
  rpc GeneralIdentityAll(QueryGeneralIdentityAllRequest) returns (QueryGeneralIdentityAllResponse) {
    option (google.api.http).get = "/fairyring/pep/general_identity";
  }

  // Queries a Private Identity request item by identity
  rpc PrivateIdentity(QueryPrivateIdentityRequest) returns (QueryPrivateIdentityResponse) {
    option (google.api.http).get = "/Fairblock/fairyring/pep/private_identity/{identity}";
  }

  // Queries a list of DecryptData items.
  rpc DecryptData(QueryDecryptDataRequest) returns (QueryDecryptDataResponse) {
    option (google.api.http).get = "/Fairblock/fairyring/pep/decrypt_data/{pubkey}/{decryption_key}/{encrypted_data}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryGeneralIdentityRequest is request type for the Query/GeneralIdentity RPC method.
message QueryGeneralIdentityRequest {
  string identity = 1;
}

// QueryGeneralIdentityResponse is response type for the Query/GeneralIdentity RPC method.
message QueryGeneralIdentityResponse {
  IdentityExecutionEntry request_details = 1;
}

// QueryGeneralIdentityAllRequest is request type for the Query/GeneralIdentityAll RPC method.
message QueryGeneralIdentityAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGeneralIdentityAllResponse is response type for the Query/GeneralIdentityAll RPC method.
message QueryGeneralIdentityAllResponse {
  repeated IdentityExecutionEntry request_details_list = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryEncryptedTxRequest is request type for the Query/EncryptedTx RPC method.
message QueryEncryptedTxRequest {
  uint64 target_height = 1;
  uint64 index = 2;
}

// QueryEncryptedTxResponse is response type for the Query/EncryptedTx RPC method.
message QueryEncryptedTxResponse {
  EncryptedTx encrypted_tx = 1 [(gogoproto.nullable) = false];
}

// QueryEncryptedTxAllRequest is request type for the Query/EncryptedTxAll RPC method.
message QueryEncryptedTxAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryEncryptedTxAllResponse is response type for the Query/EncryptedTxAll RPC method.
message QueryEncryptedTxAllResponse {
  repeated EncryptedTxArray encrypted_tx_array = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryEncryptedTxAllFromHeightRequest is request type for the Query/EncryptedTxAllFromHeight RPC method.
message QueryEncryptedTxAllFromHeightRequest {
  uint64 target_height = 1;
}

// QueryEncryptedTxAllFromHeightResponse is response type for the Query/EncryptedTxAllFromHeight RPC method.
message QueryEncryptedTxAllFromHeightResponse {
  EncryptedTxArray encrypted_tx_array = 1 [(gogoproto.nullable) = false];
}

// QueryLatestHeightRequest is request type for the Query/LatestHeight RPC method.
message QueryLatestHeightRequest {}

// QueryLatestHeightResponse is response type for the Query/LatestHeight RPC method.
message QueryLatestHeightResponse {
  uint64 height = 1;
}

// QueryPepNonceRequest is request type for the Query/PepNonce RPC method.
message QueryPepNonceRequest {
  string address = 1;
}

// QueryPepNonceResponse is response type for the Query/PepNonce RPC method.
message QueryPepNonceResponse {
  PepNonce pep_nonce = 1 [(gogoproto.nullable) = false];
}

// QueryPepNonceAllRequest is request type for the Query/PepNonceAll RPC method.
message QueryPepNonceAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPepNonceAllResponse is response type for the Query/PepNonceAll RPC method.
message QueryPepNonceAllResponse {
  repeated PepNonce pep_nonce = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPubkeyRequest is request type for the Query/Pubkey RPC method.
message QueryPubkeyRequest {}

// QueryPubkeyResponse is response type for the Query/Pubkey RPC method.
message QueryPubkeyResponse {
  fairyring.common.ActivePublicKey active_pubkey = 1 [(gogoproto.nullable) = false];
  fairyring.common.QueuedPublicKey queued_pubkey = 2 [(gogoproto.nullable) = false];
}

// QueryPrivateIdentityRequest is request type for the Query/PrivateIdentity RPC method.
message QueryPrivateIdentityRequest {
  string identity = 1;
}

// QueryPrivateIdentityResponse is response type for the Query/PrivateIdentity RPC method.
message QueryPrivateIdentityResponse {
  string creator = 1;
  string identity = 2;
  string pubkey = 3;
  repeated fairyring.common.PrivateDecryptionKey private_decryption_keys = 4;
}

// QueryDecryptDataRequest is request type for the Query/DecryptData RPC method.
message QueryDecryptDataRequest {
  string pubkey = 1;
  string decryption_key = 2;
  string encrypted_data = 3;
}

// QueryDecryptDataResponse is response type for the Query/DecryptData RPC method.
message QueryDecryptDataResponse {
  string decrypted_data = 1;
}
