syntax = "proto3";

package fairyring.keyshare;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fairyring/keyshare/authorized_address.proto";
import "fairyring/keyshare/commitments.proto";
import "fairyring/keyshare/decryption_key.proto";
import "fairyring/keyshare/keyshare.proto";
import "fairyring/keyshare/params.proto";
import "fairyring/keyshare/pubkey.proto";
import "fairyring/keyshare/validator_set.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/Fairblock/fairyring/x/keyshare/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fairyring/keyshare/params";
  }

  // Commitments queries the lists of active and queued commitments
  rpc Commitments(QueryCommitmentsRequest) returns (QueryCommitmentsResponse) {
    option (google.api.http).get = "/fairyring/keyshare/commitments";
  }

  // Queries a ValidatorSet by index.
  rpc ValidatorSet(QueryValidatorSetRequest) returns (QueryValidatorSetResponse) {
    option (google.api.http).get = "/fairyring/keyshare/validator_set/{index}";
  }

  // Queries a list of ValidatorSet items.
  rpc ValidatorSetAll(QueryValidatorSetAllRequest) returns (QueryValidatorSetAllResponse) {
    option (google.api.http).get = "/fairyring/keyshare/validator_set";
  }

  // Queries a Keyshare by index.
  rpc Keyshare(QueryKeyshareRequest) returns (QueryKeyshareResponse) {
    option (google.api.http).get = "/fairyring/keyshare/keyshare/{validator}/{block_height}";
  }

  // Queries a list of Keyshare items.
  rpc KeyshareAll(QueryKeyshareAllRequest) returns (QueryKeyshareAllResponse) {
    option (google.api.http).get = "/fairyring/keyshare/keyshare";
  }

  // DecryptionKey queries a DecryptionKey item by height.
  rpc DecryptionKey(QueryDecryptionKeyRequest) returns (QueryDecryptionKeyResponse) {
    option (google.api.http).get = "/fairyring/keyshare/decryption_key/{height}";
  }

  // DecryptionKeyAll Queries a list of DecryptionKey items.
  rpc DecryptionKeyAll(QueryDecryptionKeyAllRequest) returns (QueryDecryptionKeyAllResponse) {
    option (google.api.http).get = "/fairyring/keyshare/decryption_key";
  }

  // Queries the public keys
  rpc Pubkey(QueryPubkeyRequest) returns (QueryPubkeyResponse) {
    option (google.api.http).get = "/fairyring/keyshare/pubkey";
  }

  // Queries a AuthorizedAddress item by target.
  rpc AuthorizedAddress(QueryAuthorizedAddressRequest) returns (QueryAuthorizedAddressResponse) {
    option (google.api.http).get = "/fairyring/keyshare/authorized_address/{target}";
  }

  // Queries a list of AuthorizedAddress items
  rpc AuthorizedAddressAll(QueryAuthorizedAddressAllRequest) returns (QueryAuthorizedAddressAllResponse) {
    option (google.api.http).get = "/fairyring/keyshare/authorized_address";
  }

  // Queries a GeneralKeyshare item by validator address and identity.
  rpc GeneralKeyshare(QueryGeneralKeyshareRequest) returns (QueryGeneralKeyshareResponse) {
    option (google.api.http).get = "/fairyring/keyshare/general_keyshare/{validator}/{id_type}/{id_value}";
  }

  // Queries a list of GeneralKeyshare items
  rpc GeneralKeyshareAll(QueryGeneralKeyshareAllRequest) returns (QueryGeneralKeyshareAllResponse) {
    option (google.api.http).get = "/fairyring/keyshare/general_keyshare";
  }

  // Queries verifiable randomness
  rpc VerifiableRandomness(QueryVerifiableRandomnessRequest) returns (QueryVerifiableRandomnessResponse) {
    option (google.api.http).get = "/fairyring/keyshare/verifiable_randomness";
  }
}

// QueryVerifiableRandomnessRequest is the request type for
// the Query/VerifiableRandomness  method
message QueryVerifiableRandomnessRequest {}

// QueryVerifiableRandomnessResponse is the response type for
// the Query/VerifiableRandomness  method
message QueryVerifiableRandomnessResponse {
  string randomness = 1;
  uint64 round = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryCommitmentsRequest is request type for the Query/Commitments RPC method.
message QueryCommitmentsRequest {}

// QueryCommitmentsResponse is response type for the Query/Commitments RPC method
message QueryCommitmentsResponse {
  Commitments active_commitments = 1;
  Commitments queued_commitments = 2;
}

// QueryValidatorSetRequest is request type for the Query/ValidatorSet RPC method.
message QueryValidatorSetRequest {
  string index = 1;
}

// QueryValidatorSetResponse is response type for the Query/ValidatorSet RPC method.
message QueryValidatorSetResponse {
  ValidatorSet validator_set = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorSetAllRequest is request type for the Query/ValidatorSetAll RPC method.
message QueryValidatorSetAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryValidatorSetAllResponse is response type for the Query/ValidatorSetAll RPC method.
message QueryValidatorSetAllResponse {
  repeated ValidatorSet validator_set = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryKeyshareRequest is request type for the Query/Keyshare RPC method.
message QueryKeyshareRequest {
  string validator = 1;
  uint64 block_height = 2;
}

// QueryKeyshareResponse is response type for the Query/Keyshare RPC method.
message QueryKeyshareResponse {
  Keyshare keyshare = 1 [(gogoproto.nullable) = false];
}

// QueryKeyshareAllRequest is request type for the Query/KeyshareAll RPC method.
message QueryKeyshareAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryKeyshareAllResponse is response type for the Query/KeyshareAll RPC method.
message QueryKeyshareAllResponse {
  repeated Keyshare keyshare = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDecryptionKeyRequest is request type for the Query/DecryptionKey RPC method.
message QueryDecryptionKeyRequest {
  uint64 height = 1;
}

// QueryDecryptionKeyResponse is response type for the Query/DecryptionKey RPC method.
message QueryDecryptionKeyResponse {
  DecryptionKey decryption_key = 1 [(gogoproto.nullable) = false];
}

// QueryDecryptionKeyAllRequest is request type for the Query/DecryptionKeyAll RPC method.
message QueryDecryptionKeyAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDecryptionKeyAllResponse is response type for the Query/DecryptionKeyAll RPC method.
message QueryDecryptionKeyAllResponse {
  repeated DecryptionKey decryption_keys = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPubkeyRequest is request type for the Query/Pubkey RPC method.
message QueryPubkeyRequest {}

// QueryPubkeyResponse is response type for the Query/Pubkey RPC method.
message QueryPubkeyResponse {
  ActivePubkey active_pubkey = 1 [(gogoproto.nullable) = false];
  QueuedPubkey queued_pubkey = 2 [(gogoproto.nullable) = false];
}

// QueryAuthorizedAddressRequest is request type for the Query/AuthorizedAddress RPC method.
message QueryAuthorizedAddressRequest {
  string target = 1;
}

// QueryAuthorizedAddressResponse is response type for the Query/AuthorizedAddress RPC method.
message QueryAuthorizedAddressResponse {
  AuthorizedAddress authorized_address = 1 [(gogoproto.nullable) = false];
}

// QueryAuthorizedAddressAllRequest is request type for the Query/AuthorizedAddressAll RPC method.
message QueryAuthorizedAddressAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAuthorizedAddressAllResponse is response type for the Query/AuthorizedAddressAll RPC method.
message QueryAuthorizedAddressAllResponse {
  repeated AuthorizedAddress authorized_address = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGeneralKeyshareRequest is request type for the Query/GeneralKeyshare RPC method.
message QueryGeneralKeyshareRequest {
  string validator = 1;
  string id_type = 2;
  string id_value = 3;
}

// QueryGeneralKeyshareResponse is response type for the Query/GeneralKeyshare RPC method.
message QueryGeneralKeyshareResponse {
  GeneralKeyshare general_keyshare = 1 [(gogoproto.nullable) = false];
}

// QueryGeneralKeyshareAllRequest is request type for the Query/GeneralKeyshareAll RPC method.
message QueryGeneralKeyshareAllRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGeneralKeyshareAllResponse is response type for the Query/GeneralKeyshareAll RPC method.
message QueryGeneralKeyshareAllResponse {
  repeated GeneralKeyshare general_keyshare = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
