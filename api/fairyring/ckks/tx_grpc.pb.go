// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fairyring/ckks/tx.proto

package ckks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName         = "/fairyring.ckks.Msg/UpdateParams"
	Msg_SubmitPkgShare_FullMethodName       = "/fairyring.ckks.Msg/SubmitPkgShare"
	Msg_SubmitRkgShareRound1_FullMethodName = "/fairyring.ckks.Msg/SubmitRkgShareRound1"
	Msg_SubmitRkgShareRound2_FullMethodName = "/fairyring.ckks.Msg/SubmitRkgShareRound2"
	Msg_SubmitGkgShare_FullMethodName       = "/fairyring.ckks.Msg/SubmitGkgShare"
	Msg_SubmitShamirShare_FullMethodName    = "/fairyring.ckks.Msg/SubmitShamirShare"
	Msg_KeySwitchRequest_FullMethodName     = "/fairyring.ckks.Msg/KeySwitchRequest"
	Msg_SubmitPksShare_FullMethodName       = "/fairyring.ckks.Msg/SubmitPksShare"
	Msg_DecryptionRequest_FullMethodName    = "/fairyring.ckks.Msg/DecryptionRequest"
	Msg_SubmitDecShare_FullMethodName       = "/fairyring.ckks.Msg/SubmitDecShare"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	SubmitPkgShare(ctx context.Context, in *MsgSubmitPkgShare, opts ...grpc.CallOption) (*MsgSubmitPkgShareResponse, error)
	SubmitRkgShareRound1(ctx context.Context, in *MsgSubmitRkgShareRound1, opts ...grpc.CallOption) (*MsgSubmitRkgShareRound1Response, error)
	SubmitRkgShareRound2(ctx context.Context, in *MsgSubmitRkgShareRound2, opts ...grpc.CallOption) (*MsgSubmitRkgShareRound2Response, error)
	SubmitGkgShare(ctx context.Context, in *MsgSubmitGkgShare, opts ...grpc.CallOption) (*MsgSubmitGkgShareResponse, error)
	SubmitShamirShare(ctx context.Context, in *MsgSubmitShamirShare, opts ...grpc.CallOption) (*MsgSubmitShamirShareResponse, error)
	KeySwitchRequest(ctx context.Context, in *MsgKeySwitchRequest, opts ...grpc.CallOption) (*MsgKeySwitchRequestResponse, error)
	SubmitPksShare(ctx context.Context, in *MsgSubmitPksShare, opts ...grpc.CallOption) (*MsgSubmitPksShareResponse, error)
	DecryptionRequest(ctx context.Context, in *MsgDecryptionRequest, opts ...grpc.CallOption) (*MsgDecryptionRequestResponse, error)
	SubmitDecShare(ctx context.Context, in *MsgSubmitDecShare, opts ...grpc.CallOption) (*MsgSubmitDecShareResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPkgShare(ctx context.Context, in *MsgSubmitPkgShare, opts ...grpc.CallOption) (*MsgSubmitPkgShareResponse, error) {
	out := new(MsgSubmitPkgShareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitPkgShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitRkgShareRound1(ctx context.Context, in *MsgSubmitRkgShareRound1, opts ...grpc.CallOption) (*MsgSubmitRkgShareRound1Response, error) {
	out := new(MsgSubmitRkgShareRound1Response)
	err := c.cc.Invoke(ctx, Msg_SubmitRkgShareRound1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitRkgShareRound2(ctx context.Context, in *MsgSubmitRkgShareRound2, opts ...grpc.CallOption) (*MsgSubmitRkgShareRound2Response, error) {
	out := new(MsgSubmitRkgShareRound2Response)
	err := c.cc.Invoke(ctx, Msg_SubmitRkgShareRound2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitGkgShare(ctx context.Context, in *MsgSubmitGkgShare, opts ...grpc.CallOption) (*MsgSubmitGkgShareResponse, error) {
	out := new(MsgSubmitGkgShareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitGkgShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitShamirShare(ctx context.Context, in *MsgSubmitShamirShare, opts ...grpc.CallOption) (*MsgSubmitShamirShareResponse, error) {
	out := new(MsgSubmitShamirShareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitShamirShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KeySwitchRequest(ctx context.Context, in *MsgKeySwitchRequest, opts ...grpc.CallOption) (*MsgKeySwitchRequestResponse, error) {
	out := new(MsgKeySwitchRequestResponse)
	err := c.cc.Invoke(ctx, Msg_KeySwitchRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPksShare(ctx context.Context, in *MsgSubmitPksShare, opts ...grpc.CallOption) (*MsgSubmitPksShareResponse, error) {
	out := new(MsgSubmitPksShareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitPksShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DecryptionRequest(ctx context.Context, in *MsgDecryptionRequest, opts ...grpc.CallOption) (*MsgDecryptionRequestResponse, error) {
	out := new(MsgDecryptionRequestResponse)
	err := c.cc.Invoke(ctx, Msg_DecryptionRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitDecShare(ctx context.Context, in *MsgSubmitDecShare, opts ...grpc.CallOption) (*MsgSubmitDecShareResponse, error) {
	out := new(MsgSubmitDecShareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitDecShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	SubmitPkgShare(context.Context, *MsgSubmitPkgShare) (*MsgSubmitPkgShareResponse, error)
	SubmitRkgShareRound1(context.Context, *MsgSubmitRkgShareRound1) (*MsgSubmitRkgShareRound1Response, error)
	SubmitRkgShareRound2(context.Context, *MsgSubmitRkgShareRound2) (*MsgSubmitRkgShareRound2Response, error)
	SubmitGkgShare(context.Context, *MsgSubmitGkgShare) (*MsgSubmitGkgShareResponse, error)
	SubmitShamirShare(context.Context, *MsgSubmitShamirShare) (*MsgSubmitShamirShareResponse, error)
	KeySwitchRequest(context.Context, *MsgKeySwitchRequest) (*MsgKeySwitchRequestResponse, error)
	SubmitPksShare(context.Context, *MsgSubmitPksShare) (*MsgSubmitPksShareResponse, error)
	DecryptionRequest(context.Context, *MsgDecryptionRequest) (*MsgDecryptionRequestResponse, error)
	SubmitDecShare(context.Context, *MsgSubmitDecShare) (*MsgSubmitDecShareResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) SubmitPkgShare(context.Context, *MsgSubmitPkgShare) (*MsgSubmitPkgShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPkgShare not implemented")
}
func (UnimplementedMsgServer) SubmitRkgShareRound1(context.Context, *MsgSubmitRkgShareRound1) (*MsgSubmitRkgShareRound1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRkgShareRound1 not implemented")
}
func (UnimplementedMsgServer) SubmitRkgShareRound2(context.Context, *MsgSubmitRkgShareRound2) (*MsgSubmitRkgShareRound2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRkgShareRound2 not implemented")
}
func (UnimplementedMsgServer) SubmitGkgShare(context.Context, *MsgSubmitGkgShare) (*MsgSubmitGkgShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGkgShare not implemented")
}
func (UnimplementedMsgServer) SubmitShamirShare(context.Context, *MsgSubmitShamirShare) (*MsgSubmitShamirShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitShamirShare not implemented")
}
func (UnimplementedMsgServer) KeySwitchRequest(context.Context, *MsgKeySwitchRequest) (*MsgKeySwitchRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeySwitchRequest not implemented")
}
func (UnimplementedMsgServer) SubmitPksShare(context.Context, *MsgSubmitPksShare) (*MsgSubmitPksShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPksShare not implemented")
}
func (UnimplementedMsgServer) DecryptionRequest(context.Context, *MsgDecryptionRequest) (*MsgDecryptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptionRequest not implemented")
}
func (UnimplementedMsgServer) SubmitDecShare(context.Context, *MsgSubmitDecShare) (*MsgSubmitDecShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDecShare not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPkgShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPkgShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPkgShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitPkgShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPkgShare(ctx, req.(*MsgSubmitPkgShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitRkgShareRound1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitRkgShareRound1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitRkgShareRound1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitRkgShareRound1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitRkgShareRound1(ctx, req.(*MsgSubmitRkgShareRound1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitRkgShareRound2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitRkgShareRound2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitRkgShareRound2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitRkgShareRound2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitRkgShareRound2(ctx, req.(*MsgSubmitRkgShareRound2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitGkgShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitGkgShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitGkgShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitGkgShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitGkgShare(ctx, req.(*MsgSubmitGkgShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitShamirShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitShamirShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitShamirShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitShamirShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitShamirShare(ctx, req.(*MsgSubmitShamirShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KeySwitchRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKeySwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KeySwitchRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KeySwitchRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KeySwitchRequest(ctx, req.(*MsgKeySwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPksShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPksShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPksShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitPksShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPksShare(ctx, req.(*MsgSubmitPksShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DecryptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DecryptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DecryptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DecryptionRequest(ctx, req.(*MsgDecryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitDecShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitDecShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitDecShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitDecShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitDecShare(ctx, req.(*MsgSubmitDecShare))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.ckks.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "SubmitPkgShare",
			Handler:    _Msg_SubmitPkgShare_Handler,
		},
		{
			MethodName: "SubmitRkgShareRound1",
			Handler:    _Msg_SubmitRkgShareRound1_Handler,
		},
		{
			MethodName: "SubmitRkgShareRound2",
			Handler:    _Msg_SubmitRkgShareRound2_Handler,
		},
		{
			MethodName: "SubmitGkgShare",
			Handler:    _Msg_SubmitGkgShare_Handler,
		},
		{
			MethodName: "SubmitShamirShare",
			Handler:    _Msg_SubmitShamirShare_Handler,
		},
		{
			MethodName: "KeySwitchRequest",
			Handler:    _Msg_KeySwitchRequest_Handler,
		},
		{
			MethodName: "SubmitPksShare",
			Handler:    _Msg_SubmitPksShare_Handler,
		},
		{
			MethodName: "DecryptionRequest",
			Handler:    _Msg_DecryptionRequest_Handler,
		},
		{
			MethodName: "SubmitDecShare",
			Handler:    _Msg_SubmitDecShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/ckks/tx.proto",
}
