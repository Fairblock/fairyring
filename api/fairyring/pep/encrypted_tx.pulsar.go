// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package pep

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_EncryptedTx                           protoreflect.MessageDescriptor
	fd_EncryptedTx_target_height             protoreflect.FieldDescriptor
	fd_EncryptedTx_index                     protoreflect.FieldDescriptor
	fd_EncryptedTx_data                      protoreflect.FieldDescriptor
	fd_EncryptedTx_creator                   protoreflect.FieldDescriptor
	fd_EncryptedTx_charged_gas               protoreflect.FieldDescriptor
	fd_EncryptedTx_processed_at_chain_height protoreflect.FieldDescriptor
	fd_EncryptedTx_expired                   protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_pep_encrypted_tx_proto_init()
	md_EncryptedTx = File_fairyring_pep_encrypted_tx_proto.Messages().ByName("EncryptedTx")
	fd_EncryptedTx_target_height = md_EncryptedTx.Fields().ByName("target_height")
	fd_EncryptedTx_index = md_EncryptedTx.Fields().ByName("index")
	fd_EncryptedTx_data = md_EncryptedTx.Fields().ByName("data")
	fd_EncryptedTx_creator = md_EncryptedTx.Fields().ByName("creator")
	fd_EncryptedTx_charged_gas = md_EncryptedTx.Fields().ByName("charged_gas")
	fd_EncryptedTx_processed_at_chain_height = md_EncryptedTx.Fields().ByName("processed_at_chain_height")
	fd_EncryptedTx_expired = md_EncryptedTx.Fields().ByName("expired")
}

var _ protoreflect.Message = (*fastReflection_EncryptedTx)(nil)

type fastReflection_EncryptedTx EncryptedTx

func (x *EncryptedTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EncryptedTx)(x)
}

func (x *EncryptedTx) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EncryptedTx_messageType fastReflection_EncryptedTx_messageType
var _ protoreflect.MessageType = fastReflection_EncryptedTx_messageType{}

type fastReflection_EncryptedTx_messageType struct{}

func (x fastReflection_EncryptedTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EncryptedTx)(nil)
}
func (x fastReflection_EncryptedTx_messageType) New() protoreflect.Message {
	return new(fastReflection_EncryptedTx)
}
func (x fastReflection_EncryptedTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EncryptedTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EncryptedTx) Descriptor() protoreflect.MessageDescriptor {
	return md_EncryptedTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EncryptedTx) Type() protoreflect.MessageType {
	return _fastReflection_EncryptedTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EncryptedTx) New() protoreflect.Message {
	return new(fastReflection_EncryptedTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EncryptedTx) Interface() protoreflect.ProtoMessage {
	return (*EncryptedTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EncryptedTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TargetHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TargetHeight)
		if !f(fd_EncryptedTx_target_height, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_EncryptedTx_index, value) {
			return
		}
	}
	if x.Data != "" {
		value := protoreflect.ValueOfString(x.Data)
		if !f(fd_EncryptedTx_data, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_EncryptedTx_creator, value) {
			return
		}
	}
	if x.ChargedGas != nil {
		value := protoreflect.ValueOfMessage(x.ChargedGas.ProtoReflect())
		if !f(fd_EncryptedTx_charged_gas, value) {
			return
		}
	}
	if x.ProcessedAtChainHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ProcessedAtChainHeight)
		if !f(fd_EncryptedTx_processed_at_chain_height, value) {
			return
		}
	}
	if x.Expired != false {
		value := protoreflect.ValueOfBool(x.Expired)
		if !f(fd_EncryptedTx_expired, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EncryptedTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTx.target_height":
		return x.TargetHeight != uint64(0)
	case "fairyring.pep.EncryptedTx.index":
		return x.Index != uint64(0)
	case "fairyring.pep.EncryptedTx.data":
		return x.Data != ""
	case "fairyring.pep.EncryptedTx.creator":
		return x.Creator != ""
	case "fairyring.pep.EncryptedTx.charged_gas":
		return x.ChargedGas != nil
	case "fairyring.pep.EncryptedTx.processed_at_chain_height":
		return x.ProcessedAtChainHeight != uint64(0)
	case "fairyring.pep.EncryptedTx.expired":
		return x.Expired != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTx.target_height":
		x.TargetHeight = uint64(0)
	case "fairyring.pep.EncryptedTx.index":
		x.Index = uint64(0)
	case "fairyring.pep.EncryptedTx.data":
		x.Data = ""
	case "fairyring.pep.EncryptedTx.creator":
		x.Creator = ""
	case "fairyring.pep.EncryptedTx.charged_gas":
		x.ChargedGas = nil
	case "fairyring.pep.EncryptedTx.processed_at_chain_height":
		x.ProcessedAtChainHeight = uint64(0)
	case "fairyring.pep.EncryptedTx.expired":
		x.Expired = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EncryptedTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.pep.EncryptedTx.target_height":
		value := x.TargetHeight
		return protoreflect.ValueOfUint64(value)
	case "fairyring.pep.EncryptedTx.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "fairyring.pep.EncryptedTx.data":
		value := x.Data
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.EncryptedTx.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.EncryptedTx.charged_gas":
		value := x.ChargedGas
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.pep.EncryptedTx.processed_at_chain_height":
		value := x.ProcessedAtChainHeight
		return protoreflect.ValueOfUint64(value)
	case "fairyring.pep.EncryptedTx.expired":
		value := x.Expired
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTx.target_height":
		x.TargetHeight = value.Uint()
	case "fairyring.pep.EncryptedTx.index":
		x.Index = value.Uint()
	case "fairyring.pep.EncryptedTx.data":
		x.Data = value.Interface().(string)
	case "fairyring.pep.EncryptedTx.creator":
		x.Creator = value.Interface().(string)
	case "fairyring.pep.EncryptedTx.charged_gas":
		x.ChargedGas = value.Message().Interface().(*v1beta1.Coin)
	case "fairyring.pep.EncryptedTx.processed_at_chain_height":
		x.ProcessedAtChainHeight = value.Uint()
	case "fairyring.pep.EncryptedTx.expired":
		x.Expired = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTx.charged_gas":
		if x.ChargedGas == nil {
			x.ChargedGas = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ChargedGas.ProtoReflect())
	case "fairyring.pep.EncryptedTx.target_height":
		panic(fmt.Errorf("field target_height of message fairyring.pep.EncryptedTx is not mutable"))
	case "fairyring.pep.EncryptedTx.index":
		panic(fmt.Errorf("field index of message fairyring.pep.EncryptedTx is not mutable"))
	case "fairyring.pep.EncryptedTx.data":
		panic(fmt.Errorf("field data of message fairyring.pep.EncryptedTx is not mutable"))
	case "fairyring.pep.EncryptedTx.creator":
		panic(fmt.Errorf("field creator of message fairyring.pep.EncryptedTx is not mutable"))
	case "fairyring.pep.EncryptedTx.processed_at_chain_height":
		panic(fmt.Errorf("field processed_at_chain_height of message fairyring.pep.EncryptedTx is not mutable"))
	case "fairyring.pep.EncryptedTx.expired":
		panic(fmt.Errorf("field expired of message fairyring.pep.EncryptedTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EncryptedTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTx.target_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.pep.EncryptedTx.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.pep.EncryptedTx.data":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.EncryptedTx.creator":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.EncryptedTx.charged_gas":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.pep.EncryptedTx.processed_at_chain_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.pep.EncryptedTx.expired":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EncryptedTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.pep.EncryptedTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EncryptedTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EncryptedTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EncryptedTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EncryptedTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TargetHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.TargetHeight))
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ChargedGas != nil {
			l = options.Size(x.ChargedGas)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ProcessedAtChainHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ProcessedAtChainHeight))
		}
		if x.Expired {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EncryptedTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Expired {
			i--
			if x.Expired {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.ProcessedAtChainHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProcessedAtChainHeight))
			i--
			dAtA[i] = 0x30
		}
		if x.ChargedGas != nil {
			encoded, err := options.Marshal(x.ChargedGas)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x10
		}
		if x.TargetHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TargetHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EncryptedTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncryptedTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncryptedTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
				}
				x.TargetHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TargetHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChargedGas", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ChargedGas == nil {
					x.ChargedGas = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ChargedGas); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProcessedAtChainHeight", wireType)
				}
				x.ProcessedAtChainHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProcessedAtChainHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Expired = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_EncryptedTxArray_1_list)(nil)

type _EncryptedTxArray_1_list struct {
	list *[]*EncryptedTx
}

func (x *_EncryptedTxArray_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EncryptedTxArray_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EncryptedTxArray_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EncryptedTx)
	(*x.list)[i] = concreteValue
}

func (x *_EncryptedTxArray_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EncryptedTx)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EncryptedTxArray_1_list) AppendMutable() protoreflect.Value {
	v := new(EncryptedTx)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EncryptedTxArray_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EncryptedTxArray_1_list) NewElement() protoreflect.Value {
	v := new(EncryptedTx)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EncryptedTxArray_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EncryptedTxArray               protoreflect.MessageDescriptor
	fd_EncryptedTxArray_encrypted_txs protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_pep_encrypted_tx_proto_init()
	md_EncryptedTxArray = File_fairyring_pep_encrypted_tx_proto.Messages().ByName("EncryptedTxArray")
	fd_EncryptedTxArray_encrypted_txs = md_EncryptedTxArray.Fields().ByName("encrypted_txs")
}

var _ protoreflect.Message = (*fastReflection_EncryptedTxArray)(nil)

type fastReflection_EncryptedTxArray EncryptedTxArray

func (x *EncryptedTxArray) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EncryptedTxArray)(x)
}

func (x *EncryptedTxArray) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EncryptedTxArray_messageType fastReflection_EncryptedTxArray_messageType
var _ protoreflect.MessageType = fastReflection_EncryptedTxArray_messageType{}

type fastReflection_EncryptedTxArray_messageType struct{}

func (x fastReflection_EncryptedTxArray_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EncryptedTxArray)(nil)
}
func (x fastReflection_EncryptedTxArray_messageType) New() protoreflect.Message {
	return new(fastReflection_EncryptedTxArray)
}
func (x fastReflection_EncryptedTxArray_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EncryptedTxArray
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EncryptedTxArray) Descriptor() protoreflect.MessageDescriptor {
	return md_EncryptedTxArray
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EncryptedTxArray) Type() protoreflect.MessageType {
	return _fastReflection_EncryptedTxArray_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EncryptedTxArray) New() protoreflect.Message {
	return new(fastReflection_EncryptedTxArray)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EncryptedTxArray) Interface() protoreflect.ProtoMessage {
	return (*EncryptedTxArray)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EncryptedTxArray) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.EncryptedTxs) != 0 {
		value := protoreflect.ValueOfList(&_EncryptedTxArray_1_list{list: &x.EncryptedTxs})
		if !f(fd_EncryptedTxArray_encrypted_txs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EncryptedTxArray) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTxArray.encrypted_txs":
		return len(x.EncryptedTxs) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTxArray) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTxArray.encrypted_txs":
		x.EncryptedTxs = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EncryptedTxArray) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.pep.EncryptedTxArray.encrypted_txs":
		if len(x.EncryptedTxs) == 0 {
			return protoreflect.ValueOfList(&_EncryptedTxArray_1_list{})
		}
		listValue := &_EncryptedTxArray_1_list{list: &x.EncryptedTxs}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTxArray does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTxArray) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTxArray.encrypted_txs":
		lv := value.List()
		clv := lv.(*_EncryptedTxArray_1_list)
		x.EncryptedTxs = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTxArray) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTxArray.encrypted_txs":
		if x.EncryptedTxs == nil {
			x.EncryptedTxs = []*EncryptedTx{}
		}
		value := &_EncryptedTxArray_1_list{list: &x.EncryptedTxs}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EncryptedTxArray) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.EncryptedTxArray.encrypted_txs":
		list := []*EncryptedTx{}
		return protoreflect.ValueOfList(&_EncryptedTxArray_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.EncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.EncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EncryptedTxArray) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.pep.EncryptedTxArray", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EncryptedTxArray) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedTxArray) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EncryptedTxArray) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EncryptedTxArray) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EncryptedTxArray)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.EncryptedTxs) > 0 {
			for _, e := range x.EncryptedTxs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EncryptedTxArray)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EncryptedTxs) > 0 {
			for iNdEx := len(x.EncryptedTxs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EncryptedTxs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EncryptedTxArray)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncryptedTxArray: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncryptedTxArray: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncryptedTxs = append(x.EncryptedTxs, &EncryptedTx{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EncryptedTxs[len(x.EncryptedTxs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GeneralEncryptedTx             protoreflect.MessageDescriptor
	fd_GeneralEncryptedTx_identity    protoreflect.FieldDescriptor
	fd_GeneralEncryptedTx_index       protoreflect.FieldDescriptor
	fd_GeneralEncryptedTx_data        protoreflect.FieldDescriptor
	fd_GeneralEncryptedTx_creator     protoreflect.FieldDescriptor
	fd_GeneralEncryptedTx_charged_gas protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_pep_encrypted_tx_proto_init()
	md_GeneralEncryptedTx = File_fairyring_pep_encrypted_tx_proto.Messages().ByName("GeneralEncryptedTx")
	fd_GeneralEncryptedTx_identity = md_GeneralEncryptedTx.Fields().ByName("identity")
	fd_GeneralEncryptedTx_index = md_GeneralEncryptedTx.Fields().ByName("index")
	fd_GeneralEncryptedTx_data = md_GeneralEncryptedTx.Fields().ByName("data")
	fd_GeneralEncryptedTx_creator = md_GeneralEncryptedTx.Fields().ByName("creator")
	fd_GeneralEncryptedTx_charged_gas = md_GeneralEncryptedTx.Fields().ByName("charged_gas")
}

var _ protoreflect.Message = (*fastReflection_GeneralEncryptedTx)(nil)

type fastReflection_GeneralEncryptedTx GeneralEncryptedTx

func (x *GeneralEncryptedTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GeneralEncryptedTx)(x)
}

func (x *GeneralEncryptedTx) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GeneralEncryptedTx_messageType fastReflection_GeneralEncryptedTx_messageType
var _ protoreflect.MessageType = fastReflection_GeneralEncryptedTx_messageType{}

type fastReflection_GeneralEncryptedTx_messageType struct{}

func (x fastReflection_GeneralEncryptedTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GeneralEncryptedTx)(nil)
}
func (x fastReflection_GeneralEncryptedTx_messageType) New() protoreflect.Message {
	return new(fastReflection_GeneralEncryptedTx)
}
func (x fastReflection_GeneralEncryptedTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GeneralEncryptedTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GeneralEncryptedTx) Descriptor() protoreflect.MessageDescriptor {
	return md_GeneralEncryptedTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GeneralEncryptedTx) Type() protoreflect.MessageType {
	return _fastReflection_GeneralEncryptedTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GeneralEncryptedTx) New() protoreflect.Message {
	return new(fastReflection_GeneralEncryptedTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GeneralEncryptedTx) Interface() protoreflect.ProtoMessage {
	return (*GeneralEncryptedTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GeneralEncryptedTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_GeneralEncryptedTx_identity, value) {
			return
		}
	}
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_GeneralEncryptedTx_index, value) {
			return
		}
	}
	if x.Data != "" {
		value := protoreflect.ValueOfString(x.Data)
		if !f(fd_GeneralEncryptedTx_data, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_GeneralEncryptedTx_creator, value) {
			return
		}
	}
	if x.ChargedGas != nil {
		value := protoreflect.ValueOfMessage(x.ChargedGas.ProtoReflect())
		if !f(fd_GeneralEncryptedTx_charged_gas, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GeneralEncryptedTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTx.identity":
		return x.Identity != ""
	case "fairyring.pep.GeneralEncryptedTx.index":
		return x.Index != uint64(0)
	case "fairyring.pep.GeneralEncryptedTx.data":
		return x.Data != ""
	case "fairyring.pep.GeneralEncryptedTx.creator":
		return x.Creator != ""
	case "fairyring.pep.GeneralEncryptedTx.charged_gas":
		return x.ChargedGas != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTx.identity":
		x.Identity = ""
	case "fairyring.pep.GeneralEncryptedTx.index":
		x.Index = uint64(0)
	case "fairyring.pep.GeneralEncryptedTx.data":
		x.Data = ""
	case "fairyring.pep.GeneralEncryptedTx.creator":
		x.Creator = ""
	case "fairyring.pep.GeneralEncryptedTx.charged_gas":
		x.ChargedGas = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GeneralEncryptedTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.pep.GeneralEncryptedTx.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.GeneralEncryptedTx.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "fairyring.pep.GeneralEncryptedTx.data":
		value := x.Data
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.GeneralEncryptedTx.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.GeneralEncryptedTx.charged_gas":
		value := x.ChargedGas
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTx.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.pep.GeneralEncryptedTx.index":
		x.Index = value.Uint()
	case "fairyring.pep.GeneralEncryptedTx.data":
		x.Data = value.Interface().(string)
	case "fairyring.pep.GeneralEncryptedTx.creator":
		x.Creator = value.Interface().(string)
	case "fairyring.pep.GeneralEncryptedTx.charged_gas":
		x.ChargedGas = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTx.charged_gas":
		if x.ChargedGas == nil {
			x.ChargedGas = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ChargedGas.ProtoReflect())
	case "fairyring.pep.GeneralEncryptedTx.identity":
		panic(fmt.Errorf("field identity of message fairyring.pep.GeneralEncryptedTx is not mutable"))
	case "fairyring.pep.GeneralEncryptedTx.index":
		panic(fmt.Errorf("field index of message fairyring.pep.GeneralEncryptedTx is not mutable"))
	case "fairyring.pep.GeneralEncryptedTx.data":
		panic(fmt.Errorf("field data of message fairyring.pep.GeneralEncryptedTx is not mutable"))
	case "fairyring.pep.GeneralEncryptedTx.creator":
		panic(fmt.Errorf("field creator of message fairyring.pep.GeneralEncryptedTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GeneralEncryptedTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTx.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.GeneralEncryptedTx.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.pep.GeneralEncryptedTx.data":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.GeneralEncryptedTx.creator":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.GeneralEncryptedTx.charged_gas":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTx"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GeneralEncryptedTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.pep.GeneralEncryptedTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GeneralEncryptedTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GeneralEncryptedTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GeneralEncryptedTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GeneralEncryptedTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ChargedGas != nil {
			l = options.Size(x.ChargedGas)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GeneralEncryptedTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ChargedGas != nil {
			encoded, err := options.Marshal(x.ChargedGas)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GeneralEncryptedTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GeneralEncryptedTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GeneralEncryptedTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChargedGas", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ChargedGas == nil {
					x.ChargedGas = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ChargedGas); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_GeneralEncryptedTxArray_1_list)(nil)

type _GeneralEncryptedTxArray_1_list struct {
	list *[]*GeneralEncryptedTx
}

func (x *_GeneralEncryptedTxArray_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GeneralEncryptedTxArray_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GeneralEncryptedTxArray_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*GeneralEncryptedTx)
	(*x.list)[i] = concreteValue
}

func (x *_GeneralEncryptedTxArray_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*GeneralEncryptedTx)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GeneralEncryptedTxArray_1_list) AppendMutable() protoreflect.Value {
	v := new(GeneralEncryptedTx)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GeneralEncryptedTxArray_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GeneralEncryptedTxArray_1_list) NewElement() protoreflect.Value {
	v := new(GeneralEncryptedTx)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GeneralEncryptedTxArray_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GeneralEncryptedTxArray               protoreflect.MessageDescriptor
	fd_GeneralEncryptedTxArray_encrypted_txs protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_pep_encrypted_tx_proto_init()
	md_GeneralEncryptedTxArray = File_fairyring_pep_encrypted_tx_proto.Messages().ByName("GeneralEncryptedTxArray")
	fd_GeneralEncryptedTxArray_encrypted_txs = md_GeneralEncryptedTxArray.Fields().ByName("encrypted_txs")
}

var _ protoreflect.Message = (*fastReflection_GeneralEncryptedTxArray)(nil)

type fastReflection_GeneralEncryptedTxArray GeneralEncryptedTxArray

func (x *GeneralEncryptedTxArray) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GeneralEncryptedTxArray)(x)
}

func (x *GeneralEncryptedTxArray) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GeneralEncryptedTxArray_messageType fastReflection_GeneralEncryptedTxArray_messageType
var _ protoreflect.MessageType = fastReflection_GeneralEncryptedTxArray_messageType{}

type fastReflection_GeneralEncryptedTxArray_messageType struct{}

func (x fastReflection_GeneralEncryptedTxArray_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GeneralEncryptedTxArray)(nil)
}
func (x fastReflection_GeneralEncryptedTxArray_messageType) New() protoreflect.Message {
	return new(fastReflection_GeneralEncryptedTxArray)
}
func (x fastReflection_GeneralEncryptedTxArray_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GeneralEncryptedTxArray
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GeneralEncryptedTxArray) Descriptor() protoreflect.MessageDescriptor {
	return md_GeneralEncryptedTxArray
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GeneralEncryptedTxArray) Type() protoreflect.MessageType {
	return _fastReflection_GeneralEncryptedTxArray_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GeneralEncryptedTxArray) New() protoreflect.Message {
	return new(fastReflection_GeneralEncryptedTxArray)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GeneralEncryptedTxArray) Interface() protoreflect.ProtoMessage {
	return (*GeneralEncryptedTxArray)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GeneralEncryptedTxArray) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.EncryptedTxs) != 0 {
		value := protoreflect.ValueOfList(&_GeneralEncryptedTxArray_1_list{list: &x.EncryptedTxs})
		if !f(fd_GeneralEncryptedTxArray_encrypted_txs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GeneralEncryptedTxArray) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTxArray.encrypted_txs":
		return len(x.EncryptedTxs) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTxArray) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTxArray.encrypted_txs":
		x.EncryptedTxs = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GeneralEncryptedTxArray) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.pep.GeneralEncryptedTxArray.encrypted_txs":
		if len(x.EncryptedTxs) == 0 {
			return protoreflect.ValueOfList(&_GeneralEncryptedTxArray_1_list{})
		}
		listValue := &_GeneralEncryptedTxArray_1_list{list: &x.EncryptedTxs}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTxArray does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTxArray) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTxArray.encrypted_txs":
		lv := value.List()
		clv := lv.(*_GeneralEncryptedTxArray_1_list)
		x.EncryptedTxs = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTxArray) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTxArray.encrypted_txs":
		if x.EncryptedTxs == nil {
			x.EncryptedTxs = []*GeneralEncryptedTx{}
		}
		value := &_GeneralEncryptedTxArray_1_list{list: &x.EncryptedTxs}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GeneralEncryptedTxArray) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.GeneralEncryptedTxArray.encrypted_txs":
		list := []*GeneralEncryptedTx{}
		return protoreflect.ValueOfList(&_GeneralEncryptedTxArray_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.GeneralEncryptedTxArray"))
		}
		panic(fmt.Errorf("message fairyring.pep.GeneralEncryptedTxArray does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GeneralEncryptedTxArray) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.pep.GeneralEncryptedTxArray", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GeneralEncryptedTxArray) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralEncryptedTxArray) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GeneralEncryptedTxArray) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GeneralEncryptedTxArray) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GeneralEncryptedTxArray)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.EncryptedTxs) > 0 {
			for _, e := range x.EncryptedTxs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GeneralEncryptedTxArray)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EncryptedTxs) > 0 {
			for iNdEx := len(x.EncryptedTxs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EncryptedTxs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GeneralEncryptedTxArray)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GeneralEncryptedTxArray: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GeneralEncryptedTxArray: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncryptedTxs = append(x.EncryptedTxs, &GeneralEncryptedTx{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EncryptedTxs[len(x.EncryptedTxs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IdentityExecutionEntry                protoreflect.MessageDescriptor
	fd_IdentityExecutionEntry_creator        protoreflect.FieldDescriptor
	fd_IdentityExecutionEntry_request_id     protoreflect.FieldDescriptor
	fd_IdentityExecutionEntry_identity       protoreflect.FieldDescriptor
	fd_IdentityExecutionEntry_pubkey         protoreflect.FieldDescriptor
	fd_IdentityExecutionEntry_tx_list        protoreflect.FieldDescriptor
	fd_IdentityExecutionEntry_decryption_key protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_pep_encrypted_tx_proto_init()
	md_IdentityExecutionEntry = File_fairyring_pep_encrypted_tx_proto.Messages().ByName("IdentityExecutionEntry")
	fd_IdentityExecutionEntry_creator = md_IdentityExecutionEntry.Fields().ByName("creator")
	fd_IdentityExecutionEntry_request_id = md_IdentityExecutionEntry.Fields().ByName("request_id")
	fd_IdentityExecutionEntry_identity = md_IdentityExecutionEntry.Fields().ByName("identity")
	fd_IdentityExecutionEntry_pubkey = md_IdentityExecutionEntry.Fields().ByName("pubkey")
	fd_IdentityExecutionEntry_tx_list = md_IdentityExecutionEntry.Fields().ByName("tx_list")
	fd_IdentityExecutionEntry_decryption_key = md_IdentityExecutionEntry.Fields().ByName("decryption_key")
}

var _ protoreflect.Message = (*fastReflection_IdentityExecutionEntry)(nil)

type fastReflection_IdentityExecutionEntry IdentityExecutionEntry

func (x *IdentityExecutionEntry) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IdentityExecutionEntry)(x)
}

func (x *IdentityExecutionEntry) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IdentityExecutionEntry_messageType fastReflection_IdentityExecutionEntry_messageType
var _ protoreflect.MessageType = fastReflection_IdentityExecutionEntry_messageType{}

type fastReflection_IdentityExecutionEntry_messageType struct{}

func (x fastReflection_IdentityExecutionEntry_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IdentityExecutionEntry)(nil)
}
func (x fastReflection_IdentityExecutionEntry_messageType) New() protoreflect.Message {
	return new(fastReflection_IdentityExecutionEntry)
}
func (x fastReflection_IdentityExecutionEntry_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IdentityExecutionEntry
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IdentityExecutionEntry) Descriptor() protoreflect.MessageDescriptor {
	return md_IdentityExecutionEntry
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IdentityExecutionEntry) Type() protoreflect.MessageType {
	return _fastReflection_IdentityExecutionEntry_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IdentityExecutionEntry) New() protoreflect.Message {
	return new(fastReflection_IdentityExecutionEntry)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IdentityExecutionEntry) Interface() protoreflect.ProtoMessage {
	return (*IdentityExecutionEntry)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IdentityExecutionEntry) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_IdentityExecutionEntry_creator, value) {
			return
		}
	}
	if x.RequestId != "" {
		value := protoreflect.ValueOfString(x.RequestId)
		if !f(fd_IdentityExecutionEntry_request_id, value) {
			return
		}
	}
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_IdentityExecutionEntry_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_IdentityExecutionEntry_pubkey, value) {
			return
		}
	}
	if x.TxList != nil {
		value := protoreflect.ValueOfMessage(x.TxList.ProtoReflect())
		if !f(fd_IdentityExecutionEntry_tx_list, value) {
			return
		}
	}
	if x.DecryptionKey != "" {
		value := protoreflect.ValueOfString(x.DecryptionKey)
		if !f(fd_IdentityExecutionEntry_decryption_key, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IdentityExecutionEntry) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.pep.IdentityExecutionEntry.creator":
		return x.Creator != ""
	case "fairyring.pep.IdentityExecutionEntry.request_id":
		return x.RequestId != ""
	case "fairyring.pep.IdentityExecutionEntry.identity":
		return x.Identity != ""
	case "fairyring.pep.IdentityExecutionEntry.pubkey":
		return x.Pubkey != ""
	case "fairyring.pep.IdentityExecutionEntry.tx_list":
		return x.TxList != nil
	case "fairyring.pep.IdentityExecutionEntry.decryption_key":
		return x.DecryptionKey != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.IdentityExecutionEntry"))
		}
		panic(fmt.Errorf("message fairyring.pep.IdentityExecutionEntry does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IdentityExecutionEntry) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.pep.IdentityExecutionEntry.creator":
		x.Creator = ""
	case "fairyring.pep.IdentityExecutionEntry.request_id":
		x.RequestId = ""
	case "fairyring.pep.IdentityExecutionEntry.identity":
		x.Identity = ""
	case "fairyring.pep.IdentityExecutionEntry.pubkey":
		x.Pubkey = ""
	case "fairyring.pep.IdentityExecutionEntry.tx_list":
		x.TxList = nil
	case "fairyring.pep.IdentityExecutionEntry.decryption_key":
		x.DecryptionKey = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.IdentityExecutionEntry"))
		}
		panic(fmt.Errorf("message fairyring.pep.IdentityExecutionEntry does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IdentityExecutionEntry) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.pep.IdentityExecutionEntry.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.IdentityExecutionEntry.request_id":
		value := x.RequestId
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.IdentityExecutionEntry.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.IdentityExecutionEntry.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "fairyring.pep.IdentityExecutionEntry.tx_list":
		value := x.TxList
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.pep.IdentityExecutionEntry.decryption_key":
		value := x.DecryptionKey
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.IdentityExecutionEntry"))
		}
		panic(fmt.Errorf("message fairyring.pep.IdentityExecutionEntry does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IdentityExecutionEntry) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.pep.IdentityExecutionEntry.creator":
		x.Creator = value.Interface().(string)
	case "fairyring.pep.IdentityExecutionEntry.request_id":
		x.RequestId = value.Interface().(string)
	case "fairyring.pep.IdentityExecutionEntry.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.pep.IdentityExecutionEntry.pubkey":
		x.Pubkey = value.Interface().(string)
	case "fairyring.pep.IdentityExecutionEntry.tx_list":
		x.TxList = value.Message().Interface().(*GeneralEncryptedTxArray)
	case "fairyring.pep.IdentityExecutionEntry.decryption_key":
		x.DecryptionKey = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.IdentityExecutionEntry"))
		}
		panic(fmt.Errorf("message fairyring.pep.IdentityExecutionEntry does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IdentityExecutionEntry) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.IdentityExecutionEntry.tx_list":
		if x.TxList == nil {
			x.TxList = new(GeneralEncryptedTxArray)
		}
		return protoreflect.ValueOfMessage(x.TxList.ProtoReflect())
	case "fairyring.pep.IdentityExecutionEntry.creator":
		panic(fmt.Errorf("field creator of message fairyring.pep.IdentityExecutionEntry is not mutable"))
	case "fairyring.pep.IdentityExecutionEntry.request_id":
		panic(fmt.Errorf("field request_id of message fairyring.pep.IdentityExecutionEntry is not mutable"))
	case "fairyring.pep.IdentityExecutionEntry.identity":
		panic(fmt.Errorf("field identity of message fairyring.pep.IdentityExecutionEntry is not mutable"))
	case "fairyring.pep.IdentityExecutionEntry.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.pep.IdentityExecutionEntry is not mutable"))
	case "fairyring.pep.IdentityExecutionEntry.decryption_key":
		panic(fmt.Errorf("field decryption_key of message fairyring.pep.IdentityExecutionEntry is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.IdentityExecutionEntry"))
		}
		panic(fmt.Errorf("message fairyring.pep.IdentityExecutionEntry does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IdentityExecutionEntry) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.pep.IdentityExecutionEntry.creator":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.IdentityExecutionEntry.request_id":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.IdentityExecutionEntry.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.IdentityExecutionEntry.pubkey":
		return protoreflect.ValueOfString("")
	case "fairyring.pep.IdentityExecutionEntry.tx_list":
		m := new(GeneralEncryptedTxArray)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.pep.IdentityExecutionEntry.decryption_key":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.pep.IdentityExecutionEntry"))
		}
		panic(fmt.Errorf("message fairyring.pep.IdentityExecutionEntry does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IdentityExecutionEntry) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.pep.IdentityExecutionEntry", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IdentityExecutionEntry) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IdentityExecutionEntry) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IdentityExecutionEntry) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IdentityExecutionEntry) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IdentityExecutionEntry)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RequestId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TxList != nil {
			l = options.Size(x.TxList)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DecryptionKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IdentityExecutionEntry)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DecryptionKey) > 0 {
			i -= len(x.DecryptionKey)
			copy(dAtA[i:], x.DecryptionKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DecryptionKey)))
			i--
			dAtA[i] = 0x32
		}
		if x.TxList != nil {
			encoded, err := options.Marshal(x.TxList)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RequestId) > 0 {
			i -= len(x.RequestId)
			copy(dAtA[i:], x.RequestId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IdentityExecutionEntry)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IdentityExecutionEntry: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IdentityExecutionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TxList == nil {
					x.TxList = &GeneralEncryptedTxArray{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TxList); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DecryptionKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fairyring/pep/encrypted_tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EncryptedTx defines the structure to store an encrypted transaction
// by execution height
type EncryptedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetHeight           uint64        `protobuf:"varint,1,opt,name=target_height,json=targetHeight,proto3" json:"target_height,omitempty"`
	Index                  uint64        `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Data                   string        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Creator                string        `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ChargedGas             *v1beta1.Coin `protobuf:"bytes,5,opt,name=charged_gas,json=chargedGas,proto3" json:"charged_gas,omitempty"`
	ProcessedAtChainHeight uint64        `protobuf:"varint,6,opt,name=processed_at_chain_height,json=processedAtChainHeight,proto3" json:"processed_at_chain_height,omitempty"`
	Expired                bool          `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
}

func (x *EncryptedTx) Reset() {
	*x = EncryptedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedTx) ProtoMessage() {}

// Deprecated: Use EncryptedTx.ProtoReflect.Descriptor instead.
func (*EncryptedTx) Descriptor() ([]byte, []int) {
	return file_fairyring_pep_encrypted_tx_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptedTx) GetTargetHeight() uint64 {
	if x != nil {
		return x.TargetHeight
	}
	return 0
}

func (x *EncryptedTx) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EncryptedTx) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EncryptedTx) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *EncryptedTx) GetChargedGas() *v1beta1.Coin {
	if x != nil {
		return x.ChargedGas
	}
	return nil
}

func (x *EncryptedTx) GetProcessedAtChainHeight() uint64 {
	if x != nil {
		return x.ProcessedAtChainHeight
	}
	return 0
}

func (x *EncryptedTx) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

// EncryptedTxArray defines a list of EncryptedTx
type EncryptedTxArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedTxs []*EncryptedTx `protobuf:"bytes,1,rep,name=encrypted_txs,json=encryptedTxs,proto3" json:"encrypted_txs,omitempty"`
}

func (x *EncryptedTxArray) Reset() {
	*x = EncryptedTxArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedTxArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedTxArray) ProtoMessage() {}

// Deprecated: Use EncryptedTxArray.ProtoReflect.Descriptor instead.
func (*EncryptedTxArray) Descriptor() ([]byte, []int) {
	return file_fairyring_pep_encrypted_tx_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedTxArray) GetEncryptedTxs() []*EncryptedTx {
	if x != nil {
		return x.EncryptedTxs
	}
	return nil
}

// GeneralEncryptedTx defines the structure to store a
// general encrypted transaction by identity
type GeneralEncryptedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity   string        `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Index      uint64        `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Data       string        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Creator    string        `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ChargedGas *v1beta1.Coin `protobuf:"bytes,5,opt,name=charged_gas,json=chargedGas,proto3" json:"charged_gas,omitempty"`
}

func (x *GeneralEncryptedTx) Reset() {
	*x = GeneralEncryptedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralEncryptedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralEncryptedTx) ProtoMessage() {}

// Deprecated: Use GeneralEncryptedTx.ProtoReflect.Descriptor instead.
func (*GeneralEncryptedTx) Descriptor() ([]byte, []int) {
	return file_fairyring_pep_encrypted_tx_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralEncryptedTx) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *GeneralEncryptedTx) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GeneralEncryptedTx) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GeneralEncryptedTx) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *GeneralEncryptedTx) GetChargedGas() *v1beta1.Coin {
	if x != nil {
		return x.ChargedGas
	}
	return nil
}

// GeneralEncryptedTxArray defines a list of GeneralEncryptedTx
type GeneralEncryptedTxArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedTxs []*GeneralEncryptedTx `protobuf:"bytes,1,rep,name=encrypted_txs,json=encryptedTxs,proto3" json:"encrypted_txs,omitempty"`
}

func (x *GeneralEncryptedTxArray) Reset() {
	*x = GeneralEncryptedTxArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralEncryptedTxArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralEncryptedTxArray) ProtoMessage() {}

// Deprecated: Use GeneralEncryptedTxArray.ProtoReflect.Descriptor instead.
func (*GeneralEncryptedTxArray) Descriptor() ([]byte, []int) {
	return file_fairyring_pep_encrypted_tx_proto_rawDescGZIP(), []int{3}
}

func (x *GeneralEncryptedTxArray) GetEncryptedTxs() []*GeneralEncryptedTx {
	if x != nil {
		return x.EncryptedTxs
	}
	return nil
}

// IdentityExecutionEntry defines the structure to queue up
// identities that have decryption keys available and
// are ready to execute any associated contracts or encrypted transactions
type IdentityExecutionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator       string                   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId     string                   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Identity      string                   `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey        string                   `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	TxList        *GeneralEncryptedTxArray `protobuf:"bytes,5,opt,name=tx_list,json=txList,proto3" json:"tx_list,omitempty"`
	DecryptionKey string                   `protobuf:"bytes,6,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
}

func (x *IdentityExecutionEntry) Reset() {
	*x = IdentityExecutionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_pep_encrypted_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityExecutionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityExecutionEntry) ProtoMessage() {}

// Deprecated: Use IdentityExecutionEntry.ProtoReflect.Descriptor instead.
func (*IdentityExecutionEntry) Descriptor() ([]byte, []int) {
	return file_fairyring_pep_encrypted_tx_proto_rawDescGZIP(), []int{4}
}

func (x *IdentityExecutionEntry) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *IdentityExecutionEntry) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *IdentityExecutionEntry) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *IdentityExecutionEntry) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *IdentityExecutionEntry) GetTxList() *GeneralEncryptedTxArray {
	if x != nil {
		return x.TxList
	}
	return nil
}

func (x *IdentityExecutionEntry) GetDecryptionKey() string {
	if x != nil {
		return x.DecryptionKey
	}
	return ""
}

var File_fairyring_pep_encrypted_tx_proto protoreflect.FileDescriptor

var file_fairyring_pep_encrypted_tx_proto_rawDesc = []byte{
	0x0a, 0x20, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x65, 0x70, 0x2f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x65,
	0x70, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x47, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x19,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x59, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x65, 0x70, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x67,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x47, 0x61, 0x73, 0x22,
	0x67, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x54, 0x78, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x65,
	0x70, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x78, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x3f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x65,
	0x70, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x78, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x74, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x9a, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x65, 0x70, 0x42, 0x10,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x65, 0x70, 0xa2, 0x02, 0x03, 0x46, 0x50, 0x58, 0xaa, 0x02, 0x0d, 0x46, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x70, 0xca, 0x02, 0x0d, 0x46, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x5c, 0x50, 0x65, 0x70, 0xe2, 0x02, 0x19, 0x46, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x5c, 0x50, 0x65, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x3a, 0x50, 0x65, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fairyring_pep_encrypted_tx_proto_rawDescOnce sync.Once
	file_fairyring_pep_encrypted_tx_proto_rawDescData = file_fairyring_pep_encrypted_tx_proto_rawDesc
)

func file_fairyring_pep_encrypted_tx_proto_rawDescGZIP() []byte {
	file_fairyring_pep_encrypted_tx_proto_rawDescOnce.Do(func() {
		file_fairyring_pep_encrypted_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_fairyring_pep_encrypted_tx_proto_rawDescData)
	})
	return file_fairyring_pep_encrypted_tx_proto_rawDescData
}

var file_fairyring_pep_encrypted_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fairyring_pep_encrypted_tx_proto_goTypes = []interface{}{
	(*EncryptedTx)(nil),             // 0: fairyring.pep.EncryptedTx
	(*EncryptedTxArray)(nil),        // 1: fairyring.pep.EncryptedTxArray
	(*GeneralEncryptedTx)(nil),      // 2: fairyring.pep.GeneralEncryptedTx
	(*GeneralEncryptedTxArray)(nil), // 3: fairyring.pep.GeneralEncryptedTxArray
	(*IdentityExecutionEntry)(nil),  // 4: fairyring.pep.IdentityExecutionEntry
	(*v1beta1.Coin)(nil),            // 5: cosmos.base.v1beta1.Coin
}
var file_fairyring_pep_encrypted_tx_proto_depIdxs = []int32{
	5, // 0: fairyring.pep.EncryptedTx.charged_gas:type_name -> cosmos.base.v1beta1.Coin
	0, // 1: fairyring.pep.EncryptedTxArray.encrypted_txs:type_name -> fairyring.pep.EncryptedTx
	5, // 2: fairyring.pep.GeneralEncryptedTx.charged_gas:type_name -> cosmos.base.v1beta1.Coin
	2, // 3: fairyring.pep.GeneralEncryptedTxArray.encrypted_txs:type_name -> fairyring.pep.GeneralEncryptedTx
	3, // 4: fairyring.pep.IdentityExecutionEntry.tx_list:type_name -> fairyring.pep.GeneralEncryptedTxArray
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_fairyring_pep_encrypted_tx_proto_init() }
func file_fairyring_pep_encrypted_tx_proto_init() {
	if File_fairyring_pep_encrypted_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fairyring_pep_encrypted_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_pep_encrypted_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedTxArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_pep_encrypted_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralEncryptedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_pep_encrypted_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralEncryptedTxArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_pep_encrypted_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityExecutionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fairyring_pep_encrypted_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fairyring_pep_encrypted_tx_proto_goTypes,
		DependencyIndexes: file_fairyring_pep_encrypted_tx_proto_depIdxs,
		MessageInfos:      file_fairyring_pep_encrypted_tx_proto_msgTypes,
	}.Build()
	File_fairyring_pep_encrypted_tx_proto = out.File
	file_fairyring_pep_encrypted_tx_proto_rawDesc = nil
	file_fairyring_pep_encrypted_tx_proto_goTypes = nil
	file_fairyring_pep_encrypted_tx_proto_depIdxs = nil
}
