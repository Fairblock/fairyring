// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fairyring/auction/query.proto

package auction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/fairyring.auction.Query/Params"
	Query_Auction_FullMethodName           = "/fairyring.auction.Query/Auction"
	Query_AuctionAll_FullMethodName        = "/fairyring.auction.Query/AuctionAll"
	Query_TimedAuction_FullMethodName      = "/fairyring.auction.Query/TimedAuction"
	Query_TimedAuctionAll_FullMethodName   = "/fairyring.auction.Query/TimedAuctionAll"
	Query_AuthorizedBidders_FullMethodName = "/fairyring.auction.Query/AuthorizedBidders"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Auction(ctx context.Context, in *QueryAuctionRequest, opts ...grpc.CallOption) (*QueryAuctionResponse, error)
	AuctionAll(ctx context.Context, in *QueryAuctionAllRequest, opts ...grpc.CallOption) (*QueryAuctionAllResponse, error)
	TimedAuction(ctx context.Context, in *QueryTimedAuctionRequest, opts ...grpc.CallOption) (*QueryTimedAuctionResponse, error)
	TimedAuctionAll(ctx context.Context, in *QueryTimedAuctionAllRequest, opts ...grpc.CallOption) (*QueryTimedAuctionAllResponse, error)
	AuthorizedBidders(ctx context.Context, in *QueryAuthorizedBiddersRequest, opts ...grpc.CallOption) (*QueryAuthorizedBiddersResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auction(ctx context.Context, in *QueryAuctionRequest, opts ...grpc.CallOption) (*QueryAuctionResponse, error) {
	out := new(QueryAuctionResponse)
	err := c.cc.Invoke(ctx, Query_Auction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionAll(ctx context.Context, in *QueryAuctionAllRequest, opts ...grpc.CallOption) (*QueryAuctionAllResponse, error) {
	out := new(QueryAuctionAllResponse)
	err := c.cc.Invoke(ctx, Query_AuctionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedAuction(ctx context.Context, in *QueryTimedAuctionRequest, opts ...grpc.CallOption) (*QueryTimedAuctionResponse, error) {
	out := new(QueryTimedAuctionResponse)
	err := c.cc.Invoke(ctx, Query_TimedAuction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedAuctionAll(ctx context.Context, in *QueryTimedAuctionAllRequest, opts ...grpc.CallOption) (*QueryTimedAuctionAllResponse, error) {
	out := new(QueryTimedAuctionAllResponse)
	err := c.cc.Invoke(ctx, Query_TimedAuctionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthorizedBidders(ctx context.Context, in *QueryAuthorizedBiddersRequest, opts ...grpc.CallOption) (*QueryAuthorizedBiddersResponse, error) {
	out := new(QueryAuthorizedBiddersResponse)
	err := c.cc.Invoke(ctx, Query_AuthorizedBidders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Auction(context.Context, *QueryAuctionRequest) (*QueryAuctionResponse, error)
	AuctionAll(context.Context, *QueryAuctionAllRequest) (*QueryAuctionAllResponse, error)
	TimedAuction(context.Context, *QueryTimedAuctionRequest) (*QueryTimedAuctionResponse, error)
	TimedAuctionAll(context.Context, *QueryTimedAuctionAllRequest) (*QueryTimedAuctionAllResponse, error)
	AuthorizedBidders(context.Context, *QueryAuthorizedBiddersRequest) (*QueryAuthorizedBiddersResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Auction(context.Context, *QueryAuctionRequest) (*QueryAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auction not implemented")
}
func (UnimplementedQueryServer) AuctionAll(context.Context, *QueryAuctionAllRequest) (*QueryAuctionAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionAll not implemented")
}
func (UnimplementedQueryServer) TimedAuction(context.Context, *QueryTimedAuctionRequest) (*QueryTimedAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedAuction not implemented")
}
func (UnimplementedQueryServer) TimedAuctionAll(context.Context, *QueryTimedAuctionAllRequest) (*QueryTimedAuctionAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedAuctionAll not implemented")
}
func (UnimplementedQueryServer) AuthorizedBidders(context.Context, *QueryAuthorizedBiddersRequest) (*QueryAuthorizedBiddersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizedBidders not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Auction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auction(ctx, req.(*QueryAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AuctionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionAll(ctx, req.(*QueryAuctionAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimedAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TimedAuction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedAuction(ctx, req.(*QueryTimedAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedAuctionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimedAuctionAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedAuctionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TimedAuctionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedAuctionAll(ctx, req.(*QueryTimedAuctionAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthorizedBidders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthorizedBiddersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthorizedBidders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AuthorizedBidders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthorizedBidders(ctx, req.(*QueryAuthorizedBiddersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.auction.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Auction",
			Handler:    _Query_Auction_Handler,
		},
		{
			MethodName: "AuctionAll",
			Handler:    _Query_AuctionAll_Handler,
		},
		{
			MethodName: "TimedAuction",
			Handler:    _Query_TimedAuction_Handler,
		},
		{
			MethodName: "TimedAuctionAll",
			Handler:    _Query_TimedAuctionAll_Handler,
		},
		{
			MethodName: "AuthorizedBidders",
			Handler:    _Query_AuthorizedBidders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/auction/query.proto",
}
