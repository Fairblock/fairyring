// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fairyring/keyshare/tx.proto

package keyshare

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName            = "/fairyring.keyshare.Msg/UpdateParams"
	Msg_RegisterValidator_FullMethodName       = "/fairyring.keyshare.Msg/RegisterValidator"
	Msg_DeRegisterValidator_FullMethodName     = "/fairyring.keyshare.Msg/DeRegisterValidator"
	Msg_SendKeyshare_FullMethodName            = "/fairyring.keyshare.Msg/SendKeyshare"
	Msg_CreateLatestPubkey_FullMethodName      = "/fairyring.keyshare.Msg/CreateLatestPubkey"
	Msg_OverrideLatestPubkey_FullMethodName    = "/fairyring.keyshare.Msg/OverrideLatestPubkey"
	Msg_CreateAuthorizedAddress_FullMethodName = "/fairyring.keyshare.Msg/CreateAuthorizedAddress"
	Msg_UpdateAuthorizedAddress_FullMethodName = "/fairyring.keyshare.Msg/UpdateAuthorizedAddress"
	Msg_DeleteAuthorizedAddress_FullMethodName = "/fairyring.keyshare.Msg/DeleteAuthorizedAddress"
	Msg_SubmitGeneralKeyshare_FullMethodName   = "/fairyring.keyshare.Msg/SubmitGeneralKeyshare"
	Msg_SubmitEncryptedKeyshare_FullMethodName = "/fairyring.keyshare.Msg/SubmitEncryptedKeyshare"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// RegisterValidator defines a operation to register validator which
	// is then eligible to participate in sending keyshares
	RegisterValidator(ctx context.Context, in *MsgRegisterValidator, opts ...grpc.CallOption) (*MsgRegisterValidatorResponse, error)
	// DeRegisterValidator defines an operation to de-register
	// a registered validator
	DeRegisterValidator(ctx context.Context, in *MsgDeRegisterValidator, opts ...grpc.CallOption) (*MsgDeRegisterValidatorResponse, error)
	// SendKeyshare defines an operation to submit keyshares
	// every block from registered validators
	SendKeyshare(ctx context.Context, in *MsgSendKeyshare, opts ...grpc.CallOption) (*MsgSendKeyshareResponse, error)
	// CreateLatestPubkey defines an operation to add a
	// public key to the chain (can only be done by an authorized address)
	CreateLatestPubkey(ctx context.Context, in *MsgCreateLatestPubkey, opts ...grpc.CallOption) (*MsgCreateLatestPubkeyResponse, error)
	// OverrideLatestPubkey defines an operation to override the current active pubkey
	OverrideLatestPubkey(ctx context.Context, in *MsgOverrideLatestPubkey, opts ...grpc.CallOption) (*MsgOverrideLatestPubkeyResponse, error)
	// CreateAuthorizedAddress defines an operation to mark an address
	// as authorized to create and/or update pubkeys on the chain
	CreateAuthorizedAddress(ctx context.Context, in *MsgCreateAuthorizedAddress, opts ...grpc.CallOption) (*MsgCreateAuthorizedAddressResponse, error)
	// UpdateAuthorizedAddress defines an operation to update the
	// list of authorized addresses
	UpdateAuthorizedAddress(ctx context.Context, in *MsgUpdateAuthorizedAddress, opts ...grpc.CallOption) (*MsgUpdateAuthorizedAddressResponse, error)
	// DeleteAuthorizedAddress defines an operation to revoke the
	// authorization of a previously authorized address
	DeleteAuthorizedAddress(ctx context.Context, in *MsgDeleteAuthorizedAddress, opts ...grpc.CallOption) (*MsgDeleteAuthorizedAddressResponse, error)
	// SubmitGeneralKeyshare defines an operation to submit a
	// general keyshare from a registered validator
	SubmitGeneralKeyshare(ctx context.Context, in *MsgSubmitGeneralKeyshare, opts ...grpc.CallOption) (*MsgSubmitGeneralKeyshareResponse, error)
	// SubmitEncryptedKeyshare defines an operation to submit
	// an encrypted keyshare from a registered validator
	SubmitEncryptedKeyshare(ctx context.Context, in *MsgSubmitEncryptedKeyshare, opts ...grpc.CallOption) (*MsgSubmitEncryptedKeyshareResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterValidator(ctx context.Context, in *MsgRegisterValidator, opts ...grpc.CallOption) (*MsgRegisterValidatorResponse, error) {
	out := new(MsgRegisterValidatorResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeRegisterValidator(ctx context.Context, in *MsgDeRegisterValidator, opts ...grpc.CallOption) (*MsgDeRegisterValidatorResponse, error) {
	out := new(MsgDeRegisterValidatorResponse)
	err := c.cc.Invoke(ctx, Msg_DeRegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendKeyshare(ctx context.Context, in *MsgSendKeyshare, opts ...grpc.CallOption) (*MsgSendKeyshareResponse, error) {
	out := new(MsgSendKeyshareResponse)
	err := c.cc.Invoke(ctx, Msg_SendKeyshare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateLatestPubkey(ctx context.Context, in *MsgCreateLatestPubkey, opts ...grpc.CallOption) (*MsgCreateLatestPubkeyResponse, error) {
	out := new(MsgCreateLatestPubkeyResponse)
	err := c.cc.Invoke(ctx, Msg_CreateLatestPubkey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OverrideLatestPubkey(ctx context.Context, in *MsgOverrideLatestPubkey, opts ...grpc.CallOption) (*MsgOverrideLatestPubkeyResponse, error) {
	out := new(MsgOverrideLatestPubkeyResponse)
	err := c.cc.Invoke(ctx, Msg_OverrideLatestPubkey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAuthorizedAddress(ctx context.Context, in *MsgCreateAuthorizedAddress, opts ...grpc.CallOption) (*MsgCreateAuthorizedAddressResponse, error) {
	out := new(MsgCreateAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, Msg_CreateAuthorizedAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAuthorizedAddress(ctx context.Context, in *MsgUpdateAuthorizedAddress, opts ...grpc.CallOption) (*MsgUpdateAuthorizedAddressResponse, error) {
	out := new(MsgUpdateAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAuthorizedAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteAuthorizedAddress(ctx context.Context, in *MsgDeleteAuthorizedAddress, opts ...grpc.CallOption) (*MsgDeleteAuthorizedAddressResponse, error) {
	out := new(MsgDeleteAuthorizedAddressResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteAuthorizedAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitGeneralKeyshare(ctx context.Context, in *MsgSubmitGeneralKeyshare, opts ...grpc.CallOption) (*MsgSubmitGeneralKeyshareResponse, error) {
	out := new(MsgSubmitGeneralKeyshareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitGeneralKeyshare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitEncryptedKeyshare(ctx context.Context, in *MsgSubmitEncryptedKeyshare, opts ...grpc.CallOption) (*MsgSubmitEncryptedKeyshareResponse, error) {
	out := new(MsgSubmitEncryptedKeyshareResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitEncryptedKeyshare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// RegisterValidator defines a operation to register validator which
	// is then eligible to participate in sending keyshares
	RegisterValidator(context.Context, *MsgRegisterValidator) (*MsgRegisterValidatorResponse, error)
	// DeRegisterValidator defines an operation to de-register
	// a registered validator
	DeRegisterValidator(context.Context, *MsgDeRegisterValidator) (*MsgDeRegisterValidatorResponse, error)
	// SendKeyshare defines an operation to submit keyshares
	// every block from registered validators
	SendKeyshare(context.Context, *MsgSendKeyshare) (*MsgSendKeyshareResponse, error)
	// CreateLatestPubkey defines an operation to add a
	// public key to the chain (can only be done by an authorized address)
	CreateLatestPubkey(context.Context, *MsgCreateLatestPubkey) (*MsgCreateLatestPubkeyResponse, error)
	// OverrideLatestPubkey defines an operation to override the current active pubkey
	OverrideLatestPubkey(context.Context, *MsgOverrideLatestPubkey) (*MsgOverrideLatestPubkeyResponse, error)
	// CreateAuthorizedAddress defines an operation to mark an address
	// as authorized to create and/or update pubkeys on the chain
	CreateAuthorizedAddress(context.Context, *MsgCreateAuthorizedAddress) (*MsgCreateAuthorizedAddressResponse, error)
	// UpdateAuthorizedAddress defines an operation to update the
	// list of authorized addresses
	UpdateAuthorizedAddress(context.Context, *MsgUpdateAuthorizedAddress) (*MsgUpdateAuthorizedAddressResponse, error)
	// DeleteAuthorizedAddress defines an operation to revoke the
	// authorization of a previously authorized address
	DeleteAuthorizedAddress(context.Context, *MsgDeleteAuthorizedAddress) (*MsgDeleteAuthorizedAddressResponse, error)
	// SubmitGeneralKeyshare defines an operation to submit a
	// general keyshare from a registered validator
	SubmitGeneralKeyshare(context.Context, *MsgSubmitGeneralKeyshare) (*MsgSubmitGeneralKeyshareResponse, error)
	// SubmitEncryptedKeyshare defines an operation to submit
	// an encrypted keyshare from a registered validator
	SubmitEncryptedKeyshare(context.Context, *MsgSubmitEncryptedKeyshare) (*MsgSubmitEncryptedKeyshareResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RegisterValidator(context.Context, *MsgRegisterValidator) (*MsgRegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (UnimplementedMsgServer) DeRegisterValidator(context.Context, *MsgDeRegisterValidator) (*MsgDeRegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterValidator not implemented")
}
func (UnimplementedMsgServer) SendKeyshare(context.Context, *MsgSendKeyshare) (*MsgSendKeyshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyshare not implemented")
}
func (UnimplementedMsgServer) CreateLatestPubkey(context.Context, *MsgCreateLatestPubkey) (*MsgCreateLatestPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLatestPubkey not implemented")
}
func (UnimplementedMsgServer) OverrideLatestPubkey(context.Context, *MsgOverrideLatestPubkey) (*MsgOverrideLatestPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideLatestPubkey not implemented")
}
func (UnimplementedMsgServer) CreateAuthorizedAddress(context.Context, *MsgCreateAuthorizedAddress) (*MsgCreateAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorizedAddress not implemented")
}
func (UnimplementedMsgServer) UpdateAuthorizedAddress(context.Context, *MsgUpdateAuthorizedAddress) (*MsgUpdateAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorizedAddress not implemented")
}
func (UnimplementedMsgServer) DeleteAuthorizedAddress(context.Context, *MsgDeleteAuthorizedAddress) (*MsgDeleteAuthorizedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorizedAddress not implemented")
}
func (UnimplementedMsgServer) SubmitGeneralKeyshare(context.Context, *MsgSubmitGeneralKeyshare) (*MsgSubmitGeneralKeyshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGeneralKeyshare not implemented")
}
func (UnimplementedMsgServer) SubmitEncryptedKeyshare(context.Context, *MsgSubmitEncryptedKeyshare) (*MsgSubmitEncryptedKeyshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEncryptedKeyshare not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterValidator(ctx, req.(*MsgRegisterValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeRegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeRegisterValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeRegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeRegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeRegisterValidator(ctx, req.(*MsgDeRegisterValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendKeyshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendKeyshare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendKeyshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SendKeyshare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendKeyshare(ctx, req.(*MsgSendKeyshare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateLatestPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLatestPubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLatestPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateLatestPubkey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLatestPubkey(ctx, req.(*MsgCreateLatestPubkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OverrideLatestPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOverrideLatestPubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OverrideLatestPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_OverrideLatestPubkey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OverrideLatestPubkey(ctx, req.(*MsgOverrideLatestPubkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAuthorizedAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateAuthorizedAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAuthorizedAddress(ctx, req.(*MsgCreateAuthorizedAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAuthorizedAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAuthorizedAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAuthorizedAddress(ctx, req.(*MsgUpdateAuthorizedAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteAuthorizedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteAuthorizedAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteAuthorizedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteAuthorizedAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteAuthorizedAddress(ctx, req.(*MsgDeleteAuthorizedAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitGeneralKeyshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitGeneralKeyshare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitGeneralKeyshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitGeneralKeyshare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitGeneralKeyshare(ctx, req.(*MsgSubmitGeneralKeyshare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitEncryptedKeyshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitEncryptedKeyshare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitEncryptedKeyshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitEncryptedKeyshare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitEncryptedKeyshare(ctx, req.(*MsgSubmitEncryptedKeyshare))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.keyshare.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterValidator",
			Handler:    _Msg_RegisterValidator_Handler,
		},
		{
			MethodName: "DeRegisterValidator",
			Handler:    _Msg_DeRegisterValidator_Handler,
		},
		{
			MethodName: "SendKeyshare",
			Handler:    _Msg_SendKeyshare_Handler,
		},
		{
			MethodName: "CreateLatestPubkey",
			Handler:    _Msg_CreateLatestPubkey_Handler,
		},
		{
			MethodName: "OverrideLatestPubkey",
			Handler:    _Msg_OverrideLatestPubkey_Handler,
		},
		{
			MethodName: "CreateAuthorizedAddress",
			Handler:    _Msg_CreateAuthorizedAddress_Handler,
		},
		{
			MethodName: "UpdateAuthorizedAddress",
			Handler:    _Msg_UpdateAuthorizedAddress_Handler,
		},
		{
			MethodName: "DeleteAuthorizedAddress",
			Handler:    _Msg_DeleteAuthorizedAddress_Handler,
		},
		{
			MethodName: "SubmitGeneralKeyshare",
			Handler:    _Msg_SubmitGeneralKeyshare_Handler,
		},
		{
			MethodName: "SubmitEncryptedKeyshare",
			Handler:    _Msg_SubmitEncryptedKeyshare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/keyshare/tx.proto",
}
