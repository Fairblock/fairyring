// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package keyshare

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Keyshare                       protoreflect.MessageDescriptor
	fd_Keyshare_validator             protoreflect.FieldDescriptor
	fd_Keyshare_block_height          protoreflect.FieldDescriptor
	fd_Keyshare_keyshare              protoreflect.FieldDescriptor
	fd_Keyshare_keyshare_index        protoreflect.FieldDescriptor
	fd_Keyshare_received_timestamp    protoreflect.FieldDescriptor
	fd_Keyshare_received_block_height protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_keyshare_proto_init()
	md_Keyshare = File_fairyring_keyshare_keyshare_proto.Messages().ByName("Keyshare")
	fd_Keyshare_validator = md_Keyshare.Fields().ByName("validator")
	fd_Keyshare_block_height = md_Keyshare.Fields().ByName("block_height")
	fd_Keyshare_keyshare = md_Keyshare.Fields().ByName("keyshare")
	fd_Keyshare_keyshare_index = md_Keyshare.Fields().ByName("keyshare_index")
	fd_Keyshare_received_timestamp = md_Keyshare.Fields().ByName("received_timestamp")
	fd_Keyshare_received_block_height = md_Keyshare.Fields().ByName("received_block_height")
}

var _ protoreflect.Message = (*fastReflection_Keyshare)(nil)

type fastReflection_Keyshare Keyshare

func (x *Keyshare) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Keyshare)(x)
}

func (x *Keyshare) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_keyshare_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Keyshare_messageType fastReflection_Keyshare_messageType
var _ protoreflect.MessageType = fastReflection_Keyshare_messageType{}

type fastReflection_Keyshare_messageType struct{}

func (x fastReflection_Keyshare_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Keyshare)(nil)
}
func (x fastReflection_Keyshare_messageType) New() protoreflect.Message {
	return new(fastReflection_Keyshare)
}
func (x fastReflection_Keyshare_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Keyshare
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Keyshare) Descriptor() protoreflect.MessageDescriptor {
	return md_Keyshare
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Keyshare) Type() protoreflect.MessageType {
	return _fastReflection_Keyshare_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Keyshare) New() protoreflect.Message {
	return new(fastReflection_Keyshare)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Keyshare) Interface() protoreflect.ProtoMessage {
	return (*Keyshare)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Keyshare) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Validator != "" {
		value := protoreflect.ValueOfString(x.Validator)
		if !f(fd_Keyshare_validator, value) {
			return
		}
	}
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_Keyshare_block_height, value) {
			return
		}
	}
	if x.Keyshare != "" {
		value := protoreflect.ValueOfString(x.Keyshare)
		if !f(fd_Keyshare_keyshare, value) {
			return
		}
	}
	if x.KeyshareIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyshareIndex)
		if !f(fd_Keyshare_keyshare_index, value) {
			return
		}
	}
	if x.ReceivedTimestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReceivedTimestamp)
		if !f(fd_Keyshare_received_timestamp, value) {
			return
		}
	}
	if x.ReceivedBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReceivedBlockHeight)
		if !f(fd_Keyshare_received_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Keyshare) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.Keyshare.validator":
		return x.Validator != ""
	case "fairyring.keyshare.Keyshare.block_height":
		return x.BlockHeight != uint64(0)
	case "fairyring.keyshare.Keyshare.keyshare":
		return x.Keyshare != ""
	case "fairyring.keyshare.Keyshare.keyshare_index":
		return x.KeyshareIndex != uint64(0)
	case "fairyring.keyshare.Keyshare.received_timestamp":
		return x.ReceivedTimestamp != uint64(0)
	case "fairyring.keyshare.Keyshare.received_block_height":
		return x.ReceivedBlockHeight != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.Keyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.Keyshare does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Keyshare) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.Keyshare.validator":
		x.Validator = ""
	case "fairyring.keyshare.Keyshare.block_height":
		x.BlockHeight = uint64(0)
	case "fairyring.keyshare.Keyshare.keyshare":
		x.Keyshare = ""
	case "fairyring.keyshare.Keyshare.keyshare_index":
		x.KeyshareIndex = uint64(0)
	case "fairyring.keyshare.Keyshare.received_timestamp":
		x.ReceivedTimestamp = uint64(0)
	case "fairyring.keyshare.Keyshare.received_block_height":
		x.ReceivedBlockHeight = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.Keyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.Keyshare does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Keyshare) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.Keyshare.validator":
		value := x.Validator
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.Keyshare.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.Keyshare.keyshare":
		value := x.Keyshare
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.Keyshare.keyshare_index":
		value := x.KeyshareIndex
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.Keyshare.received_timestamp":
		value := x.ReceivedTimestamp
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.Keyshare.received_block_height":
		value := x.ReceivedBlockHeight
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.Keyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.Keyshare does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Keyshare) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.Keyshare.validator":
		x.Validator = value.Interface().(string)
	case "fairyring.keyshare.Keyshare.block_height":
		x.BlockHeight = value.Uint()
	case "fairyring.keyshare.Keyshare.keyshare":
		x.Keyshare = value.Interface().(string)
	case "fairyring.keyshare.Keyshare.keyshare_index":
		x.KeyshareIndex = value.Uint()
	case "fairyring.keyshare.Keyshare.received_timestamp":
		x.ReceivedTimestamp = value.Uint()
	case "fairyring.keyshare.Keyshare.received_block_height":
		x.ReceivedBlockHeight = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.Keyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.Keyshare does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Keyshare) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.Keyshare.validator":
		panic(fmt.Errorf("field validator of message fairyring.keyshare.Keyshare is not mutable"))
	case "fairyring.keyshare.Keyshare.block_height":
		panic(fmt.Errorf("field block_height of message fairyring.keyshare.Keyshare is not mutable"))
	case "fairyring.keyshare.Keyshare.keyshare":
		panic(fmt.Errorf("field keyshare of message fairyring.keyshare.Keyshare is not mutable"))
	case "fairyring.keyshare.Keyshare.keyshare_index":
		panic(fmt.Errorf("field keyshare_index of message fairyring.keyshare.Keyshare is not mutable"))
	case "fairyring.keyshare.Keyshare.received_timestamp":
		panic(fmt.Errorf("field received_timestamp of message fairyring.keyshare.Keyshare is not mutable"))
	case "fairyring.keyshare.Keyshare.received_block_height":
		panic(fmt.Errorf("field received_block_height of message fairyring.keyshare.Keyshare is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.Keyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.Keyshare does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Keyshare) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.Keyshare.validator":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.Keyshare.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.Keyshare.keyshare":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.Keyshare.keyshare_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.Keyshare.received_timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.Keyshare.received_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.Keyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.Keyshare does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Keyshare) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.Keyshare", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Keyshare) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Keyshare) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Keyshare) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Keyshare) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Keyshare)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Validator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		l = len(x.Keyshare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyshareIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyshareIndex))
		}
		if x.ReceivedTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.ReceivedTimestamp))
		}
		if x.ReceivedBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ReceivedBlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Keyshare)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ReceivedBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReceivedBlockHeight))
			i--
			dAtA[i] = 0x30
		}
		if x.ReceivedTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReceivedTimestamp))
			i--
			dAtA[i] = 0x28
		}
		if x.KeyshareIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyshareIndex))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Keyshare) > 0 {
			i -= len(x.Keyshare)
			copy(dAtA[i:], x.Keyshare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Keyshare)))
			i--
			dAtA[i] = 0x1a
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Validator) > 0 {
			i -= len(x.Validator)
			copy(dAtA[i:], x.Validator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Validator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Keyshare)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Keyshare: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Keyshare: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Keyshare", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Keyshare = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyshareIndex", wireType)
				}
				x.KeyshareIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyshareIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedTimestamp", wireType)
				}
				x.ReceivedTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReceivedTimestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedBlockHeight", wireType)
				}
				x.ReceivedBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReceivedBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GeneralKeyshare                       protoreflect.MessageDescriptor
	fd_GeneralKeyshare_validator             protoreflect.FieldDescriptor
	fd_GeneralKeyshare_id_type               protoreflect.FieldDescriptor
	fd_GeneralKeyshare_id_value              protoreflect.FieldDescriptor
	fd_GeneralKeyshare_keyshare              protoreflect.FieldDescriptor
	fd_GeneralKeyshare_keyshare_index        protoreflect.FieldDescriptor
	fd_GeneralKeyshare_received_timestamp    protoreflect.FieldDescriptor
	fd_GeneralKeyshare_received_block_height protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_keyshare_proto_init()
	md_GeneralKeyshare = File_fairyring_keyshare_keyshare_proto.Messages().ByName("GeneralKeyshare")
	fd_GeneralKeyshare_validator = md_GeneralKeyshare.Fields().ByName("validator")
	fd_GeneralKeyshare_id_type = md_GeneralKeyshare.Fields().ByName("id_type")
	fd_GeneralKeyshare_id_value = md_GeneralKeyshare.Fields().ByName("id_value")
	fd_GeneralKeyshare_keyshare = md_GeneralKeyshare.Fields().ByName("keyshare")
	fd_GeneralKeyshare_keyshare_index = md_GeneralKeyshare.Fields().ByName("keyshare_index")
	fd_GeneralKeyshare_received_timestamp = md_GeneralKeyshare.Fields().ByName("received_timestamp")
	fd_GeneralKeyshare_received_block_height = md_GeneralKeyshare.Fields().ByName("received_block_height")
}

var _ protoreflect.Message = (*fastReflection_GeneralKeyshare)(nil)

type fastReflection_GeneralKeyshare GeneralKeyshare

func (x *GeneralKeyshare) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GeneralKeyshare)(x)
}

func (x *GeneralKeyshare) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_keyshare_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GeneralKeyshare_messageType fastReflection_GeneralKeyshare_messageType
var _ protoreflect.MessageType = fastReflection_GeneralKeyshare_messageType{}

type fastReflection_GeneralKeyshare_messageType struct{}

func (x fastReflection_GeneralKeyshare_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GeneralKeyshare)(nil)
}
func (x fastReflection_GeneralKeyshare_messageType) New() protoreflect.Message {
	return new(fastReflection_GeneralKeyshare)
}
func (x fastReflection_GeneralKeyshare_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GeneralKeyshare
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GeneralKeyshare) Descriptor() protoreflect.MessageDescriptor {
	return md_GeneralKeyshare
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GeneralKeyshare) Type() protoreflect.MessageType {
	return _fastReflection_GeneralKeyshare_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GeneralKeyshare) New() protoreflect.Message {
	return new(fastReflection_GeneralKeyshare)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GeneralKeyshare) Interface() protoreflect.ProtoMessage {
	return (*GeneralKeyshare)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GeneralKeyshare) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Validator != "" {
		value := protoreflect.ValueOfString(x.Validator)
		if !f(fd_GeneralKeyshare_validator, value) {
			return
		}
	}
	if x.IdType != "" {
		value := protoreflect.ValueOfString(x.IdType)
		if !f(fd_GeneralKeyshare_id_type, value) {
			return
		}
	}
	if x.IdValue != "" {
		value := protoreflect.ValueOfString(x.IdValue)
		if !f(fd_GeneralKeyshare_id_value, value) {
			return
		}
	}
	if x.Keyshare != "" {
		value := protoreflect.ValueOfString(x.Keyshare)
		if !f(fd_GeneralKeyshare_keyshare, value) {
			return
		}
	}
	if x.KeyshareIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyshareIndex)
		if !f(fd_GeneralKeyshare_keyshare_index, value) {
			return
		}
	}
	if x.ReceivedTimestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReceivedTimestamp)
		if !f(fd_GeneralKeyshare_received_timestamp, value) {
			return
		}
	}
	if x.ReceivedBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReceivedBlockHeight)
		if !f(fd_GeneralKeyshare_received_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GeneralKeyshare) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.GeneralKeyshare.validator":
		return x.Validator != ""
	case "fairyring.keyshare.GeneralKeyshare.id_type":
		return x.IdType != ""
	case "fairyring.keyshare.GeneralKeyshare.id_value":
		return x.IdValue != ""
	case "fairyring.keyshare.GeneralKeyshare.keyshare":
		return x.Keyshare != ""
	case "fairyring.keyshare.GeneralKeyshare.keyshare_index":
		return x.KeyshareIndex != uint64(0)
	case "fairyring.keyshare.GeneralKeyshare.received_timestamp":
		return x.ReceivedTimestamp != uint64(0)
	case "fairyring.keyshare.GeneralKeyshare.received_block_height":
		return x.ReceivedBlockHeight != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GeneralKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GeneralKeyshare does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralKeyshare) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.GeneralKeyshare.validator":
		x.Validator = ""
	case "fairyring.keyshare.GeneralKeyshare.id_type":
		x.IdType = ""
	case "fairyring.keyshare.GeneralKeyshare.id_value":
		x.IdValue = ""
	case "fairyring.keyshare.GeneralKeyshare.keyshare":
		x.Keyshare = ""
	case "fairyring.keyshare.GeneralKeyshare.keyshare_index":
		x.KeyshareIndex = uint64(0)
	case "fairyring.keyshare.GeneralKeyshare.received_timestamp":
		x.ReceivedTimestamp = uint64(0)
	case "fairyring.keyshare.GeneralKeyshare.received_block_height":
		x.ReceivedBlockHeight = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GeneralKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GeneralKeyshare does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GeneralKeyshare) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.GeneralKeyshare.validator":
		value := x.Validator
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.GeneralKeyshare.id_type":
		value := x.IdType
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.GeneralKeyshare.id_value":
		value := x.IdValue
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.GeneralKeyshare.keyshare":
		value := x.Keyshare
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.GeneralKeyshare.keyshare_index":
		value := x.KeyshareIndex
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.GeneralKeyshare.received_timestamp":
		value := x.ReceivedTimestamp
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.GeneralKeyshare.received_block_height":
		value := x.ReceivedBlockHeight
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GeneralKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GeneralKeyshare does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralKeyshare) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.GeneralKeyshare.validator":
		x.Validator = value.Interface().(string)
	case "fairyring.keyshare.GeneralKeyshare.id_type":
		x.IdType = value.Interface().(string)
	case "fairyring.keyshare.GeneralKeyshare.id_value":
		x.IdValue = value.Interface().(string)
	case "fairyring.keyshare.GeneralKeyshare.keyshare":
		x.Keyshare = value.Interface().(string)
	case "fairyring.keyshare.GeneralKeyshare.keyshare_index":
		x.KeyshareIndex = value.Uint()
	case "fairyring.keyshare.GeneralKeyshare.received_timestamp":
		x.ReceivedTimestamp = value.Uint()
	case "fairyring.keyshare.GeneralKeyshare.received_block_height":
		x.ReceivedBlockHeight = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GeneralKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GeneralKeyshare does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralKeyshare) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.GeneralKeyshare.validator":
		panic(fmt.Errorf("field validator of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	case "fairyring.keyshare.GeneralKeyshare.id_type":
		panic(fmt.Errorf("field id_type of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	case "fairyring.keyshare.GeneralKeyshare.id_value":
		panic(fmt.Errorf("field id_value of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	case "fairyring.keyshare.GeneralKeyshare.keyshare":
		panic(fmt.Errorf("field keyshare of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	case "fairyring.keyshare.GeneralKeyshare.keyshare_index":
		panic(fmt.Errorf("field keyshare_index of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	case "fairyring.keyshare.GeneralKeyshare.received_timestamp":
		panic(fmt.Errorf("field received_timestamp of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	case "fairyring.keyshare.GeneralKeyshare.received_block_height":
		panic(fmt.Errorf("field received_block_height of message fairyring.keyshare.GeneralKeyshare is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GeneralKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GeneralKeyshare does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GeneralKeyshare) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.GeneralKeyshare.validator":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.GeneralKeyshare.id_type":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.GeneralKeyshare.id_value":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.GeneralKeyshare.keyshare":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.GeneralKeyshare.keyshare_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.GeneralKeyshare.received_timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.GeneralKeyshare.received_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GeneralKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GeneralKeyshare does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GeneralKeyshare) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.GeneralKeyshare", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GeneralKeyshare) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GeneralKeyshare) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GeneralKeyshare) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GeneralKeyshare) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GeneralKeyshare)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Validator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IdType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IdValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Keyshare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyshareIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyshareIndex))
		}
		if x.ReceivedTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.ReceivedTimestamp))
		}
		if x.ReceivedBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ReceivedBlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GeneralKeyshare)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ReceivedBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReceivedBlockHeight))
			i--
			dAtA[i] = 0x38
		}
		if x.ReceivedTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReceivedTimestamp))
			i--
			dAtA[i] = 0x30
		}
		if x.KeyshareIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyshareIndex))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Keyshare) > 0 {
			i -= len(x.Keyshare)
			copy(dAtA[i:], x.Keyshare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Keyshare)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.IdValue) > 0 {
			i -= len(x.IdValue)
			copy(dAtA[i:], x.IdValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IdValue)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.IdType) > 0 {
			i -= len(x.IdType)
			copy(dAtA[i:], x.IdType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IdType)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Validator) > 0 {
			i -= len(x.Validator)
			copy(dAtA[i:], x.Validator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Validator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GeneralKeyshare)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GeneralKeyshare: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GeneralKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IdType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IdType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IdValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IdValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Keyshare", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Keyshare = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyshareIndex", wireType)
				}
				x.KeyshareIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyshareIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedTimestamp", wireType)
				}
				x.ReceivedTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReceivedTimestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedBlockHeight", wireType)
				}
				x.ReceivedBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReceivedBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ValidatorEncryptedKeyshare                       protoreflect.MessageDescriptor
	fd_ValidatorEncryptedKeyshare_validator             protoreflect.FieldDescriptor
	fd_ValidatorEncryptedKeyshare_requester             protoreflect.FieldDescriptor
	fd_ValidatorEncryptedKeyshare_keyshare              protoreflect.FieldDescriptor
	fd_ValidatorEncryptedKeyshare_keyshare_index        protoreflect.FieldDescriptor
	fd_ValidatorEncryptedKeyshare_received_timestamp    protoreflect.FieldDescriptor
	fd_ValidatorEncryptedKeyshare_received_block_height protoreflect.FieldDescriptor
	fd_ValidatorEncryptedKeyshare_identity              protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_keyshare_proto_init()
	md_ValidatorEncryptedKeyshare = File_fairyring_keyshare_keyshare_proto.Messages().ByName("ValidatorEncryptedKeyshare")
	fd_ValidatorEncryptedKeyshare_validator = md_ValidatorEncryptedKeyshare.Fields().ByName("validator")
	fd_ValidatorEncryptedKeyshare_requester = md_ValidatorEncryptedKeyshare.Fields().ByName("requester")
	fd_ValidatorEncryptedKeyshare_keyshare = md_ValidatorEncryptedKeyshare.Fields().ByName("keyshare")
	fd_ValidatorEncryptedKeyshare_keyshare_index = md_ValidatorEncryptedKeyshare.Fields().ByName("keyshare_index")
	fd_ValidatorEncryptedKeyshare_received_timestamp = md_ValidatorEncryptedKeyshare.Fields().ByName("received_timestamp")
	fd_ValidatorEncryptedKeyshare_received_block_height = md_ValidatorEncryptedKeyshare.Fields().ByName("received_block_height")
	fd_ValidatorEncryptedKeyshare_identity = md_ValidatorEncryptedKeyshare.Fields().ByName("identity")
}

var _ protoreflect.Message = (*fastReflection_ValidatorEncryptedKeyshare)(nil)

type fastReflection_ValidatorEncryptedKeyshare ValidatorEncryptedKeyshare

func (x *ValidatorEncryptedKeyshare) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidatorEncryptedKeyshare)(x)
}

func (x *ValidatorEncryptedKeyshare) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_keyshare_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidatorEncryptedKeyshare_messageType fastReflection_ValidatorEncryptedKeyshare_messageType
var _ protoreflect.MessageType = fastReflection_ValidatorEncryptedKeyshare_messageType{}

type fastReflection_ValidatorEncryptedKeyshare_messageType struct{}

func (x fastReflection_ValidatorEncryptedKeyshare_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidatorEncryptedKeyshare)(nil)
}
func (x fastReflection_ValidatorEncryptedKeyshare_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidatorEncryptedKeyshare)
}
func (x fastReflection_ValidatorEncryptedKeyshare_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidatorEncryptedKeyshare
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidatorEncryptedKeyshare) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidatorEncryptedKeyshare
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidatorEncryptedKeyshare) Type() protoreflect.MessageType {
	return _fastReflection_ValidatorEncryptedKeyshare_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidatorEncryptedKeyshare) New() protoreflect.Message {
	return new(fastReflection_ValidatorEncryptedKeyshare)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidatorEncryptedKeyshare) Interface() protoreflect.ProtoMessage {
	return (*ValidatorEncryptedKeyshare)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidatorEncryptedKeyshare) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Validator != "" {
		value := protoreflect.ValueOfString(x.Validator)
		if !f(fd_ValidatorEncryptedKeyshare_validator, value) {
			return
		}
	}
	if x.Requester != "" {
		value := protoreflect.ValueOfString(x.Requester)
		if !f(fd_ValidatorEncryptedKeyshare_requester, value) {
			return
		}
	}
	if x.Keyshare != "" {
		value := protoreflect.ValueOfString(x.Keyshare)
		if !f(fd_ValidatorEncryptedKeyshare_keyshare, value) {
			return
		}
	}
	if x.KeyshareIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyshareIndex)
		if !f(fd_ValidatorEncryptedKeyshare_keyshare_index, value) {
			return
		}
	}
	if x.ReceivedTimestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReceivedTimestamp)
		if !f(fd_ValidatorEncryptedKeyshare_received_timestamp, value) {
			return
		}
	}
	if x.ReceivedBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReceivedBlockHeight)
		if !f(fd_ValidatorEncryptedKeyshare_received_block_height, value) {
			return
		}
	}
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_ValidatorEncryptedKeyshare_identity, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidatorEncryptedKeyshare) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.validator":
		return x.Validator != ""
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.requester":
		return x.Requester != ""
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare":
		return x.Keyshare != ""
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare_index":
		return x.KeyshareIndex != uint64(0)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_timestamp":
		return x.ReceivedTimestamp != uint64(0)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_block_height":
		return x.ReceivedBlockHeight != uint64(0)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.identity":
		return x.Identity != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.ValidatorEncryptedKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.ValidatorEncryptedKeyshare does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorEncryptedKeyshare) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.validator":
		x.Validator = ""
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.requester":
		x.Requester = ""
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare":
		x.Keyshare = ""
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare_index":
		x.KeyshareIndex = uint64(0)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_timestamp":
		x.ReceivedTimestamp = uint64(0)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_block_height":
		x.ReceivedBlockHeight = uint64(0)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.identity":
		x.Identity = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.ValidatorEncryptedKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.ValidatorEncryptedKeyshare does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidatorEncryptedKeyshare) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.validator":
		value := x.Validator
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.requester":
		value := x.Requester
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare":
		value := x.Keyshare
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare_index":
		value := x.KeyshareIndex
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_timestamp":
		value := x.ReceivedTimestamp
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_block_height":
		value := x.ReceivedBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.ValidatorEncryptedKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.ValidatorEncryptedKeyshare does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorEncryptedKeyshare) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.validator":
		x.Validator = value.Interface().(string)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.requester":
		x.Requester = value.Interface().(string)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare":
		x.Keyshare = value.Interface().(string)
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare_index":
		x.KeyshareIndex = value.Uint()
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_timestamp":
		x.ReceivedTimestamp = value.Uint()
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_block_height":
		x.ReceivedBlockHeight = value.Uint()
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.identity":
		x.Identity = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.ValidatorEncryptedKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.ValidatorEncryptedKeyshare does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorEncryptedKeyshare) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.validator":
		panic(fmt.Errorf("field validator of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.requester":
		panic(fmt.Errorf("field requester of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare":
		panic(fmt.Errorf("field keyshare of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare_index":
		panic(fmt.Errorf("field keyshare_index of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_timestamp":
		panic(fmt.Errorf("field received_timestamp of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_block_height":
		panic(fmt.Errorf("field received_block_height of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.ValidatorEncryptedKeyshare is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.ValidatorEncryptedKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.ValidatorEncryptedKeyshare does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidatorEncryptedKeyshare) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.validator":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.requester":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.keyshare_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.received_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fairyring.keyshare.ValidatorEncryptedKeyshare.identity":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.ValidatorEncryptedKeyshare"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.ValidatorEncryptedKeyshare does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidatorEncryptedKeyshare) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.ValidatorEncryptedKeyshare", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidatorEncryptedKeyshare) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidatorEncryptedKeyshare) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidatorEncryptedKeyshare) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidatorEncryptedKeyshare) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidatorEncryptedKeyshare)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Validator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Requester)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Keyshare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyshareIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyshareIndex))
		}
		if x.ReceivedTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.ReceivedTimestamp))
		}
		if x.ReceivedBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ReceivedBlockHeight))
		}
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidatorEncryptedKeyshare)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0x3a
		}
		if x.ReceivedBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReceivedBlockHeight))
			i--
			dAtA[i] = 0x30
		}
		if x.ReceivedTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReceivedTimestamp))
			i--
			dAtA[i] = 0x28
		}
		if x.KeyshareIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyshareIndex))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Keyshare) > 0 {
			i -= len(x.Keyshare)
			copy(dAtA[i:], x.Keyshare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Keyshare)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Requester) > 0 {
			i -= len(x.Requester)
			copy(dAtA[i:], x.Requester)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Requester)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Validator) > 0 {
			i -= len(x.Validator)
			copy(dAtA[i:], x.Validator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Validator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidatorEncryptedKeyshare)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidatorEncryptedKeyshare: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidatorEncryptedKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requester = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Keyshare", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Keyshare = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyshareIndex", wireType)
				}
				x.KeyshareIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyshareIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedTimestamp", wireType)
				}
				x.ReceivedTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReceivedTimestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedBlockHeight", wireType)
				}
				x.ReceivedBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReceivedBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fairyring/keyshare/keyshare.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Keyshare defines the structure for submitting
// blockwise keyshares by validators
type Keyshare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator           string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	BlockHeight         uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Keyshare            string `protobuf:"bytes,3,opt,name=keyshare,proto3" json:"keyshare,omitempty"`
	KeyshareIndex       uint64 `protobuf:"varint,4,opt,name=keyshare_index,json=keyshareIndex,proto3" json:"keyshare_index,omitempty"`
	ReceivedTimestamp   uint64 `protobuf:"varint,5,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	ReceivedBlockHeight uint64 `protobuf:"varint,6,opt,name=received_block_height,json=receivedBlockHeight,proto3" json:"received_block_height,omitempty"`
}

func (x *Keyshare) Reset() {
	*x = Keyshare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_keyshare_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyshare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyshare) ProtoMessage() {}

// Deprecated: Use Keyshare.ProtoReflect.Descriptor instead.
func (*Keyshare) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_keyshare_proto_rawDescGZIP(), []int{0}
}

func (x *Keyshare) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *Keyshare) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Keyshare) GetKeyshare() string {
	if x != nil {
		return x.Keyshare
	}
	return ""
}

func (x *Keyshare) GetKeyshareIndex() uint64 {
	if x != nil {
		return x.KeyshareIndex
	}
	return 0
}

func (x *Keyshare) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *Keyshare) GetReceivedBlockHeight() uint64 {
	if x != nil {
		return x.ReceivedBlockHeight
	}
	return 0
}

// GeneralKeyshare defines the structure for submitting
// general keyshares by validators
type GeneralKeyshare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator           string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	IdType              string `protobuf:"bytes,2,opt,name=id_type,json=idType,proto3" json:"id_type,omitempty"`
	IdValue             string `protobuf:"bytes,3,opt,name=id_value,json=idValue,proto3" json:"id_value,omitempty"`
	Keyshare            string `protobuf:"bytes,4,opt,name=keyshare,proto3" json:"keyshare,omitempty"`
	KeyshareIndex       uint64 `protobuf:"varint,5,opt,name=keyshare_index,json=keyshareIndex,proto3" json:"keyshare_index,omitempty"`
	ReceivedTimestamp   uint64 `protobuf:"varint,6,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	ReceivedBlockHeight uint64 `protobuf:"varint,7,opt,name=received_block_height,json=receivedBlockHeight,proto3" json:"received_block_height,omitempty"`
}

func (x *GeneralKeyshare) Reset() {
	*x = GeneralKeyshare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_keyshare_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralKeyshare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralKeyshare) ProtoMessage() {}

// Deprecated: Use GeneralKeyshare.ProtoReflect.Descriptor instead.
func (*GeneralKeyshare) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_keyshare_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralKeyshare) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *GeneralKeyshare) GetIdType() string {
	if x != nil {
		return x.IdType
	}
	return ""
}

func (x *GeneralKeyshare) GetIdValue() string {
	if x != nil {
		return x.IdValue
	}
	return ""
}

func (x *GeneralKeyshare) GetKeyshare() string {
	if x != nil {
		return x.Keyshare
	}
	return ""
}

func (x *GeneralKeyshare) GetKeyshareIndex() uint64 {
	if x != nil {
		return x.KeyshareIndex
	}
	return 0
}

func (x *GeneralKeyshare) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *GeneralKeyshare) GetReceivedBlockHeight() uint64 {
	if x != nil {
		return x.ReceivedBlockHeight
	}
	return 0
}

// ValidatorEncryptedKeyshare defines the structure for
// submitting encrypted keyshares by validators
type ValidatorEncryptedKeyshare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator           string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Requester           string `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Keyshare            string `protobuf:"bytes,3,opt,name=keyshare,proto3" json:"keyshare,omitempty"`
	KeyshareIndex       uint64 `protobuf:"varint,4,opt,name=keyshare_index,json=keyshareIndex,proto3" json:"keyshare_index,omitempty"`
	ReceivedTimestamp   uint64 `protobuf:"varint,5,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	ReceivedBlockHeight uint64 `protobuf:"varint,6,opt,name=received_block_height,json=receivedBlockHeight,proto3" json:"received_block_height,omitempty"`
	Identity            string `protobuf:"bytes,7,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *ValidatorEncryptedKeyshare) Reset() {
	*x = ValidatorEncryptedKeyshare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_keyshare_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorEncryptedKeyshare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorEncryptedKeyshare) ProtoMessage() {}

// Deprecated: Use ValidatorEncryptedKeyshare.ProtoReflect.Descriptor instead.
func (*ValidatorEncryptedKeyshare) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_keyshare_proto_rawDescGZIP(), []int{2}
}

func (x *ValidatorEncryptedKeyshare) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ValidatorEncryptedKeyshare) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *ValidatorEncryptedKeyshare) GetKeyshare() string {
	if x != nil {
		return x.Keyshare
	}
	return ""
}

func (x *ValidatorEncryptedKeyshare) GetKeyshareIndex() uint64 {
	if x != nil {
		return x.KeyshareIndex
	}
	return 0
}

func (x *ValidatorEncryptedKeyshare) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *ValidatorEncryptedKeyshare) GetReceivedBlockHeight() uint64 {
	if x != nil {
		return x.ReceivedBlockHeight
	}
	return 0
}

func (x *ValidatorEncryptedKeyshare) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

var File_fairyring_keyshare_keyshare_proto protoreflect.FileDescriptor

var file_fairyring_keyshare_keyshare_proto_rawDesc = []byte{
	0x0a, 0x21, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0xb5, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x61, 0x69,
	0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x0d, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x68, 0x61, 0x72, 0x65, 0xa2, 0x02, 0x03, 0x46, 0x4b, 0x58, 0xaa, 0x02, 0x12, 0x46, 0x61,
	0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0xca, 0x02, 0x12, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4b, 0x65, 0x79,
	0x73, 0x68, 0x61, 0x72, 0x65, 0xe2, 0x02, 0x1e, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e,
	0x67, 0x5c, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x3a, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fairyring_keyshare_keyshare_proto_rawDescOnce sync.Once
	file_fairyring_keyshare_keyshare_proto_rawDescData = file_fairyring_keyshare_keyshare_proto_rawDesc
)

func file_fairyring_keyshare_keyshare_proto_rawDescGZIP() []byte {
	file_fairyring_keyshare_keyshare_proto_rawDescOnce.Do(func() {
		file_fairyring_keyshare_keyshare_proto_rawDescData = protoimpl.X.CompressGZIP(file_fairyring_keyshare_keyshare_proto_rawDescData)
	})
	return file_fairyring_keyshare_keyshare_proto_rawDescData
}

var file_fairyring_keyshare_keyshare_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fairyring_keyshare_keyshare_proto_goTypes = []interface{}{
	(*Keyshare)(nil),                   // 0: fairyring.keyshare.Keyshare
	(*GeneralKeyshare)(nil),            // 1: fairyring.keyshare.GeneralKeyshare
	(*ValidatorEncryptedKeyshare)(nil), // 2: fairyring.keyshare.ValidatorEncryptedKeyshare
}
var file_fairyring_keyshare_keyshare_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fairyring_keyshare_keyshare_proto_init() }
func file_fairyring_keyshare_keyshare_proto_init() {
	if File_fairyring_keyshare_keyshare_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fairyring_keyshare_keyshare_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyshare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_keyshare_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralKeyshare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_keyshare_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorEncryptedKeyshare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fairyring_keyshare_keyshare_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fairyring_keyshare_keyshare_proto_goTypes,
		DependencyIndexes: file_fairyring_keyshare_keyshare_proto_depIdxs,
		MessageInfos:      file_fairyring_keyshare_keyshare_proto_msgTypes,
	}.Build()
	File_fairyring_keyshare_keyshare_proto = out.File
	file_fairyring_keyshare_keyshare_proto_rawDesc = nil
	file_fairyring_keyshare_keyshare_proto_goTypes = nil
	file_fairyring_keyshare_keyshare_proto_depIdxs = nil
}
