// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package keyshare

import (
	common "github.com/Fairblock/fairyring/api/fairyring/common"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_DecryptionKeyRequest                   protoreflect.MessageDescriptor
	fd_DecryptionKeyRequest_identity          protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_pubkey            protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_ibc_info          protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_counterparty      protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_decryption_key    protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_proposal_id       protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_sent              protoreflect.FieldDescriptor
	fd_DecryptionKeyRequest_signal_validators protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_requested_decryption_key_proto_init()
	md_DecryptionKeyRequest = File_fairyring_keyshare_requested_decryption_key_proto.Messages().ByName("DecryptionKeyRequest")
	fd_DecryptionKeyRequest_identity = md_DecryptionKeyRequest.Fields().ByName("identity")
	fd_DecryptionKeyRequest_pubkey = md_DecryptionKeyRequest.Fields().ByName("pubkey")
	fd_DecryptionKeyRequest_ibc_info = md_DecryptionKeyRequest.Fields().ByName("ibc_info")
	fd_DecryptionKeyRequest_counterparty = md_DecryptionKeyRequest.Fields().ByName("counterparty")
	fd_DecryptionKeyRequest_decryption_key = md_DecryptionKeyRequest.Fields().ByName("decryption_key")
	fd_DecryptionKeyRequest_proposal_id = md_DecryptionKeyRequest.Fields().ByName("proposal_id")
	fd_DecryptionKeyRequest_sent = md_DecryptionKeyRequest.Fields().ByName("sent")
	fd_DecryptionKeyRequest_signal_validators = md_DecryptionKeyRequest.Fields().ByName("signal_validators")
}

var _ protoreflect.Message = (*fastReflection_DecryptionKeyRequest)(nil)

type fastReflection_DecryptionKeyRequest DecryptionKeyRequest

func (x *DecryptionKeyRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DecryptionKeyRequest)(x)
}

func (x *DecryptionKeyRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DecryptionKeyRequest_messageType fastReflection_DecryptionKeyRequest_messageType
var _ protoreflect.MessageType = fastReflection_DecryptionKeyRequest_messageType{}

type fastReflection_DecryptionKeyRequest_messageType struct{}

func (x fastReflection_DecryptionKeyRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DecryptionKeyRequest)(nil)
}
func (x fastReflection_DecryptionKeyRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_DecryptionKeyRequest)
}
func (x fastReflection_DecryptionKeyRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DecryptionKeyRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DecryptionKeyRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_DecryptionKeyRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DecryptionKeyRequest) Type() protoreflect.MessageType {
	return _fastReflection_DecryptionKeyRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DecryptionKeyRequest) New() protoreflect.Message {
	return new(fastReflection_DecryptionKeyRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DecryptionKeyRequest) Interface() protoreflect.ProtoMessage {
	return (*DecryptionKeyRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DecryptionKeyRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_DecryptionKeyRequest_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_DecryptionKeyRequest_pubkey, value) {
			return
		}
	}
	if x.IbcInfo != nil {
		value := protoreflect.ValueOfMessage(x.IbcInfo.ProtoReflect())
		if !f(fd_DecryptionKeyRequest_ibc_info, value) {
			return
		}
	}
	if x.Counterparty != nil {
		value := protoreflect.ValueOfMessage(x.Counterparty.ProtoReflect())
		if !f(fd_DecryptionKeyRequest_counterparty, value) {
			return
		}
	}
	if x.DecryptionKey != "" {
		value := protoreflect.ValueOfString(x.DecryptionKey)
		if !f(fd_DecryptionKeyRequest_decryption_key, value) {
			return
		}
	}
	if x.ProposalId != "" {
		value := protoreflect.ValueOfString(x.ProposalId)
		if !f(fd_DecryptionKeyRequest_proposal_id, value) {
			return
		}
	}
	if x.Sent != false {
		value := protoreflect.ValueOfBool(x.Sent)
		if !f(fd_DecryptionKeyRequest_sent, value) {
			return
		}
	}
	if x.SignalValidators != false {
		value := protoreflect.ValueOfBool(x.SignalValidators)
		if !f(fd_DecryptionKeyRequest_signal_validators, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DecryptionKeyRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyRequest.identity":
		return x.Identity != ""
	case "fairyring.keyshare.DecryptionKeyRequest.pubkey":
		return x.Pubkey != ""
	case "fairyring.keyshare.DecryptionKeyRequest.ibc_info":
		return x.IbcInfo != nil
	case "fairyring.keyshare.DecryptionKeyRequest.counterparty":
		return x.Counterparty != nil
	case "fairyring.keyshare.DecryptionKeyRequest.decryption_key":
		return x.DecryptionKey != ""
	case "fairyring.keyshare.DecryptionKeyRequest.proposal_id":
		return x.ProposalId != ""
	case "fairyring.keyshare.DecryptionKeyRequest.sent":
		return x.Sent != false
	case "fairyring.keyshare.DecryptionKeyRequest.signal_validators":
		return x.SignalValidators != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyRequest.identity":
		x.Identity = ""
	case "fairyring.keyshare.DecryptionKeyRequest.pubkey":
		x.Pubkey = ""
	case "fairyring.keyshare.DecryptionKeyRequest.ibc_info":
		x.IbcInfo = nil
	case "fairyring.keyshare.DecryptionKeyRequest.counterparty":
		x.Counterparty = nil
	case "fairyring.keyshare.DecryptionKeyRequest.decryption_key":
		x.DecryptionKey = ""
	case "fairyring.keyshare.DecryptionKeyRequest.proposal_id":
		x.ProposalId = ""
	case "fairyring.keyshare.DecryptionKeyRequest.sent":
		x.Sent = false
	case "fairyring.keyshare.DecryptionKeyRequest.signal_validators":
		x.SignalValidators = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DecryptionKeyRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.DecryptionKeyRequest.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyRequest.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyRequest.ibc_info":
		value := x.IbcInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.DecryptionKeyRequest.counterparty":
		value := x.Counterparty
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.DecryptionKeyRequest.decryption_key":
		value := x.DecryptionKey
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyRequest.proposal_id":
		value := x.ProposalId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyRequest.sent":
		value := x.Sent
		return protoreflect.ValueOfBool(value)
	case "fairyring.keyshare.DecryptionKeyRequest.signal_validators":
		value := x.SignalValidators
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyRequest.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyRequest.pubkey":
		x.Pubkey = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyRequest.ibc_info":
		x.IbcInfo = value.Message().Interface().(*IBCInfo)
	case "fairyring.keyshare.DecryptionKeyRequest.counterparty":
		x.Counterparty = value.Message().Interface().(*CounterPartyIBCInfo)
	case "fairyring.keyshare.DecryptionKeyRequest.decryption_key":
		x.DecryptionKey = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyRequest.proposal_id":
		x.ProposalId = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyRequest.sent":
		x.Sent = value.Bool()
	case "fairyring.keyshare.DecryptionKeyRequest.signal_validators":
		x.SignalValidators = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyRequest.ibc_info":
		if x.IbcInfo == nil {
			x.IbcInfo = new(IBCInfo)
		}
		return protoreflect.ValueOfMessage(x.IbcInfo.ProtoReflect())
	case "fairyring.keyshare.DecryptionKeyRequest.counterparty":
		if x.Counterparty == nil {
			x.Counterparty = new(CounterPartyIBCInfo)
		}
		return protoreflect.ValueOfMessage(x.Counterparty.ProtoReflect())
	case "fairyring.keyshare.DecryptionKeyRequest.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.DecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.DecryptionKeyRequest.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.keyshare.DecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.DecryptionKeyRequest.decryption_key":
		panic(fmt.Errorf("field decryption_key of message fairyring.keyshare.DecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.DecryptionKeyRequest.proposal_id":
		panic(fmt.Errorf("field proposal_id of message fairyring.keyshare.DecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.DecryptionKeyRequest.sent":
		panic(fmt.Errorf("field sent of message fairyring.keyshare.DecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.DecryptionKeyRequest.signal_validators":
		panic(fmt.Errorf("field signal_validators of message fairyring.keyshare.DecryptionKeyRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DecryptionKeyRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyRequest.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyRequest.pubkey":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyRequest.ibc_info":
		m := new(IBCInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.keyshare.DecryptionKeyRequest.counterparty":
		m := new(CounterPartyIBCInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.keyshare.DecryptionKeyRequest.decryption_key":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyRequest.proposal_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyRequest.sent":
		return protoreflect.ValueOfBool(false)
	case "fairyring.keyshare.DecryptionKeyRequest.signal_validators":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DecryptionKeyRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.DecryptionKeyRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DecryptionKeyRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DecryptionKeyRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DecryptionKeyRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DecryptionKeyRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IbcInfo != nil {
			l = options.Size(x.IbcInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Counterparty != nil {
			l = options.Size(x.Counterparty)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DecryptionKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProposalId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Sent {
			n += 2
		}
		if x.SignalValidators {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DecryptionKeyRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SignalValidators {
			i--
			if x.SignalValidators {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.Sent {
			i--
			if x.Sent {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if len(x.ProposalId) > 0 {
			i -= len(x.ProposalId)
			copy(dAtA[i:], x.ProposalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposalId)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.DecryptionKey) > 0 {
			i -= len(x.DecryptionKey)
			copy(dAtA[i:], x.DecryptionKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DecryptionKey)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Counterparty != nil {
			encoded, err := options.Marshal(x.Counterparty)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.IbcInfo != nil {
			encoded, err := options.Marshal(x.IbcInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DecryptionKeyRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DecryptionKeyRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DecryptionKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IbcInfo == nil {
					x.IbcInfo = &IBCInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IbcInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Counterparty == nil {
					x.Counterparty = &CounterPartyIBCInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Counterparty); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DecryptionKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProposalId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Sent = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignalValidators", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.SignalValidators = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IBCInfo               protoreflect.MessageDescriptor
	fd_IBCInfo_client_id     protoreflect.FieldDescriptor
	fd_IBCInfo_connection_id protoreflect.FieldDescriptor
	fd_IBCInfo_channel_id    protoreflect.FieldDescriptor
	fd_IBCInfo_port_id       protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_requested_decryption_key_proto_init()
	md_IBCInfo = File_fairyring_keyshare_requested_decryption_key_proto.Messages().ByName("IBCInfo")
	fd_IBCInfo_client_id = md_IBCInfo.Fields().ByName("client_id")
	fd_IBCInfo_connection_id = md_IBCInfo.Fields().ByName("connection_id")
	fd_IBCInfo_channel_id = md_IBCInfo.Fields().ByName("channel_id")
	fd_IBCInfo_port_id = md_IBCInfo.Fields().ByName("port_id")
}

var _ protoreflect.Message = (*fastReflection_IBCInfo)(nil)

type fastReflection_IBCInfo IBCInfo

func (x *IBCInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IBCInfo)(x)
}

func (x *IBCInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IBCInfo_messageType fastReflection_IBCInfo_messageType
var _ protoreflect.MessageType = fastReflection_IBCInfo_messageType{}

type fastReflection_IBCInfo_messageType struct{}

func (x fastReflection_IBCInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IBCInfo)(nil)
}
func (x fastReflection_IBCInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_IBCInfo)
}
func (x fastReflection_IBCInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IBCInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IBCInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_IBCInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IBCInfo) Type() protoreflect.MessageType {
	return _fastReflection_IBCInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IBCInfo) New() protoreflect.Message {
	return new(fastReflection_IBCInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IBCInfo) Interface() protoreflect.ProtoMessage {
	return (*IBCInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IBCInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ClientId != "" {
		value := protoreflect.ValueOfString(x.ClientId)
		if !f(fd_IBCInfo_client_id, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_IBCInfo_connection_id, value) {
			return
		}
	}
	if x.ChannelId != "" {
		value := protoreflect.ValueOfString(x.ChannelId)
		if !f(fd_IBCInfo_channel_id, value) {
			return
		}
	}
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_IBCInfo_port_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IBCInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.IBCInfo.client_id":
		return x.ClientId != ""
	case "fairyring.keyshare.IBCInfo.connection_id":
		return x.ConnectionId != ""
	case "fairyring.keyshare.IBCInfo.channel_id":
		return x.ChannelId != ""
	case "fairyring.keyshare.IBCInfo.port_id":
		return x.PortId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.IBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.IBCInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IBCInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.IBCInfo.client_id":
		x.ClientId = ""
	case "fairyring.keyshare.IBCInfo.connection_id":
		x.ConnectionId = ""
	case "fairyring.keyshare.IBCInfo.channel_id":
		x.ChannelId = ""
	case "fairyring.keyshare.IBCInfo.port_id":
		x.PortId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.IBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.IBCInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IBCInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.IBCInfo.client_id":
		value := x.ClientId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.IBCInfo.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.IBCInfo.channel_id":
		value := x.ChannelId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.IBCInfo.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.IBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.IBCInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IBCInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.IBCInfo.client_id":
		x.ClientId = value.Interface().(string)
	case "fairyring.keyshare.IBCInfo.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "fairyring.keyshare.IBCInfo.channel_id":
		x.ChannelId = value.Interface().(string)
	case "fairyring.keyshare.IBCInfo.port_id":
		x.PortId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.IBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.IBCInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IBCInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.IBCInfo.client_id":
		panic(fmt.Errorf("field client_id of message fairyring.keyshare.IBCInfo is not mutable"))
	case "fairyring.keyshare.IBCInfo.connection_id":
		panic(fmt.Errorf("field connection_id of message fairyring.keyshare.IBCInfo is not mutable"))
	case "fairyring.keyshare.IBCInfo.channel_id":
		panic(fmt.Errorf("field channel_id of message fairyring.keyshare.IBCInfo is not mutable"))
	case "fairyring.keyshare.IBCInfo.port_id":
		panic(fmt.Errorf("field port_id of message fairyring.keyshare.IBCInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.IBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.IBCInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IBCInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.IBCInfo.client_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.IBCInfo.connection_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.IBCInfo.channel_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.IBCInfo.port_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.IBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.IBCInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IBCInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.IBCInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IBCInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IBCInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IBCInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IBCInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IBCInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ClientId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IBCInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ChannelId) > 0 {
			i -= len(x.ChannelId)
			copy(dAtA[i:], x.ChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChannelId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ClientId) > 0 {
			i -= len(x.ClientId)
			copy(dAtA[i:], x.ClientId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ClientId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IBCInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IBCInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IBCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ClientId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CounterPartyIBCInfo               protoreflect.MessageDescriptor
	fd_CounterPartyIBCInfo_client_id     protoreflect.FieldDescriptor
	fd_CounterPartyIBCInfo_connection_id protoreflect.FieldDescriptor
	fd_CounterPartyIBCInfo_channel_id    protoreflect.FieldDescriptor
	fd_CounterPartyIBCInfo_port_id       protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_requested_decryption_key_proto_init()
	md_CounterPartyIBCInfo = File_fairyring_keyshare_requested_decryption_key_proto.Messages().ByName("CounterPartyIBCInfo")
	fd_CounterPartyIBCInfo_client_id = md_CounterPartyIBCInfo.Fields().ByName("client_id")
	fd_CounterPartyIBCInfo_connection_id = md_CounterPartyIBCInfo.Fields().ByName("connection_id")
	fd_CounterPartyIBCInfo_channel_id = md_CounterPartyIBCInfo.Fields().ByName("channel_id")
	fd_CounterPartyIBCInfo_port_id = md_CounterPartyIBCInfo.Fields().ByName("port_id")
}

var _ protoreflect.Message = (*fastReflection_CounterPartyIBCInfo)(nil)

type fastReflection_CounterPartyIBCInfo CounterPartyIBCInfo

func (x *CounterPartyIBCInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CounterPartyIBCInfo)(x)
}

func (x *CounterPartyIBCInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CounterPartyIBCInfo_messageType fastReflection_CounterPartyIBCInfo_messageType
var _ protoreflect.MessageType = fastReflection_CounterPartyIBCInfo_messageType{}

type fastReflection_CounterPartyIBCInfo_messageType struct{}

func (x fastReflection_CounterPartyIBCInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CounterPartyIBCInfo)(nil)
}
func (x fastReflection_CounterPartyIBCInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_CounterPartyIBCInfo)
}
func (x fastReflection_CounterPartyIBCInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CounterPartyIBCInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CounterPartyIBCInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_CounterPartyIBCInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CounterPartyIBCInfo) Type() protoreflect.MessageType {
	return _fastReflection_CounterPartyIBCInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CounterPartyIBCInfo) New() protoreflect.Message {
	return new(fastReflection_CounterPartyIBCInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CounterPartyIBCInfo) Interface() protoreflect.ProtoMessage {
	return (*CounterPartyIBCInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CounterPartyIBCInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ClientId != "" {
		value := protoreflect.ValueOfString(x.ClientId)
		if !f(fd_CounterPartyIBCInfo_client_id, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_CounterPartyIBCInfo_connection_id, value) {
			return
		}
	}
	if x.ChannelId != "" {
		value := protoreflect.ValueOfString(x.ChannelId)
		if !f(fd_CounterPartyIBCInfo_channel_id, value) {
			return
		}
	}
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_CounterPartyIBCInfo_port_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CounterPartyIBCInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.CounterPartyIBCInfo.client_id":
		return x.ClientId != ""
	case "fairyring.keyshare.CounterPartyIBCInfo.connection_id":
		return x.ConnectionId != ""
	case "fairyring.keyshare.CounterPartyIBCInfo.channel_id":
		return x.ChannelId != ""
	case "fairyring.keyshare.CounterPartyIBCInfo.port_id":
		return x.PortId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CounterPartyIBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CounterPartyIBCInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CounterPartyIBCInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.CounterPartyIBCInfo.client_id":
		x.ClientId = ""
	case "fairyring.keyshare.CounterPartyIBCInfo.connection_id":
		x.ConnectionId = ""
	case "fairyring.keyshare.CounterPartyIBCInfo.channel_id":
		x.ChannelId = ""
	case "fairyring.keyshare.CounterPartyIBCInfo.port_id":
		x.PortId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CounterPartyIBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CounterPartyIBCInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CounterPartyIBCInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.CounterPartyIBCInfo.client_id":
		value := x.ClientId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.CounterPartyIBCInfo.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.CounterPartyIBCInfo.channel_id":
		value := x.ChannelId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.CounterPartyIBCInfo.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CounterPartyIBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CounterPartyIBCInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CounterPartyIBCInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.CounterPartyIBCInfo.client_id":
		x.ClientId = value.Interface().(string)
	case "fairyring.keyshare.CounterPartyIBCInfo.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "fairyring.keyshare.CounterPartyIBCInfo.channel_id":
		x.ChannelId = value.Interface().(string)
	case "fairyring.keyshare.CounterPartyIBCInfo.port_id":
		x.PortId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CounterPartyIBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CounterPartyIBCInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CounterPartyIBCInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.CounterPartyIBCInfo.client_id":
		panic(fmt.Errorf("field client_id of message fairyring.keyshare.CounterPartyIBCInfo is not mutable"))
	case "fairyring.keyshare.CounterPartyIBCInfo.connection_id":
		panic(fmt.Errorf("field connection_id of message fairyring.keyshare.CounterPartyIBCInfo is not mutable"))
	case "fairyring.keyshare.CounterPartyIBCInfo.channel_id":
		panic(fmt.Errorf("field channel_id of message fairyring.keyshare.CounterPartyIBCInfo is not mutable"))
	case "fairyring.keyshare.CounterPartyIBCInfo.port_id":
		panic(fmt.Errorf("field port_id of message fairyring.keyshare.CounterPartyIBCInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CounterPartyIBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CounterPartyIBCInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CounterPartyIBCInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.CounterPartyIBCInfo.client_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.CounterPartyIBCInfo.connection_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.CounterPartyIBCInfo.channel_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.CounterPartyIBCInfo.port_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CounterPartyIBCInfo"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CounterPartyIBCInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CounterPartyIBCInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.CounterPartyIBCInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CounterPartyIBCInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CounterPartyIBCInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CounterPartyIBCInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CounterPartyIBCInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CounterPartyIBCInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ClientId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CounterPartyIBCInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ChannelId) > 0 {
			i -= len(x.ChannelId)
			copy(dAtA[i:], x.ChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChannelId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ClientId) > 0 {
			i -= len(x.ClientId)
			copy(dAtA[i:], x.ClientId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ClientId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CounterPartyIBCInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CounterPartyIBCInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CounterPartyIBCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ClientId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PrivateDecryptionKeyRequest_5_list)(nil)

type _PrivateDecryptionKeyRequest_5_list struct {
	list *[]*common.PrivateDecryptionKey
}

func (x *_PrivateDecryptionKeyRequest_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PrivateDecryptionKeyRequest_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PrivateDecryptionKeyRequest_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.PrivateDecryptionKey)
	(*x.list)[i] = concreteValue
}

func (x *_PrivateDecryptionKeyRequest_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.PrivateDecryptionKey)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PrivateDecryptionKeyRequest_5_list) AppendMutable() protoreflect.Value {
	v := new(common.PrivateDecryptionKey)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PrivateDecryptionKeyRequest_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PrivateDecryptionKeyRequest_5_list) NewElement() protoreflect.Value {
	v := new(common.PrivateDecryptionKey)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PrivateDecryptionKeyRequest_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PrivateDecryptionKeyRequest                         protoreflect.MessageDescriptor
	fd_PrivateDecryptionKeyRequest_identity                protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyRequest_pubkey                  protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyRequest_ibc_info                protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyRequest_counterparty            protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyRequest_private_decryption_keys protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyRequest_sent                    protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyRequest_signal_validators       protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_requested_decryption_key_proto_init()
	md_PrivateDecryptionKeyRequest = File_fairyring_keyshare_requested_decryption_key_proto.Messages().ByName("PrivateDecryptionKeyRequest")
	fd_PrivateDecryptionKeyRequest_identity = md_PrivateDecryptionKeyRequest.Fields().ByName("identity")
	fd_PrivateDecryptionKeyRequest_pubkey = md_PrivateDecryptionKeyRequest.Fields().ByName("pubkey")
	fd_PrivateDecryptionKeyRequest_ibc_info = md_PrivateDecryptionKeyRequest.Fields().ByName("ibc_info")
	fd_PrivateDecryptionKeyRequest_counterparty = md_PrivateDecryptionKeyRequest.Fields().ByName("counterparty")
	fd_PrivateDecryptionKeyRequest_private_decryption_keys = md_PrivateDecryptionKeyRequest.Fields().ByName("private_decryption_keys")
	fd_PrivateDecryptionKeyRequest_sent = md_PrivateDecryptionKeyRequest.Fields().ByName("sent")
	fd_PrivateDecryptionKeyRequest_signal_validators = md_PrivateDecryptionKeyRequest.Fields().ByName("signal_validators")
}

var _ protoreflect.Message = (*fastReflection_PrivateDecryptionKeyRequest)(nil)

type fastReflection_PrivateDecryptionKeyRequest PrivateDecryptionKeyRequest

func (x *PrivateDecryptionKeyRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PrivateDecryptionKeyRequest)(x)
}

func (x *PrivateDecryptionKeyRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PrivateDecryptionKeyRequest_messageType fastReflection_PrivateDecryptionKeyRequest_messageType
var _ protoreflect.MessageType = fastReflection_PrivateDecryptionKeyRequest_messageType{}

type fastReflection_PrivateDecryptionKeyRequest_messageType struct{}

func (x fastReflection_PrivateDecryptionKeyRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PrivateDecryptionKeyRequest)(nil)
}
func (x fastReflection_PrivateDecryptionKeyRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_PrivateDecryptionKeyRequest)
}
func (x fastReflection_PrivateDecryptionKeyRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PrivateDecryptionKeyRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PrivateDecryptionKeyRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_PrivateDecryptionKeyRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PrivateDecryptionKeyRequest) Type() protoreflect.MessageType {
	return _fastReflection_PrivateDecryptionKeyRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PrivateDecryptionKeyRequest) New() protoreflect.Message {
	return new(fastReflection_PrivateDecryptionKeyRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PrivateDecryptionKeyRequest) Interface() protoreflect.ProtoMessage {
	return (*PrivateDecryptionKeyRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PrivateDecryptionKeyRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_PrivateDecryptionKeyRequest_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_PrivateDecryptionKeyRequest_pubkey, value) {
			return
		}
	}
	if x.IbcInfo != nil {
		value := protoreflect.ValueOfMessage(x.IbcInfo.ProtoReflect())
		if !f(fd_PrivateDecryptionKeyRequest_ibc_info, value) {
			return
		}
	}
	if x.Counterparty != nil {
		value := protoreflect.ValueOfMessage(x.Counterparty.ProtoReflect())
		if !f(fd_PrivateDecryptionKeyRequest_counterparty, value) {
			return
		}
	}
	if len(x.PrivateDecryptionKeys) != 0 {
		value := protoreflect.ValueOfList(&_PrivateDecryptionKeyRequest_5_list{list: &x.PrivateDecryptionKeys})
		if !f(fd_PrivateDecryptionKeyRequest_private_decryption_keys, value) {
			return
		}
	}
	if x.Sent != false {
		value := protoreflect.ValueOfBool(x.Sent)
		if !f(fd_PrivateDecryptionKeyRequest_sent, value) {
			return
		}
	}
	if x.SignalValidators != false {
		value := protoreflect.ValueOfBool(x.SignalValidators)
		if !f(fd_PrivateDecryptionKeyRequest_signal_validators, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PrivateDecryptionKeyRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.identity":
		return x.Identity != ""
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.pubkey":
		return x.Pubkey != ""
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info":
		return x.IbcInfo != nil
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty":
		return x.Counterparty != nil
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys":
		return len(x.PrivateDecryptionKeys) != 0
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.sent":
		return x.Sent != false
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.signal_validators":
		return x.SignalValidators != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.identity":
		x.Identity = ""
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.pubkey":
		x.Pubkey = ""
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info":
		x.IbcInfo = nil
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty":
		x.Counterparty = nil
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys":
		x.PrivateDecryptionKeys = nil
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.sent":
		x.Sent = false
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.signal_validators":
		x.SignalValidators = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PrivateDecryptionKeyRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info":
		value := x.IbcInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty":
		value := x.Counterparty
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys":
		if len(x.PrivateDecryptionKeys) == 0 {
			return protoreflect.ValueOfList(&_PrivateDecryptionKeyRequest_5_list{})
		}
		listValue := &_PrivateDecryptionKeyRequest_5_list{list: &x.PrivateDecryptionKeys}
		return protoreflect.ValueOfList(listValue)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.sent":
		value := x.Sent
		return protoreflect.ValueOfBool(value)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.signal_validators":
		value := x.SignalValidators
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.pubkey":
		x.Pubkey = value.Interface().(string)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info":
		x.IbcInfo = value.Message().Interface().(*IBCInfo)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty":
		x.Counterparty = value.Message().Interface().(*CounterPartyIBCInfo)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys":
		lv := value.List()
		clv := lv.(*_PrivateDecryptionKeyRequest_5_list)
		x.PrivateDecryptionKeys = *clv.list
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.sent":
		x.Sent = value.Bool()
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.signal_validators":
		x.SignalValidators = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info":
		if x.IbcInfo == nil {
			x.IbcInfo = new(IBCInfo)
		}
		return protoreflect.ValueOfMessage(x.IbcInfo.ProtoReflect())
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty":
		if x.Counterparty == nil {
			x.Counterparty = new(CounterPartyIBCInfo)
		}
		return protoreflect.ValueOfMessage(x.Counterparty.ProtoReflect())
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys":
		if x.PrivateDecryptionKeys == nil {
			x.PrivateDecryptionKeys = []*common.PrivateDecryptionKey{}
		}
		value := &_PrivateDecryptionKeyRequest_5_list{list: &x.PrivateDecryptionKeys}
		return protoreflect.ValueOfList(value)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.PrivateDecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.keyshare.PrivateDecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.sent":
		panic(fmt.Errorf("field sent of message fairyring.keyshare.PrivateDecryptionKeyRequest is not mutable"))
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.signal_validators":
		panic(fmt.Errorf("field signal_validators of message fairyring.keyshare.PrivateDecryptionKeyRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PrivateDecryptionKeyRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.pubkey":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info":
		m := new(IBCInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty":
		m := new(CounterPartyIBCInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys":
		list := []*common.PrivateDecryptionKey{}
		return protoreflect.ValueOfList(&_PrivateDecryptionKeyRequest_5_list{list: &list})
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.sent":
		return protoreflect.ValueOfBool(false)
	case "fairyring.keyshare.PrivateDecryptionKeyRequest.signal_validators":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyRequest"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PrivateDecryptionKeyRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.PrivateDecryptionKeyRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PrivateDecryptionKeyRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PrivateDecryptionKeyRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PrivateDecryptionKeyRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PrivateDecryptionKeyRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IbcInfo != nil {
			l = options.Size(x.IbcInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Counterparty != nil {
			l = options.Size(x.Counterparty)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PrivateDecryptionKeys) > 0 {
			for _, e := range x.PrivateDecryptionKeys {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Sent {
			n += 2
		}
		if x.SignalValidators {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PrivateDecryptionKeyRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SignalValidators {
			i--
			if x.SignalValidators {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.Sent {
			i--
			if x.Sent {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if len(x.PrivateDecryptionKeys) > 0 {
			for iNdEx := len(x.PrivateDecryptionKeys) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PrivateDecryptionKeys[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.Counterparty != nil {
			encoded, err := options.Marshal(x.Counterparty)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.IbcInfo != nil {
			encoded, err := options.Marshal(x.IbcInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PrivateDecryptionKeyRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrivateDecryptionKeyRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrivateDecryptionKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.IbcInfo == nil {
					x.IbcInfo = &IBCInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.IbcInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Counterparty == nil {
					x.Counterparty = &CounterPartyIBCInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Counterparty); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKeys", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PrivateDecryptionKeys = append(x.PrivateDecryptionKeys, &common.PrivateDecryptionKey{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PrivateDecryptionKeys[len(x.PrivateDecryptionKeys)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Sent = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignalValidators", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.SignalValidators = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fairyring/keyshare/requested_decryption_key.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DecryptionKeyRequest defines the storage structure for general keyshare requests
type DecryptionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity         string               `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey           string               `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IbcInfo          *IBCInfo             `protobuf:"bytes,3,opt,name=ibc_info,json=ibcInfo,proto3" json:"ibc_info,omitempty"` // Used only when the request is made via IBC
	Counterparty     *CounterPartyIBCInfo `protobuf:"bytes,4,opt,name=counterparty,proto3" json:"counterparty,omitempty"`      // Used only when the request is made via IBC
	DecryptionKey    string               `protobuf:"bytes,5,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
	ProposalId       string               `protobuf:"bytes,6,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"` // This is only used when the request is for private governance
	Sent             bool                 `protobuf:"varint,7,opt,name=sent,proto3" json:"sent,omitempty"`
	SignalValidators bool                 `protobuf:"varint,8,opt,name=signal_validators,json=signalValidators,proto3" json:"signal_validators,omitempty"`
}

func (x *DecryptionKeyRequest) Reset() {
	*x = DecryptionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionKeyRequest) ProtoMessage() {}

// Deprecated: Use DecryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*DecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_requested_decryption_key_proto_rawDescGZIP(), []int{0}
}

func (x *DecryptionKeyRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DecryptionKeyRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DecryptionKeyRequest) GetIbcInfo() *IBCInfo {
	if x != nil {
		return x.IbcInfo
	}
	return nil
}

func (x *DecryptionKeyRequest) GetCounterparty() *CounterPartyIBCInfo {
	if x != nil {
		return x.Counterparty
	}
	return nil
}

func (x *DecryptionKeyRequest) GetDecryptionKey() string {
	if x != nil {
		return x.DecryptionKey
	}
	return ""
}

func (x *DecryptionKeyRequest) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *DecryptionKeyRequest) GetSent() bool {
	if x != nil {
		return x.Sent
	}
	return false
}

func (x *DecryptionKeyRequest) GetSignalValidators() bool {
	if x != nil {
		return x.SignalValidators
	}
	return false
}

// IBCInfo defines the structure to verify request for
// general and private keyshares in case the request was made over IBC
type IBCInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId       string `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *IBCInfo) Reset() {
	*x = IBCInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IBCInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IBCInfo) ProtoMessage() {}

// Deprecated: Use IBCInfo.ProtoReflect.Descriptor instead.
func (*IBCInfo) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_requested_decryption_key_proto_rawDescGZIP(), []int{1}
}

func (x *IBCInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *IBCInfo) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *IBCInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *IBCInfo) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

// CounterPartyIBCInfo defines the structure to send general
// and private keyshares if the request was made over IBC
type CounterPartyIBCInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId       string `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (x *CounterPartyIBCInfo) Reset() {
	*x = CounterPartyIBCInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterPartyIBCInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterPartyIBCInfo) ProtoMessage() {}

// Deprecated: Use CounterPartyIBCInfo.ProtoReflect.Descriptor instead.
func (*CounterPartyIBCInfo) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_requested_decryption_key_proto_rawDescGZIP(), []int{2}
}

func (x *CounterPartyIBCInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CounterPartyIBCInfo) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *CounterPartyIBCInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CounterPartyIBCInfo) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

// PrivateDecryptionKeyRequest defines the stroage structure for private
// encrypted and unaggregated decryption key requests
type PrivateDecryptionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity              string                         `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey                string                         `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IbcInfo               *IBCInfo                       `protobuf:"bytes,3,opt,name=ibc_info,json=ibcInfo,proto3" json:"ibc_info,omitempty"` // Used only when the request is made via IBC
	Counterparty          *CounterPartyIBCInfo           `protobuf:"bytes,4,opt,name=counterparty,proto3" json:"counterparty,omitempty"`      // Used only when the request is made via IBC
	PrivateDecryptionKeys []*common.PrivateDecryptionKey `protobuf:"bytes,5,rep,name=private_decryption_keys,json=privateDecryptionKeys,proto3" json:"private_decryption_keys,omitempty"`
	Sent                  bool                           `protobuf:"varint,7,opt,name=sent,proto3" json:"sent,omitempty"`
	SignalValidators      bool                           `protobuf:"varint,8,opt,name=signal_validators,json=signalValidators,proto3" json:"signal_validators,omitempty"`
}

func (x *PrivateDecryptionKeyRequest) Reset() {
	*x = PrivateDecryptionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDecryptionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDecryptionKeyRequest) ProtoMessage() {}

// Deprecated: Use PrivateDecryptionKeyRequest.ProtoReflect.Descriptor instead.
func (*PrivateDecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_requested_decryption_key_proto_rawDescGZIP(), []int{3}
}

func (x *PrivateDecryptionKeyRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PrivateDecryptionKeyRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *PrivateDecryptionKeyRequest) GetIbcInfo() *IBCInfo {
	if x != nil {
		return x.IbcInfo
	}
	return nil
}

func (x *PrivateDecryptionKeyRequest) GetCounterparty() *CounterPartyIBCInfo {
	if x != nil {
		return x.Counterparty
	}
	return nil
}

func (x *PrivateDecryptionKeyRequest) GetPrivateDecryptionKeys() []*common.PrivateDecryptionKey {
	if x != nil {
		return x.PrivateDecryptionKeys
	}
	return nil
}

func (x *PrivateDecryptionKeyRequest) GetSent() bool {
	if x != nil {
		return x.Sent
	}
	return false
}

func (x *PrivateDecryptionKeyRequest) GetSignalValidators() bool {
	if x != nil {
		return x.SignalValidators
	}
	return false
}

var File_fairyring_keyshare_requested_decryption_key_proto protoreflect.FileDescriptor

var file_fairyring_keyshare_requested_decryption_key_proto_rawDesc = []byte{
	0x0a, 0x31, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x23, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x02, 0x0a,
	0x14, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x62, 0x63,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61,
	0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x49, 0x42, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x69, 0x62, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x42, 0x43, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x49, 0x42, 0x43, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x42,
	0x43, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22,
	0xf7, 0x02, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x62, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x49, 0x42, 0x43, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x69, 0x62, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x42, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x61, 0x69, 0x72,
	0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0xc3, 0x01, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x42, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0xa2, 0x02, 0x03, 0x46, 0x4b, 0x58, 0xaa, 0x02,
	0x12, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x68,
	0x61, 0x72, 0x65, 0xca, 0x02, 0x12, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5c,
	0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0xe2, 0x02, 0x1e, 0x46, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x46, 0x61, 0x69, 0x72,
	0x79, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fairyring_keyshare_requested_decryption_key_proto_rawDescOnce sync.Once
	file_fairyring_keyshare_requested_decryption_key_proto_rawDescData = file_fairyring_keyshare_requested_decryption_key_proto_rawDesc
)

func file_fairyring_keyshare_requested_decryption_key_proto_rawDescGZIP() []byte {
	file_fairyring_keyshare_requested_decryption_key_proto_rawDescOnce.Do(func() {
		file_fairyring_keyshare_requested_decryption_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_fairyring_keyshare_requested_decryption_key_proto_rawDescData)
	})
	return file_fairyring_keyshare_requested_decryption_key_proto_rawDescData
}

var file_fairyring_keyshare_requested_decryption_key_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fairyring_keyshare_requested_decryption_key_proto_goTypes = []interface{}{
	(*DecryptionKeyRequest)(nil),        // 0: fairyring.keyshare.DecryptionKeyRequest
	(*IBCInfo)(nil),                     // 1: fairyring.keyshare.IBCInfo
	(*CounterPartyIBCInfo)(nil),         // 2: fairyring.keyshare.CounterPartyIBCInfo
	(*PrivateDecryptionKeyRequest)(nil), // 3: fairyring.keyshare.PrivateDecryptionKeyRequest
	(*common.PrivateDecryptionKey)(nil), // 4: fairyring.common.PrivateDecryptionKey
}
var file_fairyring_keyshare_requested_decryption_key_proto_depIdxs = []int32{
	1, // 0: fairyring.keyshare.DecryptionKeyRequest.ibc_info:type_name -> fairyring.keyshare.IBCInfo
	2, // 1: fairyring.keyshare.DecryptionKeyRequest.counterparty:type_name -> fairyring.keyshare.CounterPartyIBCInfo
	1, // 2: fairyring.keyshare.PrivateDecryptionKeyRequest.ibc_info:type_name -> fairyring.keyshare.IBCInfo
	2, // 3: fairyring.keyshare.PrivateDecryptionKeyRequest.counterparty:type_name -> fairyring.keyshare.CounterPartyIBCInfo
	4, // 4: fairyring.keyshare.PrivateDecryptionKeyRequest.private_decryption_keys:type_name -> fairyring.common.PrivateDecryptionKey
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_fairyring_keyshare_requested_decryption_key_proto_init() }
func file_fairyring_keyshare_requested_decryption_key_proto_init() {
	if File_fairyring_keyshare_requested_decryption_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IBCInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterPartyIBCInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_requested_decryption_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDecryptionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fairyring_keyshare_requested_decryption_key_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fairyring_keyshare_requested_decryption_key_proto_goTypes,
		DependencyIndexes: file_fairyring_keyshare_requested_decryption_key_proto_depIdxs,
		MessageInfos:      file_fairyring_keyshare_requested_decryption_key_proto_msgTypes,
	}.Build()
	File_fairyring_keyshare_requested_decryption_key_proto = out.File
	file_fairyring_keyshare_requested_decryption_key_proto_rawDesc = nil
	file_fairyring_keyshare_requested_decryption_key_proto_goTypes = nil
	file_fairyring_keyshare_requested_decryption_key_proto_depIdxs = nil
}
