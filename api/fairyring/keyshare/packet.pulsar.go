// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package keyshare

import (
	common "github.com/Fairblock/fairyring/api/fairyring/common"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_KeysharePacketData                                       protoreflect.MessageDescriptor
	fd_KeysharePacketData_no_data                               protoreflect.FieldDescriptor
	fd_KeysharePacketData_request_decryption_key_packet         protoreflect.FieldDescriptor
	fd_KeysharePacketData_get_decryption_key_packet             protoreflect.FieldDescriptor
	fd_KeysharePacketData_decryption_key_data_packet            protoreflect.FieldDescriptor
	fd_KeysharePacketData_private_decryption_key_data_packet    protoreflect.FieldDescriptor
	fd_KeysharePacketData_current_keys_packet                   protoreflect.FieldDescriptor
	fd_KeysharePacketData_request_private_decryption_key_packet protoreflect.FieldDescriptor
	fd_KeysharePacketData_get_private_decryption_key_packet     protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_KeysharePacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("KeysharePacketData")
	fd_KeysharePacketData_no_data = md_KeysharePacketData.Fields().ByName("no_data")
	fd_KeysharePacketData_request_decryption_key_packet = md_KeysharePacketData.Fields().ByName("request_decryption_key_packet")
	fd_KeysharePacketData_get_decryption_key_packet = md_KeysharePacketData.Fields().ByName("get_decryption_key_packet")
	fd_KeysharePacketData_decryption_key_data_packet = md_KeysharePacketData.Fields().ByName("decryption_key_data_packet")
	fd_KeysharePacketData_private_decryption_key_data_packet = md_KeysharePacketData.Fields().ByName("private_decryption_key_data_packet")
	fd_KeysharePacketData_current_keys_packet = md_KeysharePacketData.Fields().ByName("current_keys_packet")
	fd_KeysharePacketData_request_private_decryption_key_packet = md_KeysharePacketData.Fields().ByName("request_private_decryption_key_packet")
	fd_KeysharePacketData_get_private_decryption_key_packet = md_KeysharePacketData.Fields().ByName("get_private_decryption_key_packet")
}

var _ protoreflect.Message = (*fastReflection_KeysharePacketData)(nil)

type fastReflection_KeysharePacketData KeysharePacketData

func (x *KeysharePacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_KeysharePacketData)(x)
}

func (x *KeysharePacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_KeysharePacketData_messageType fastReflection_KeysharePacketData_messageType
var _ protoreflect.MessageType = fastReflection_KeysharePacketData_messageType{}

type fastReflection_KeysharePacketData_messageType struct{}

func (x fastReflection_KeysharePacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_KeysharePacketData)(nil)
}
func (x fastReflection_KeysharePacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_KeysharePacketData)
}
func (x fastReflection_KeysharePacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_KeysharePacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_KeysharePacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_KeysharePacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_KeysharePacketData) Type() protoreflect.MessageType {
	return _fastReflection_KeysharePacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_KeysharePacketData) New() protoreflect.Message {
	return new(fastReflection_KeysharePacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_KeysharePacketData) Interface() protoreflect.ProtoMessage {
	return (*KeysharePacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_KeysharePacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Packet != nil {
		switch o := x.Packet.(type) {
		case *KeysharePacketData_NoData:
			v := o.NoData
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_no_data, value) {
				return
			}
		case *KeysharePacketData_RequestDecryptionKeyPacket:
			v := o.RequestDecryptionKeyPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_request_decryption_key_packet, value) {
				return
			}
		case *KeysharePacketData_GetDecryptionKeyPacket:
			v := o.GetDecryptionKeyPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_get_decryption_key_packet, value) {
				return
			}
		case *KeysharePacketData_DecryptionKeyDataPacket:
			v := o.DecryptionKeyDataPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_decryption_key_data_packet, value) {
				return
			}
		case *KeysharePacketData_PrivateDecryptionKeyDataPacket:
			v := o.PrivateDecryptionKeyDataPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_private_decryption_key_data_packet, value) {
				return
			}
		case *KeysharePacketData_CurrentKeysPacket:
			v := o.CurrentKeysPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_current_keys_packet, value) {
				return
			}
		case *KeysharePacketData_RequestPrivateDecryptionKeyPacket:
			v := o.RequestPrivateDecryptionKeyPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_request_private_decryption_key_packet, value) {
				return
			}
		case *KeysharePacketData_GetPrivateDecryptionKeyPacket:
			v := o.GetPrivateDecryptionKeyPacket
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_KeysharePacketData_get_private_decryption_key_packet, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_KeysharePacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.KeysharePacketData.no_data":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_NoData); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.request_decryption_key_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_RequestDecryptionKeyPacket); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.get_decryption_key_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_GetDecryptionKeyPacket); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.decryption_key_data_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_DecryptionKeyDataPacket); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_PrivateDecryptionKeyDataPacket); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.current_keys_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_CurrentKeysPacket); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_RequestPrivateDecryptionKeyPacket); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet":
		if x.Packet == nil {
			return false
		} else if _, ok := x.Packet.(*KeysharePacketData_GetPrivateDecryptionKeyPacket); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.KeysharePacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.KeysharePacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeysharePacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.KeysharePacketData.no_data":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.request_decryption_key_packet":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.get_decryption_key_packet":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.decryption_key_data_packet":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.current_keys_packet":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet":
		x.Packet = nil
	case "fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet":
		x.Packet = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.KeysharePacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.KeysharePacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_KeysharePacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.KeysharePacketData.no_data":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*NoData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_NoData); ok {
			return protoreflect.ValueOfMessage(v.NoData.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*NoData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.request_decryption_key_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*RequestDecryptionKeyPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_RequestDecryptionKeyPacket); ok {
			return protoreflect.ValueOfMessage(v.RequestDecryptionKeyPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*RequestDecryptionKeyPacketData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.get_decryption_key_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*GetDecryptionKeyPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_GetDecryptionKeyPacket); ok {
			return protoreflect.ValueOfMessage(v.GetDecryptionKeyPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*GetDecryptionKeyPacketData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.decryption_key_data_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*DecryptionKeyDataPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_DecryptionKeyDataPacket); ok {
			return protoreflect.ValueOfMessage(v.DecryptionKeyDataPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*DecryptionKeyDataPacketData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*PrivateDecryptionKeyDataPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_PrivateDecryptionKeyDataPacket); ok {
			return protoreflect.ValueOfMessage(v.PrivateDecryptionKeyDataPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*PrivateDecryptionKeyDataPacketData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.current_keys_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*CurrentKeysPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_CurrentKeysPacket); ok {
			return protoreflect.ValueOfMessage(v.CurrentKeysPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*CurrentKeysPacketData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*RequestPrivateDecryptionKeyPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_RequestPrivateDecryptionKeyPacket); ok {
			return protoreflect.ValueOfMessage(v.RequestPrivateDecryptionKeyPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*RequestPrivateDecryptionKeyPacketData)(nil).ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet":
		if x.Packet == nil {
			return protoreflect.ValueOfMessage((*GetPrivateDecryptionKeyPacketData)(nil).ProtoReflect())
		} else if v, ok := x.Packet.(*KeysharePacketData_GetPrivateDecryptionKeyPacket); ok {
			return protoreflect.ValueOfMessage(v.GetPrivateDecryptionKeyPacket.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*GetPrivateDecryptionKeyPacketData)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.KeysharePacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.KeysharePacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeysharePacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.KeysharePacketData.no_data":
		cv := value.Message().Interface().(*NoData)
		x.Packet = &KeysharePacketData_NoData{NoData: cv}
	case "fairyring.keyshare.KeysharePacketData.request_decryption_key_packet":
		cv := value.Message().Interface().(*RequestDecryptionKeyPacketData)
		x.Packet = &KeysharePacketData_RequestDecryptionKeyPacket{RequestDecryptionKeyPacket: cv}
	case "fairyring.keyshare.KeysharePacketData.get_decryption_key_packet":
		cv := value.Message().Interface().(*GetDecryptionKeyPacketData)
		x.Packet = &KeysharePacketData_GetDecryptionKeyPacket{GetDecryptionKeyPacket: cv}
	case "fairyring.keyshare.KeysharePacketData.decryption_key_data_packet":
		cv := value.Message().Interface().(*DecryptionKeyDataPacketData)
		x.Packet = &KeysharePacketData_DecryptionKeyDataPacket{DecryptionKeyDataPacket: cv}
	case "fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet":
		cv := value.Message().Interface().(*PrivateDecryptionKeyDataPacketData)
		x.Packet = &KeysharePacketData_PrivateDecryptionKeyDataPacket{PrivateDecryptionKeyDataPacket: cv}
	case "fairyring.keyshare.KeysharePacketData.current_keys_packet":
		cv := value.Message().Interface().(*CurrentKeysPacketData)
		x.Packet = &KeysharePacketData_CurrentKeysPacket{CurrentKeysPacket: cv}
	case "fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet":
		cv := value.Message().Interface().(*RequestPrivateDecryptionKeyPacketData)
		x.Packet = &KeysharePacketData_RequestPrivateDecryptionKeyPacket{RequestPrivateDecryptionKeyPacket: cv}
	case "fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet":
		cv := value.Message().Interface().(*GetPrivateDecryptionKeyPacketData)
		x.Packet = &KeysharePacketData_GetPrivateDecryptionKeyPacket{GetPrivateDecryptionKeyPacket: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.KeysharePacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.KeysharePacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeysharePacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.KeysharePacketData.no_data":
		if x.Packet == nil {
			value := &NoData{}
			oneofValue := &KeysharePacketData_NoData{NoData: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_NoData:
			return protoreflect.ValueOfMessage(m.NoData.ProtoReflect())
		default:
			value := &NoData{}
			oneofValue := &KeysharePacketData_NoData{NoData: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.request_decryption_key_packet":
		if x.Packet == nil {
			value := &RequestDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_RequestDecryptionKeyPacket{RequestDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_RequestDecryptionKeyPacket:
			return protoreflect.ValueOfMessage(m.RequestDecryptionKeyPacket.ProtoReflect())
		default:
			value := &RequestDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_RequestDecryptionKeyPacket{RequestDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.get_decryption_key_packet":
		if x.Packet == nil {
			value := &GetDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_GetDecryptionKeyPacket{GetDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_GetDecryptionKeyPacket:
			return protoreflect.ValueOfMessage(m.GetDecryptionKeyPacket.ProtoReflect())
		default:
			value := &GetDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_GetDecryptionKeyPacket{GetDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.decryption_key_data_packet":
		if x.Packet == nil {
			value := &DecryptionKeyDataPacketData{}
			oneofValue := &KeysharePacketData_DecryptionKeyDataPacket{DecryptionKeyDataPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_DecryptionKeyDataPacket:
			return protoreflect.ValueOfMessage(m.DecryptionKeyDataPacket.ProtoReflect())
		default:
			value := &DecryptionKeyDataPacketData{}
			oneofValue := &KeysharePacketData_DecryptionKeyDataPacket{DecryptionKeyDataPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet":
		if x.Packet == nil {
			value := &PrivateDecryptionKeyDataPacketData{}
			oneofValue := &KeysharePacketData_PrivateDecryptionKeyDataPacket{PrivateDecryptionKeyDataPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_PrivateDecryptionKeyDataPacket:
			return protoreflect.ValueOfMessage(m.PrivateDecryptionKeyDataPacket.ProtoReflect())
		default:
			value := &PrivateDecryptionKeyDataPacketData{}
			oneofValue := &KeysharePacketData_PrivateDecryptionKeyDataPacket{PrivateDecryptionKeyDataPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.current_keys_packet":
		if x.Packet == nil {
			value := &CurrentKeysPacketData{}
			oneofValue := &KeysharePacketData_CurrentKeysPacket{CurrentKeysPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_CurrentKeysPacket:
			return protoreflect.ValueOfMessage(m.CurrentKeysPacket.ProtoReflect())
		default:
			value := &CurrentKeysPacketData{}
			oneofValue := &KeysharePacketData_CurrentKeysPacket{CurrentKeysPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet":
		if x.Packet == nil {
			value := &RequestPrivateDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_RequestPrivateDecryptionKeyPacket{RequestPrivateDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_RequestPrivateDecryptionKeyPacket:
			return protoreflect.ValueOfMessage(m.RequestPrivateDecryptionKeyPacket.ProtoReflect())
		default:
			value := &RequestPrivateDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_RequestPrivateDecryptionKeyPacket{RequestPrivateDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet":
		if x.Packet == nil {
			value := &GetPrivateDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_GetPrivateDecryptionKeyPacket{GetPrivateDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Packet.(type) {
		case *KeysharePacketData_GetPrivateDecryptionKeyPacket:
			return protoreflect.ValueOfMessage(m.GetPrivateDecryptionKeyPacket.ProtoReflect())
		default:
			value := &GetPrivateDecryptionKeyPacketData{}
			oneofValue := &KeysharePacketData_GetPrivateDecryptionKeyPacket{GetPrivateDecryptionKeyPacket: value}
			x.Packet = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.KeysharePacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.KeysharePacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_KeysharePacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.KeysharePacketData.no_data":
		value := &NoData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.request_decryption_key_packet":
		value := &RequestDecryptionKeyPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.get_decryption_key_packet":
		value := &GetDecryptionKeyPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.decryption_key_data_packet":
		value := &DecryptionKeyDataPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet":
		value := &PrivateDecryptionKeyDataPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.current_keys_packet":
		value := &CurrentKeysPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet":
		value := &RequestPrivateDecryptionKeyPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet":
		value := &GetPrivateDecryptionKeyPacketData{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.KeysharePacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.KeysharePacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_KeysharePacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "fairyring.keyshare.KeysharePacketData.packet":
		if x.Packet == nil {
			return nil
		}
		switch x.Packet.(type) {
		case *KeysharePacketData_NoData:
			return x.Descriptor().Fields().ByName("no_data")
		case *KeysharePacketData_RequestDecryptionKeyPacket:
			return x.Descriptor().Fields().ByName("request_decryption_key_packet")
		case *KeysharePacketData_GetDecryptionKeyPacket:
			return x.Descriptor().Fields().ByName("get_decryption_key_packet")
		case *KeysharePacketData_DecryptionKeyDataPacket:
			return x.Descriptor().Fields().ByName("decryption_key_data_packet")
		case *KeysharePacketData_PrivateDecryptionKeyDataPacket:
			return x.Descriptor().Fields().ByName("private_decryption_key_data_packet")
		case *KeysharePacketData_CurrentKeysPacket:
			return x.Descriptor().Fields().ByName("current_keys_packet")
		case *KeysharePacketData_RequestPrivateDecryptionKeyPacket:
			return x.Descriptor().Fields().ByName("request_private_decryption_key_packet")
		case *KeysharePacketData_GetPrivateDecryptionKeyPacket:
			return x.Descriptor().Fields().ByName("get_private_decryption_key_packet")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.KeysharePacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_KeysharePacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_KeysharePacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_KeysharePacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_KeysharePacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*KeysharePacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Packet.(type) {
		case *KeysharePacketData_NoData:
			if x == nil {
				break
			}
			l = options.Size(x.NoData)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_RequestDecryptionKeyPacket:
			if x == nil {
				break
			}
			l = options.Size(x.RequestDecryptionKeyPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_GetDecryptionKeyPacket:
			if x == nil {
				break
			}
			l = options.Size(x.GetDecryptionKeyPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_DecryptionKeyDataPacket:
			if x == nil {
				break
			}
			l = options.Size(x.DecryptionKeyDataPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_PrivateDecryptionKeyDataPacket:
			if x == nil {
				break
			}
			l = options.Size(x.PrivateDecryptionKeyDataPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_CurrentKeysPacket:
			if x == nil {
				break
			}
			l = options.Size(x.CurrentKeysPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_RequestPrivateDecryptionKeyPacket:
			if x == nil {
				break
			}
			l = options.Size(x.RequestPrivateDecryptionKeyPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		case *KeysharePacketData_GetPrivateDecryptionKeyPacket:
			if x == nil {
				break
			}
			l = options.Size(x.GetPrivateDecryptionKeyPacket)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*KeysharePacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Packet.(type) {
		case *KeysharePacketData_NoData:
			encoded, err := options.Marshal(x.NoData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *KeysharePacketData_RequestDecryptionKeyPacket:
			encoded, err := options.Marshal(x.RequestDecryptionKeyPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *KeysharePacketData_GetDecryptionKeyPacket:
			encoded, err := options.Marshal(x.GetDecryptionKeyPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *KeysharePacketData_DecryptionKeyDataPacket:
			encoded, err := options.Marshal(x.DecryptionKeyDataPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		case *KeysharePacketData_PrivateDecryptionKeyDataPacket:
			encoded, err := options.Marshal(x.PrivateDecryptionKeyDataPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		case *KeysharePacketData_CurrentKeysPacket:
			encoded, err := options.Marshal(x.CurrentKeysPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		case *KeysharePacketData_RequestPrivateDecryptionKeyPacket:
			encoded, err := options.Marshal(x.RequestPrivateDecryptionKeyPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		case *KeysharePacketData_GetPrivateDecryptionKeyPacket:
			encoded, err := options.Marshal(x.GetPrivateDecryptionKeyPacket)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*KeysharePacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeysharePacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: KeysharePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &NoData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_NoData{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestDecryptionKeyPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &RequestDecryptionKeyPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_RequestDecryptionKeyPacket{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GetDecryptionKeyPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &GetDecryptionKeyPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_GetDecryptionKeyPacket{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DecryptionKeyDataPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &DecryptionKeyDataPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_DecryptionKeyDataPacket{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKeyDataPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &PrivateDecryptionKeyDataPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_PrivateDecryptionKeyDataPacket{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentKeysPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &CurrentKeysPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_CurrentKeysPacket{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestPrivateDecryptionKeyPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &RequestPrivateDecryptionKeyPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_RequestPrivateDecryptionKeyPacket{v}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GetPrivateDecryptionKeyPacket", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &GetPrivateDecryptionKeyPacketData{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Packet = &KeysharePacketData_GetPrivateDecryptionKeyPacket{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NoData protoreflect.MessageDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_NoData = File_fairyring_keyshare_packet_proto.Messages().ByName("NoData")
}

var _ protoreflect.Message = (*fastReflection_NoData)(nil)

type fastReflection_NoData NoData

func (x *NoData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NoData)(x)
}

func (x *NoData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NoData_messageType fastReflection_NoData_messageType
var _ protoreflect.MessageType = fastReflection_NoData_messageType{}

type fastReflection_NoData_messageType struct{}

func (x fastReflection_NoData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NoData)(nil)
}
func (x fastReflection_NoData_messageType) New() protoreflect.Message {
	return new(fastReflection_NoData)
}
func (x fastReflection_NoData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NoData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NoData) Descriptor() protoreflect.MessageDescriptor {
	return md_NoData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NoData) Type() protoreflect.MessageType {
	return _fastReflection_NoData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NoData) New() protoreflect.Message {
	return new(fastReflection_NoData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NoData) Interface() protoreflect.ProtoMessage {
	return (*NoData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NoData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NoData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.NoData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.NoData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.NoData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.NoData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NoData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.NoData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.NoData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.NoData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.NoData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.NoData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.NoData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NoData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.NoData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.NoData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NoData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.NoData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NoData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NoData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NoData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NoData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NoData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NoData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NoData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NoData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RequestDecryptionKeyPacketData                 protoreflect.MessageDescriptor
	fd_RequestDecryptionKeyPacketData_requester       protoreflect.FieldDescriptor
	fd_RequestDecryptionKeyPacketData_proposal_id     protoreflect.FieldDescriptor
	fd_RequestDecryptionKeyPacketData_request_id      protoreflect.FieldDescriptor
	fd_RequestDecryptionKeyPacketData_estimated_delay protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_RequestDecryptionKeyPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("RequestDecryptionKeyPacketData")
	fd_RequestDecryptionKeyPacketData_requester = md_RequestDecryptionKeyPacketData.Fields().ByName("requester")
	fd_RequestDecryptionKeyPacketData_proposal_id = md_RequestDecryptionKeyPacketData.Fields().ByName("proposal_id")
	fd_RequestDecryptionKeyPacketData_request_id = md_RequestDecryptionKeyPacketData.Fields().ByName("request_id")
	fd_RequestDecryptionKeyPacketData_estimated_delay = md_RequestDecryptionKeyPacketData.Fields().ByName("estimated_delay")
}

var _ protoreflect.Message = (*fastReflection_RequestDecryptionKeyPacketData)(nil)

type fastReflection_RequestDecryptionKeyPacketData RequestDecryptionKeyPacketData

func (x *RequestDecryptionKeyPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestDecryptionKeyPacketData)(x)
}

func (x *RequestDecryptionKeyPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestDecryptionKeyPacketData_messageType fastReflection_RequestDecryptionKeyPacketData_messageType
var _ protoreflect.MessageType = fastReflection_RequestDecryptionKeyPacketData_messageType{}

type fastReflection_RequestDecryptionKeyPacketData_messageType struct{}

func (x fastReflection_RequestDecryptionKeyPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestDecryptionKeyPacketData)(nil)
}
func (x fastReflection_RequestDecryptionKeyPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestDecryptionKeyPacketData)
}
func (x fastReflection_RequestDecryptionKeyPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestDecryptionKeyPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestDecryptionKeyPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestDecryptionKeyPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestDecryptionKeyPacketData) Type() protoreflect.MessageType {
	return _fastReflection_RequestDecryptionKeyPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestDecryptionKeyPacketData) New() protoreflect.Message {
	return new(fastReflection_RequestDecryptionKeyPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestDecryptionKeyPacketData) Interface() protoreflect.ProtoMessage {
	return (*RequestDecryptionKeyPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestDecryptionKeyPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Requester != "" {
		value := protoreflect.ValueOfString(x.Requester)
		if !f(fd_RequestDecryptionKeyPacketData_requester, value) {
			return
		}
	}
	if x.Id != nil {
		switch o := x.Id.(type) {
		case *RequestDecryptionKeyPacketData_ProposalId:
			v := o.ProposalId
			value := protoreflect.ValueOfString(v)
			if !f(fd_RequestDecryptionKeyPacketData_proposal_id, value) {
				return
			}
		case *RequestDecryptionKeyPacketData_RequestId:
			v := o.RequestId
			value := protoreflect.ValueOfString(v)
			if !f(fd_RequestDecryptionKeyPacketData_request_id, value) {
				return
			}
		}
	}
	if x.EstimatedDelay != nil {
		value := protoreflect.ValueOfMessage(x.EstimatedDelay.ProtoReflect())
		if !f(fd_RequestDecryptionKeyPacketData_estimated_delay, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestDecryptionKeyPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.requester":
		return x.Requester != ""
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.proposal_id":
		if x.Id == nil {
			return false
		} else if _, ok := x.Id.(*RequestDecryptionKeyPacketData_ProposalId); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.request_id":
		if x.Id == nil {
			return false
		} else if _, ok := x.Id.(*RequestDecryptionKeyPacketData_RequestId); ok {
			return true
		} else {
			return false
		}
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay":
		return x.EstimatedDelay != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.requester":
		x.Requester = ""
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.proposal_id":
		x.Id = nil
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.request_id":
		x.Id = nil
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay":
		x.EstimatedDelay = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestDecryptionKeyPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.requester":
		value := x.Requester
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.proposal_id":
		if x.Id == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Id.(*RequestDecryptionKeyPacketData_ProposalId); ok {
			return protoreflect.ValueOfString(v.ProposalId)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.request_id":
		if x.Id == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Id.(*RequestDecryptionKeyPacketData_RequestId); ok {
			return protoreflect.ValueOfString(v.RequestId)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay":
		value := x.EstimatedDelay
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.requester":
		x.Requester = value.Interface().(string)
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.proposal_id":
		cv := value.Interface().(string)
		x.Id = &RequestDecryptionKeyPacketData_ProposalId{ProposalId: cv}
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.request_id":
		cv := value.Interface().(string)
		x.Id = &RequestDecryptionKeyPacketData_RequestId{RequestId: cv}
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay":
		x.EstimatedDelay = value.Message().Interface().(*durationpb.Duration)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay":
		if x.EstimatedDelay == nil {
			x.EstimatedDelay = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.EstimatedDelay.ProtoReflect())
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.requester":
		panic(fmt.Errorf("field requester of message fairyring.keyshare.RequestDecryptionKeyPacketData is not mutable"))
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.proposal_id":
		panic(fmt.Errorf("field proposal_id of message fairyring.keyshare.RequestDecryptionKeyPacketData is not mutable"))
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.request_id":
		panic(fmt.Errorf("field request_id of message fairyring.keyshare.RequestDecryptionKeyPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestDecryptionKeyPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.requester":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.proposal_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.request_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestDecryptionKeyPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketData.id":
		if x.Id == nil {
			return nil
		}
		switch x.Id.(type) {
		case *RequestDecryptionKeyPacketData_ProposalId:
			return x.Descriptor().Fields().ByName("proposal_id")
		case *RequestDecryptionKeyPacketData_RequestId:
			return x.Descriptor().Fields().ByName("request_id")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.RequestDecryptionKeyPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestDecryptionKeyPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestDecryptionKeyPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestDecryptionKeyPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestDecryptionKeyPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Requester)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		switch x := x.Id.(type) {
		case *RequestDecryptionKeyPacketData_ProposalId:
			if x == nil {
				break
			}
			l = len(x.ProposalId)
			n += 1 + l + runtime.Sov(uint64(l))
		case *RequestDecryptionKeyPacketData_RequestId:
			if x == nil {
				break
			}
			l = len(x.RequestId)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EstimatedDelay != nil {
			l = options.Size(x.EstimatedDelay)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestDecryptionKeyPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Id.(type) {
		case *RequestDecryptionKeyPacketData_ProposalId:
			i -= len(x.ProposalId)
			copy(dAtA[i:], x.ProposalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposalId)))
			i--
			dAtA[i] = 0x12
		case *RequestDecryptionKeyPacketData_RequestId:
			i -= len(x.RequestId)
			copy(dAtA[i:], x.RequestId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestId)))
			i--
			dAtA[i] = 0x1a
		}
		if x.EstimatedDelay != nil {
			encoded, err := options.Marshal(x.EstimatedDelay)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Requester) > 0 {
			i -= len(x.Requester)
			copy(dAtA[i:], x.Requester)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Requester)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestDecryptionKeyPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestDecryptionKeyPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requester = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = &RequestDecryptionKeyPacketData_ProposalId{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = &RequestDecryptionKeyPacketData_RequestId{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EstimatedDelay", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EstimatedDelay == nil {
					x.EstimatedDelay = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EstimatedDelay); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RequestPrivateDecryptionKeyPacketData            protoreflect.MessageDescriptor
	fd_RequestPrivateDecryptionKeyPacketData_requester  protoreflect.FieldDescriptor
	fd_RequestPrivateDecryptionKeyPacketData_request_id protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_RequestPrivateDecryptionKeyPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("RequestPrivateDecryptionKeyPacketData")
	fd_RequestPrivateDecryptionKeyPacketData_requester = md_RequestPrivateDecryptionKeyPacketData.Fields().ByName("requester")
	fd_RequestPrivateDecryptionKeyPacketData_request_id = md_RequestPrivateDecryptionKeyPacketData.Fields().ByName("request_id")
}

var _ protoreflect.Message = (*fastReflection_RequestPrivateDecryptionKeyPacketData)(nil)

type fastReflection_RequestPrivateDecryptionKeyPacketData RequestPrivateDecryptionKeyPacketData

func (x *RequestPrivateDecryptionKeyPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestPrivateDecryptionKeyPacketData)(x)
}

func (x *RequestPrivateDecryptionKeyPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestPrivateDecryptionKeyPacketData_messageType fastReflection_RequestPrivateDecryptionKeyPacketData_messageType
var _ protoreflect.MessageType = fastReflection_RequestPrivateDecryptionKeyPacketData_messageType{}

type fastReflection_RequestPrivateDecryptionKeyPacketData_messageType struct{}

func (x fastReflection_RequestPrivateDecryptionKeyPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestPrivateDecryptionKeyPacketData)(nil)
}
func (x fastReflection_RequestPrivateDecryptionKeyPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestPrivateDecryptionKeyPacketData)
}
func (x fastReflection_RequestPrivateDecryptionKeyPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestPrivateDecryptionKeyPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestPrivateDecryptionKeyPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Type() protoreflect.MessageType {
	return _fastReflection_RequestPrivateDecryptionKeyPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) New() protoreflect.Message {
	return new(fastReflection_RequestPrivateDecryptionKeyPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Interface() protoreflect.ProtoMessage {
	return (*RequestPrivateDecryptionKeyPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Requester != "" {
		value := protoreflect.ValueOfString(x.Requester)
		if !f(fd_RequestPrivateDecryptionKeyPacketData_requester, value) {
			return
		}
	}
	if x.RequestId != "" {
		value := protoreflect.ValueOfString(x.RequestId)
		if !f(fd_RequestPrivateDecryptionKeyPacketData_request_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.requester":
		return x.Requester != ""
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.request_id":
		return x.RequestId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.requester":
		x.Requester = ""
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.request_id":
		x.RequestId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.requester":
		value := x.Requester
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.request_id":
		value := x.RequestId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.requester":
		x.Requester = value.Interface().(string)
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.request_id":
		x.RequestId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.requester":
		panic(fmt.Errorf("field requester of message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData is not mutable"))
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.request_id":
		panic(fmt.Errorf("field request_id of message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.requester":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData.request_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.RequestPrivateDecryptionKeyPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestPrivateDecryptionKeyPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Requester)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RequestId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestPrivateDecryptionKeyPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RequestId) > 0 {
			i -= len(x.RequestId)
			copy(dAtA[i:], x.RequestId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Requester) > 0 {
			i -= len(x.Requester)
			copy(dAtA[i:], x.Requester)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Requester)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestPrivateDecryptionKeyPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requester = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RequestPrivateDecryptionKeyPacketAck          protoreflect.MessageDescriptor
	fd_RequestPrivateDecryptionKeyPacketAck_identity protoreflect.FieldDescriptor
	fd_RequestPrivateDecryptionKeyPacketAck_pubkey   protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_RequestPrivateDecryptionKeyPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("RequestPrivateDecryptionKeyPacketAck")
	fd_RequestPrivateDecryptionKeyPacketAck_identity = md_RequestPrivateDecryptionKeyPacketAck.Fields().ByName("identity")
	fd_RequestPrivateDecryptionKeyPacketAck_pubkey = md_RequestPrivateDecryptionKeyPacketAck.Fields().ByName("pubkey")
}

var _ protoreflect.Message = (*fastReflection_RequestPrivateDecryptionKeyPacketAck)(nil)

type fastReflection_RequestPrivateDecryptionKeyPacketAck RequestPrivateDecryptionKeyPacketAck

func (x *RequestPrivateDecryptionKeyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestPrivateDecryptionKeyPacketAck)(x)
}

func (x *RequestPrivateDecryptionKeyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType{}

type fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType struct{}

func (x fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestPrivateDecryptionKeyPacketAck)(nil)
}
func (x fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestPrivateDecryptionKeyPacketAck)
}
func (x fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestPrivateDecryptionKeyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestPrivateDecryptionKeyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_RequestPrivateDecryptionKeyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) New() protoreflect.Message {
	return new(fastReflection_RequestPrivateDecryptionKeyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*RequestPrivateDecryptionKeyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_RequestPrivateDecryptionKeyPacketAck_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_RequestPrivateDecryptionKeyPacketAck_pubkey, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.identity":
		return x.Identity != ""
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.pubkey":
		return x.Pubkey != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.identity":
		x.Identity = ""
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.pubkey":
		x.Pubkey = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.pubkey":
		x.Pubkey = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck is not mutable"))
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck.pubkey":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestPrivateDecryptionKeyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestPrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestPrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestPrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RequestDecryptionKeyPacketAck          protoreflect.MessageDescriptor
	fd_RequestDecryptionKeyPacketAck_identity protoreflect.FieldDescriptor
	fd_RequestDecryptionKeyPacketAck_pubkey   protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_RequestDecryptionKeyPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("RequestDecryptionKeyPacketAck")
	fd_RequestDecryptionKeyPacketAck_identity = md_RequestDecryptionKeyPacketAck.Fields().ByName("identity")
	fd_RequestDecryptionKeyPacketAck_pubkey = md_RequestDecryptionKeyPacketAck.Fields().ByName("pubkey")
}

var _ protoreflect.Message = (*fastReflection_RequestDecryptionKeyPacketAck)(nil)

type fastReflection_RequestDecryptionKeyPacketAck RequestDecryptionKeyPacketAck

func (x *RequestDecryptionKeyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestDecryptionKeyPacketAck)(x)
}

func (x *RequestDecryptionKeyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestDecryptionKeyPacketAck_messageType fastReflection_RequestDecryptionKeyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_RequestDecryptionKeyPacketAck_messageType{}

type fastReflection_RequestDecryptionKeyPacketAck_messageType struct{}

func (x fastReflection_RequestDecryptionKeyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestDecryptionKeyPacketAck)(nil)
}
func (x fastReflection_RequestDecryptionKeyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestDecryptionKeyPacketAck)
}
func (x fastReflection_RequestDecryptionKeyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestDecryptionKeyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestDecryptionKeyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_RequestDecryptionKeyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestDecryptionKeyPacketAck) New() protoreflect.Message {
	return new(fastReflection_RequestDecryptionKeyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*RequestDecryptionKeyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_RequestDecryptionKeyPacketAck_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_RequestDecryptionKeyPacketAck_pubkey, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.identity":
		return x.Identity != ""
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.pubkey":
		return x.Pubkey != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.identity":
		x.Identity = ""
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.pubkey":
		x.Pubkey = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.pubkey":
		x.Pubkey = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.RequestDecryptionKeyPacketAck is not mutable"))
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.keyshare.RequestDecryptionKeyPacketAck is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestDecryptionKeyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.RequestDecryptionKeyPacketAck.pubkey":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.RequestDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.RequestDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestDecryptionKeyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.RequestDecryptionKeyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestDecryptionKeyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestDecryptionKeyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestDecryptionKeyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestDecryptionKeyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestDecryptionKeyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GetDecryptionKeyPacketData          protoreflect.MessageDescriptor
	fd_GetDecryptionKeyPacketData_identity protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_GetDecryptionKeyPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("GetDecryptionKeyPacketData")
	fd_GetDecryptionKeyPacketData_identity = md_GetDecryptionKeyPacketData.Fields().ByName("identity")
}

var _ protoreflect.Message = (*fastReflection_GetDecryptionKeyPacketData)(nil)

type fastReflection_GetDecryptionKeyPacketData GetDecryptionKeyPacketData

func (x *GetDecryptionKeyPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GetDecryptionKeyPacketData)(x)
}

func (x *GetDecryptionKeyPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GetDecryptionKeyPacketData_messageType fastReflection_GetDecryptionKeyPacketData_messageType
var _ protoreflect.MessageType = fastReflection_GetDecryptionKeyPacketData_messageType{}

type fastReflection_GetDecryptionKeyPacketData_messageType struct{}

func (x fastReflection_GetDecryptionKeyPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GetDecryptionKeyPacketData)(nil)
}
func (x fastReflection_GetDecryptionKeyPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_GetDecryptionKeyPacketData)
}
func (x fastReflection_GetDecryptionKeyPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GetDecryptionKeyPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GetDecryptionKeyPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_GetDecryptionKeyPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GetDecryptionKeyPacketData) Type() protoreflect.MessageType {
	return _fastReflection_GetDecryptionKeyPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GetDecryptionKeyPacketData) New() protoreflect.Message {
	return new(fastReflection_GetDecryptionKeyPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GetDecryptionKeyPacketData) Interface() protoreflect.ProtoMessage {
	return (*GetDecryptionKeyPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GetDecryptionKeyPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_GetDecryptionKeyPacketData_identity, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GetDecryptionKeyPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.GetDecryptionKeyPacketData.identity":
		return x.Identity != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.GetDecryptionKeyPacketData.identity":
		x.Identity = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GetDecryptionKeyPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.GetDecryptionKeyPacketData.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.GetDecryptionKeyPacketData.identity":
		x.Identity = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.GetDecryptionKeyPacketData.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.GetDecryptionKeyPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GetDecryptionKeyPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.GetDecryptionKeyPacketData.identity":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GetDecryptionKeyPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.GetDecryptionKeyPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GetDecryptionKeyPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GetDecryptionKeyPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GetDecryptionKeyPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GetDecryptionKeyPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GetDecryptionKeyPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GetDecryptionKeyPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetDecryptionKeyPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GetDecryptionKeyPacketAck protoreflect.MessageDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_GetDecryptionKeyPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("GetDecryptionKeyPacketAck")
}

var _ protoreflect.Message = (*fastReflection_GetDecryptionKeyPacketAck)(nil)

type fastReflection_GetDecryptionKeyPacketAck GetDecryptionKeyPacketAck

func (x *GetDecryptionKeyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GetDecryptionKeyPacketAck)(x)
}

func (x *GetDecryptionKeyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GetDecryptionKeyPacketAck_messageType fastReflection_GetDecryptionKeyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_GetDecryptionKeyPacketAck_messageType{}

type fastReflection_GetDecryptionKeyPacketAck_messageType struct{}

func (x fastReflection_GetDecryptionKeyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GetDecryptionKeyPacketAck)(nil)
}
func (x fastReflection_GetDecryptionKeyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_GetDecryptionKeyPacketAck)
}
func (x fastReflection_GetDecryptionKeyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GetDecryptionKeyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GetDecryptionKeyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_GetDecryptionKeyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GetDecryptionKeyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_GetDecryptionKeyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GetDecryptionKeyPacketAck) New() protoreflect.Message {
	return new(fastReflection_GetDecryptionKeyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GetDecryptionKeyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*GetDecryptionKeyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GetDecryptionKeyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GetDecryptionKeyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GetDecryptionKeyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GetDecryptionKeyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GetDecryptionKeyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.GetDecryptionKeyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GetDecryptionKeyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetDecryptionKeyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GetDecryptionKeyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GetDecryptionKeyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GetDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GetDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GetDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetDecryptionKeyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GetPrivateDecryptionKeyPacketData             protoreflect.MessageDescriptor
	fd_GetPrivateDecryptionKeyPacketData_identity    protoreflect.FieldDescriptor
	fd_GetPrivateDecryptionKeyPacketData_requester   protoreflect.FieldDescriptor
	fd_GetPrivateDecryptionKeyPacketData_secp_pubkey protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_GetPrivateDecryptionKeyPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("GetPrivateDecryptionKeyPacketData")
	fd_GetPrivateDecryptionKeyPacketData_identity = md_GetPrivateDecryptionKeyPacketData.Fields().ByName("identity")
	fd_GetPrivateDecryptionKeyPacketData_requester = md_GetPrivateDecryptionKeyPacketData.Fields().ByName("requester")
	fd_GetPrivateDecryptionKeyPacketData_secp_pubkey = md_GetPrivateDecryptionKeyPacketData.Fields().ByName("secp_pubkey")
}

var _ protoreflect.Message = (*fastReflection_GetPrivateDecryptionKeyPacketData)(nil)

type fastReflection_GetPrivateDecryptionKeyPacketData GetPrivateDecryptionKeyPacketData

func (x *GetPrivateDecryptionKeyPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GetPrivateDecryptionKeyPacketData)(x)
}

func (x *GetPrivateDecryptionKeyPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GetPrivateDecryptionKeyPacketData_messageType fastReflection_GetPrivateDecryptionKeyPacketData_messageType
var _ protoreflect.MessageType = fastReflection_GetPrivateDecryptionKeyPacketData_messageType{}

type fastReflection_GetPrivateDecryptionKeyPacketData_messageType struct{}

func (x fastReflection_GetPrivateDecryptionKeyPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GetPrivateDecryptionKeyPacketData)(nil)
}
func (x fastReflection_GetPrivateDecryptionKeyPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_GetPrivateDecryptionKeyPacketData)
}
func (x fastReflection_GetPrivateDecryptionKeyPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GetPrivateDecryptionKeyPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_GetPrivateDecryptionKeyPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Type() protoreflect.MessageType {
	return _fastReflection_GetPrivateDecryptionKeyPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) New() protoreflect.Message {
	return new(fastReflection_GetPrivateDecryptionKeyPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Interface() protoreflect.ProtoMessage {
	return (*GetPrivateDecryptionKeyPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_GetPrivateDecryptionKeyPacketData_identity, value) {
			return
		}
	}
	if x.Requester != "" {
		value := protoreflect.ValueOfString(x.Requester)
		if !f(fd_GetPrivateDecryptionKeyPacketData_requester, value) {
			return
		}
	}
	if x.SecpPubkey != "" {
		value := protoreflect.ValueOfString(x.SecpPubkey)
		if !f(fd_GetPrivateDecryptionKeyPacketData_secp_pubkey, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.identity":
		return x.Identity != ""
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.requester":
		return x.Requester != ""
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.secp_pubkey":
		return x.SecpPubkey != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.identity":
		x.Identity = ""
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.requester":
		x.Requester = ""
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.secp_pubkey":
		x.SecpPubkey = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.requester":
		value := x.Requester
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.secp_pubkey":
		value := x.SecpPubkey
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.requester":
		x.Requester = value.Interface().(string)
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.secp_pubkey":
		x.SecpPubkey = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.GetPrivateDecryptionKeyPacketData is not mutable"))
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.requester":
		panic(fmt.Errorf("field requester of message fairyring.keyshare.GetPrivateDecryptionKeyPacketData is not mutable"))
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.secp_pubkey":
		panic(fmt.Errorf("field secp_pubkey of message fairyring.keyshare.GetPrivateDecryptionKeyPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.requester":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.GetPrivateDecryptionKeyPacketData.secp_pubkey":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.GetPrivateDecryptionKeyPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GetPrivateDecryptionKeyPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GetPrivateDecryptionKeyPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Requester)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SecpPubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GetPrivateDecryptionKeyPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SecpPubkey) > 0 {
			i -= len(x.SecpPubkey)
			copy(dAtA[i:], x.SecpPubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SecpPubkey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Requester) > 0 {
			i -= len(x.Requester)
			copy(dAtA[i:], x.Requester)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Requester)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GetPrivateDecryptionKeyPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetPrivateDecryptionKeyPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetPrivateDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requester = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SecpPubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SecpPubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GetPrivateDecryptionKeyPacketAck protoreflect.MessageDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_GetPrivateDecryptionKeyPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("GetPrivateDecryptionKeyPacketAck")
}

var _ protoreflect.Message = (*fastReflection_GetPrivateDecryptionKeyPacketAck)(nil)

type fastReflection_GetPrivateDecryptionKeyPacketAck GetPrivateDecryptionKeyPacketAck

func (x *GetPrivateDecryptionKeyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GetPrivateDecryptionKeyPacketAck)(x)
}

func (x *GetPrivateDecryptionKeyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GetPrivateDecryptionKeyPacketAck_messageType fastReflection_GetPrivateDecryptionKeyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_GetPrivateDecryptionKeyPacketAck_messageType{}

type fastReflection_GetPrivateDecryptionKeyPacketAck_messageType struct{}

func (x fastReflection_GetPrivateDecryptionKeyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GetPrivateDecryptionKeyPacketAck)(nil)
}
func (x fastReflection_GetPrivateDecryptionKeyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_GetPrivateDecryptionKeyPacketAck)
}
func (x fastReflection_GetPrivateDecryptionKeyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GetPrivateDecryptionKeyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_GetPrivateDecryptionKeyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_GetPrivateDecryptionKeyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) New() protoreflect.Message {
	return new(fastReflection_GetPrivateDecryptionKeyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*GetPrivateDecryptionKeyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.GetPrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.GetPrivateDecryptionKeyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GetPrivateDecryptionKeyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GetPrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GetPrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GetPrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetPrivateDecryptionKeyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GetPrivateDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DecryptionKeyDataPacketData                protoreflect.MessageDescriptor
	fd_DecryptionKeyDataPacketData_identity       protoreflect.FieldDescriptor
	fd_DecryptionKeyDataPacketData_pubkey         protoreflect.FieldDescriptor
	fd_DecryptionKeyDataPacketData_decryption_key protoreflect.FieldDescriptor
	fd_DecryptionKeyDataPacketData_aggr_height    protoreflect.FieldDescriptor
	fd_DecryptionKeyDataPacketData_proposal_id    protoreflect.FieldDescriptor
	fd_DecryptionKeyDataPacketData_request_id     protoreflect.FieldDescriptor
	fd_DecryptionKeyDataPacketData_retries        protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_DecryptionKeyDataPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("DecryptionKeyDataPacketData")
	fd_DecryptionKeyDataPacketData_identity = md_DecryptionKeyDataPacketData.Fields().ByName("identity")
	fd_DecryptionKeyDataPacketData_pubkey = md_DecryptionKeyDataPacketData.Fields().ByName("pubkey")
	fd_DecryptionKeyDataPacketData_decryption_key = md_DecryptionKeyDataPacketData.Fields().ByName("decryption_key")
	fd_DecryptionKeyDataPacketData_aggr_height = md_DecryptionKeyDataPacketData.Fields().ByName("aggr_height")
	fd_DecryptionKeyDataPacketData_proposal_id = md_DecryptionKeyDataPacketData.Fields().ByName("proposal_id")
	fd_DecryptionKeyDataPacketData_request_id = md_DecryptionKeyDataPacketData.Fields().ByName("request_id")
	fd_DecryptionKeyDataPacketData_retries = md_DecryptionKeyDataPacketData.Fields().ByName("retries")
}

var _ protoreflect.Message = (*fastReflection_DecryptionKeyDataPacketData)(nil)

type fastReflection_DecryptionKeyDataPacketData DecryptionKeyDataPacketData

func (x *DecryptionKeyDataPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DecryptionKeyDataPacketData)(x)
}

func (x *DecryptionKeyDataPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DecryptionKeyDataPacketData_messageType fastReflection_DecryptionKeyDataPacketData_messageType
var _ protoreflect.MessageType = fastReflection_DecryptionKeyDataPacketData_messageType{}

type fastReflection_DecryptionKeyDataPacketData_messageType struct{}

func (x fastReflection_DecryptionKeyDataPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DecryptionKeyDataPacketData)(nil)
}
func (x fastReflection_DecryptionKeyDataPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_DecryptionKeyDataPacketData)
}
func (x fastReflection_DecryptionKeyDataPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DecryptionKeyDataPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DecryptionKeyDataPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_DecryptionKeyDataPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DecryptionKeyDataPacketData) Type() protoreflect.MessageType {
	return _fastReflection_DecryptionKeyDataPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DecryptionKeyDataPacketData) New() protoreflect.Message {
	return new(fastReflection_DecryptionKeyDataPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DecryptionKeyDataPacketData) Interface() protoreflect.ProtoMessage {
	return (*DecryptionKeyDataPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DecryptionKeyDataPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_DecryptionKeyDataPacketData_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_DecryptionKeyDataPacketData_pubkey, value) {
			return
		}
	}
	if x.DecryptionKey != "" {
		value := protoreflect.ValueOfString(x.DecryptionKey)
		if !f(fd_DecryptionKeyDataPacketData_decryption_key, value) {
			return
		}
	}
	if x.AggrHeight != "" {
		value := protoreflect.ValueOfString(x.AggrHeight)
		if !f(fd_DecryptionKeyDataPacketData_aggr_height, value) {
			return
		}
	}
	if x.ProposalId != "" {
		value := protoreflect.ValueOfString(x.ProposalId)
		if !f(fd_DecryptionKeyDataPacketData_proposal_id, value) {
			return
		}
	}
	if x.RequestId != "" {
		value := protoreflect.ValueOfString(x.RequestId)
		if !f(fd_DecryptionKeyDataPacketData_request_id, value) {
			return
		}
	}
	if x.Retries != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Retries)
		if !f(fd_DecryptionKeyDataPacketData_retries, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DecryptionKeyDataPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyDataPacketData.identity":
		return x.Identity != ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.pubkey":
		return x.Pubkey != ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.decryption_key":
		return x.DecryptionKey != ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.aggr_height":
		return x.AggrHeight != ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.proposal_id":
		return x.ProposalId != ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.request_id":
		return x.RequestId != ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.retries":
		return x.Retries != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyDataPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyDataPacketData.identity":
		x.Identity = ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.pubkey":
		x.Pubkey = ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.decryption_key":
		x.DecryptionKey = ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.aggr_height":
		x.AggrHeight = ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.proposal_id":
		x.ProposalId = ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.request_id":
		x.RequestId = ""
	case "fairyring.keyshare.DecryptionKeyDataPacketData.retries":
		x.Retries = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DecryptionKeyDataPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.DecryptionKeyDataPacketData.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.decryption_key":
		value := x.DecryptionKey
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.aggr_height":
		value := x.AggrHeight
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.proposal_id":
		value := x.ProposalId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.request_id":
		value := x.RequestId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.retries":
		value := x.Retries
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyDataPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyDataPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyDataPacketData.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.pubkey":
		x.Pubkey = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.decryption_key":
		x.DecryptionKey = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.aggr_height":
		x.AggrHeight = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.proposal_id":
		x.ProposalId = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.request_id":
		x.RequestId = value.Interface().(string)
	case "fairyring.keyshare.DecryptionKeyDataPacketData.retries":
		x.Retries = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyDataPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyDataPacketData.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.DecryptionKeyDataPacketData.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.DecryptionKeyDataPacketData.decryption_key":
		panic(fmt.Errorf("field decryption_key of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.DecryptionKeyDataPacketData.aggr_height":
		panic(fmt.Errorf("field aggr_height of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.DecryptionKeyDataPacketData.proposal_id":
		panic(fmt.Errorf("field proposal_id of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.DecryptionKeyDataPacketData.request_id":
		panic(fmt.Errorf("field request_id of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.DecryptionKeyDataPacketData.retries":
		panic(fmt.Errorf("field retries of message fairyring.keyshare.DecryptionKeyDataPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DecryptionKeyDataPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.DecryptionKeyDataPacketData.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyDataPacketData.pubkey":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyDataPacketData.decryption_key":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyDataPacketData.aggr_height":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyDataPacketData.proposal_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyDataPacketData.request_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.DecryptionKeyDataPacketData.retries":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DecryptionKeyDataPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.DecryptionKeyDataPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DecryptionKeyDataPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyDataPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DecryptionKeyDataPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DecryptionKeyDataPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DecryptionKeyDataPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DecryptionKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggrHeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ProposalId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RequestId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Retries != 0 {
			n += 1 + runtime.Sov(uint64(x.Retries))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DecryptionKeyDataPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Retries != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Retries))
			i--
			dAtA[i] = 0x38
		}
		if len(x.RequestId) > 0 {
			i -= len(x.RequestId)
			copy(dAtA[i:], x.RequestId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestId)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ProposalId) > 0 {
			i -= len(x.ProposalId)
			copy(dAtA[i:], x.ProposalId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposalId)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.AggrHeight) > 0 {
			i -= len(x.AggrHeight)
			copy(dAtA[i:], x.AggrHeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggrHeight)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.DecryptionKey) > 0 {
			i -= len(x.DecryptionKey)
			copy(dAtA[i:], x.DecryptionKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DecryptionKey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DecryptionKeyDataPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DecryptionKeyDataPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DecryptionKeyDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DecryptionKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggrHeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggrHeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProposalId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
				}
				x.Retries = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Retries |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DecryptionKeyPacketAck protoreflect.MessageDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_DecryptionKeyPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("DecryptionKeyPacketAck")
}

var _ protoreflect.Message = (*fastReflection_DecryptionKeyPacketAck)(nil)

type fastReflection_DecryptionKeyPacketAck DecryptionKeyPacketAck

func (x *DecryptionKeyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DecryptionKeyPacketAck)(x)
}

func (x *DecryptionKeyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DecryptionKeyPacketAck_messageType fastReflection_DecryptionKeyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_DecryptionKeyPacketAck_messageType{}

type fastReflection_DecryptionKeyPacketAck_messageType struct{}

func (x fastReflection_DecryptionKeyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DecryptionKeyPacketAck)(nil)
}
func (x fastReflection_DecryptionKeyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_DecryptionKeyPacketAck)
}
func (x fastReflection_DecryptionKeyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DecryptionKeyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DecryptionKeyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_DecryptionKeyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DecryptionKeyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_DecryptionKeyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DecryptionKeyPacketAck) New() protoreflect.Message {
	return new(fastReflection_DecryptionKeyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DecryptionKeyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*DecryptionKeyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DecryptionKeyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DecryptionKeyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DecryptionKeyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DecryptionKeyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.DecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.DecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DecryptionKeyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.DecryptionKeyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DecryptionKeyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DecryptionKeyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DecryptionKeyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DecryptionKeyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DecryptionKeyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DecryptionKeyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DecryptionKeyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DecryptionKeyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PrivateDecryptionKeyDataPacketData_4_list)(nil)

type _PrivateDecryptionKeyDataPacketData_4_list struct {
	list *[]*common.PrivateDecryptionKey
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.PrivateDecryptionKey)
	(*x.list)[i] = concreteValue
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.PrivateDecryptionKey)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) AppendMutable() protoreflect.Value {
	v := new(common.PrivateDecryptionKey)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) NewElement() protoreflect.Value {
	v := new(common.PrivateDecryptionKey)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PrivateDecryptionKeyDataPacketData_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PrivateDecryptionKeyDataPacketData                        protoreflect.MessageDescriptor
	fd_PrivateDecryptionKeyDataPacketData_identity               protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyDataPacketData_pubkey                 protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyDataPacketData_request_id             protoreflect.FieldDescriptor
	fd_PrivateDecryptionKeyDataPacketData_private_decryption_key protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_PrivateDecryptionKeyDataPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("PrivateDecryptionKeyDataPacketData")
	fd_PrivateDecryptionKeyDataPacketData_identity = md_PrivateDecryptionKeyDataPacketData.Fields().ByName("identity")
	fd_PrivateDecryptionKeyDataPacketData_pubkey = md_PrivateDecryptionKeyDataPacketData.Fields().ByName("pubkey")
	fd_PrivateDecryptionKeyDataPacketData_request_id = md_PrivateDecryptionKeyDataPacketData.Fields().ByName("request_id")
	fd_PrivateDecryptionKeyDataPacketData_private_decryption_key = md_PrivateDecryptionKeyDataPacketData.Fields().ByName("private_decryption_key")
}

var _ protoreflect.Message = (*fastReflection_PrivateDecryptionKeyDataPacketData)(nil)

type fastReflection_PrivateDecryptionKeyDataPacketData PrivateDecryptionKeyDataPacketData

func (x *PrivateDecryptionKeyDataPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PrivateDecryptionKeyDataPacketData)(x)
}

func (x *PrivateDecryptionKeyDataPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PrivateDecryptionKeyDataPacketData_messageType fastReflection_PrivateDecryptionKeyDataPacketData_messageType
var _ protoreflect.MessageType = fastReflection_PrivateDecryptionKeyDataPacketData_messageType{}

type fastReflection_PrivateDecryptionKeyDataPacketData_messageType struct{}

func (x fastReflection_PrivateDecryptionKeyDataPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PrivateDecryptionKeyDataPacketData)(nil)
}
func (x fastReflection_PrivateDecryptionKeyDataPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_PrivateDecryptionKeyDataPacketData)
}
func (x fastReflection_PrivateDecryptionKeyDataPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PrivateDecryptionKeyDataPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_PrivateDecryptionKeyDataPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Type() protoreflect.MessageType {
	return _fastReflection_PrivateDecryptionKeyDataPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) New() protoreflect.Message {
	return new(fastReflection_PrivateDecryptionKeyDataPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Interface() protoreflect.ProtoMessage {
	return (*PrivateDecryptionKeyDataPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Identity != "" {
		value := protoreflect.ValueOfString(x.Identity)
		if !f(fd_PrivateDecryptionKeyDataPacketData_identity, value) {
			return
		}
	}
	if x.Pubkey != "" {
		value := protoreflect.ValueOfString(x.Pubkey)
		if !f(fd_PrivateDecryptionKeyDataPacketData_pubkey, value) {
			return
		}
	}
	if x.RequestId != "" {
		value := protoreflect.ValueOfString(x.RequestId)
		if !f(fd_PrivateDecryptionKeyDataPacketData_request_id, value) {
			return
		}
	}
	if len(x.PrivateDecryptionKey) != 0 {
		value := protoreflect.ValueOfList(&_PrivateDecryptionKeyDataPacketData_4_list{list: &x.PrivateDecryptionKey})
		if !f(fd_PrivateDecryptionKeyDataPacketData_private_decryption_key, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.identity":
		return x.Identity != ""
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.pubkey":
		return x.Pubkey != ""
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.request_id":
		return x.RequestId != ""
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key":
		return len(x.PrivateDecryptionKey) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.identity":
		x.Identity = ""
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.pubkey":
		x.Pubkey = ""
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.request_id":
		x.RequestId = ""
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key":
		x.PrivateDecryptionKey = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.identity":
		value := x.Identity
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.pubkey":
		value := x.Pubkey
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.request_id":
		value := x.RequestId
		return protoreflect.ValueOfString(value)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key":
		if len(x.PrivateDecryptionKey) == 0 {
			return protoreflect.ValueOfList(&_PrivateDecryptionKeyDataPacketData_4_list{})
		}
		listValue := &_PrivateDecryptionKeyDataPacketData_4_list{list: &x.PrivateDecryptionKey}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyDataPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.identity":
		x.Identity = value.Interface().(string)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.pubkey":
		x.Pubkey = value.Interface().(string)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.request_id":
		x.RequestId = value.Interface().(string)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key":
		lv := value.List()
		clv := lv.(*_PrivateDecryptionKeyDataPacketData_4_list)
		x.PrivateDecryptionKey = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key":
		if x.PrivateDecryptionKey == nil {
			x.PrivateDecryptionKey = []*common.PrivateDecryptionKey{}
		}
		value := &_PrivateDecryptionKeyDataPacketData_4_list{list: &x.PrivateDecryptionKey}
		return protoreflect.ValueOfList(value)
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.identity":
		panic(fmt.Errorf("field identity of message fairyring.keyshare.PrivateDecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.pubkey":
		panic(fmt.Errorf("field pubkey of message fairyring.keyshare.PrivateDecryptionKeyDataPacketData is not mutable"))
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.request_id":
		panic(fmt.Errorf("field request_id of message fairyring.keyshare.PrivateDecryptionKeyDataPacketData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.identity":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.pubkey":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.request_id":
		return protoreflect.ValueOfString("")
	case "fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key":
		list := []*common.PrivateDecryptionKey{}
		return protoreflect.ValueOfList(&_PrivateDecryptionKeyDataPacketData_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyDataPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyDataPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.PrivateDecryptionKeyDataPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PrivateDecryptionKeyDataPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PrivateDecryptionKeyDataPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Identity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pubkey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RequestId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PrivateDecryptionKey) > 0 {
			for _, e := range x.PrivateDecryptionKey {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PrivateDecryptionKeyDataPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PrivateDecryptionKey) > 0 {
			for iNdEx := len(x.PrivateDecryptionKey) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PrivateDecryptionKey[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.RequestId) > 0 {
			i -= len(x.RequestId)
			copy(dAtA[i:], x.RequestId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Pubkey) > 0 {
			i -= len(x.Pubkey)
			copy(dAtA[i:], x.Pubkey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pubkey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Identity) > 0 {
			i -= len(x.Identity)
			copy(dAtA[i:], x.Identity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Identity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PrivateDecryptionKeyDataPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrivateDecryptionKeyDataPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrivateDecryptionKeyDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Identity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pubkey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKey", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PrivateDecryptionKey = append(x.PrivateDecryptionKey, &common.PrivateDecryptionKey{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PrivateDecryptionKey[len(x.PrivateDecryptionKey)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PrivateDecryptionKeyPacketAck protoreflect.MessageDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_PrivateDecryptionKeyPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("PrivateDecryptionKeyPacketAck")
}

var _ protoreflect.Message = (*fastReflection_PrivateDecryptionKeyPacketAck)(nil)

type fastReflection_PrivateDecryptionKeyPacketAck PrivateDecryptionKeyPacketAck

func (x *PrivateDecryptionKeyPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PrivateDecryptionKeyPacketAck)(x)
}

func (x *PrivateDecryptionKeyPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PrivateDecryptionKeyPacketAck_messageType fastReflection_PrivateDecryptionKeyPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_PrivateDecryptionKeyPacketAck_messageType{}

type fastReflection_PrivateDecryptionKeyPacketAck_messageType struct{}

func (x fastReflection_PrivateDecryptionKeyPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PrivateDecryptionKeyPacketAck)(nil)
}
func (x fastReflection_PrivateDecryptionKeyPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_PrivateDecryptionKeyPacketAck)
}
func (x fastReflection_PrivateDecryptionKeyPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PrivateDecryptionKeyPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_PrivateDecryptionKeyPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_PrivateDecryptionKeyPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) New() protoreflect.Message {
	return new(fastReflection_PrivateDecryptionKeyPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Interface() protoreflect.ProtoMessage {
	return (*PrivateDecryptionKeyPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.PrivateDecryptionKeyPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.PrivateDecryptionKeyPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.PrivateDecryptionKeyPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PrivateDecryptionKeyPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PrivateDecryptionKeyPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrivateDecryptionKeyPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrivateDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CurrentKeysPacketData protoreflect.MessageDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_CurrentKeysPacketData = File_fairyring_keyshare_packet_proto.Messages().ByName("CurrentKeysPacketData")
}

var _ protoreflect.Message = (*fastReflection_CurrentKeysPacketData)(nil)

type fastReflection_CurrentKeysPacketData CurrentKeysPacketData

func (x *CurrentKeysPacketData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrentKeysPacketData)(x)
}

func (x *CurrentKeysPacketData) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrentKeysPacketData_messageType fastReflection_CurrentKeysPacketData_messageType
var _ protoreflect.MessageType = fastReflection_CurrentKeysPacketData_messageType{}

type fastReflection_CurrentKeysPacketData_messageType struct{}

func (x fastReflection_CurrentKeysPacketData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrentKeysPacketData)(nil)
}
func (x fastReflection_CurrentKeysPacketData_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrentKeysPacketData)
}
func (x fastReflection_CurrentKeysPacketData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentKeysPacketData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrentKeysPacketData) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentKeysPacketData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrentKeysPacketData) Type() protoreflect.MessageType {
	return _fastReflection_CurrentKeysPacketData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrentKeysPacketData) New() protoreflect.Message {
	return new(fastReflection_CurrentKeysPacketData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrentKeysPacketData) Interface() protoreflect.ProtoMessage {
	return (*CurrentKeysPacketData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrentKeysPacketData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrentKeysPacketData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrentKeysPacketData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrentKeysPacketData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketData"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrentKeysPacketData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.CurrentKeysPacketData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrentKeysPacketData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrentKeysPacketData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrentKeysPacketData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrentKeysPacketData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrentKeysPacketData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrentKeysPacketData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentKeysPacketData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentKeysPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CurrentKeysPacketAck            protoreflect.MessageDescriptor
	fd_CurrentKeysPacketAck_active_key protoreflect.FieldDescriptor
	fd_CurrentKeysPacketAck_queued_key protoreflect.FieldDescriptor
)

func init() {
	file_fairyring_keyshare_packet_proto_init()
	md_CurrentKeysPacketAck = File_fairyring_keyshare_packet_proto.Messages().ByName("CurrentKeysPacketAck")
	fd_CurrentKeysPacketAck_active_key = md_CurrentKeysPacketAck.Fields().ByName("active_key")
	fd_CurrentKeysPacketAck_queued_key = md_CurrentKeysPacketAck.Fields().ByName("queued_key")
}

var _ protoreflect.Message = (*fastReflection_CurrentKeysPacketAck)(nil)

type fastReflection_CurrentKeysPacketAck CurrentKeysPacketAck

func (x *CurrentKeysPacketAck) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrentKeysPacketAck)(x)
}

func (x *CurrentKeysPacketAck) slowProtoReflect() protoreflect.Message {
	mi := &file_fairyring_keyshare_packet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrentKeysPacketAck_messageType fastReflection_CurrentKeysPacketAck_messageType
var _ protoreflect.MessageType = fastReflection_CurrentKeysPacketAck_messageType{}

type fastReflection_CurrentKeysPacketAck_messageType struct{}

func (x fastReflection_CurrentKeysPacketAck_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrentKeysPacketAck)(nil)
}
func (x fastReflection_CurrentKeysPacketAck_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrentKeysPacketAck)
}
func (x fastReflection_CurrentKeysPacketAck_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentKeysPacketAck
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrentKeysPacketAck) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentKeysPacketAck
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrentKeysPacketAck) Type() protoreflect.MessageType {
	return _fastReflection_CurrentKeysPacketAck_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrentKeysPacketAck) New() protoreflect.Message {
	return new(fastReflection_CurrentKeysPacketAck)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrentKeysPacketAck) Interface() protoreflect.ProtoMessage {
	return (*CurrentKeysPacketAck)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrentKeysPacketAck) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ActiveKey != nil {
		value := protoreflect.ValueOfMessage(x.ActiveKey.ProtoReflect())
		if !f(fd_CurrentKeysPacketAck_active_key, value) {
			return
		}
	}
	if x.QueuedKey != nil {
		value := protoreflect.ValueOfMessage(x.QueuedKey.ProtoReflect())
		if !f(fd_CurrentKeysPacketAck_queued_key, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrentKeysPacketAck) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fairyring.keyshare.CurrentKeysPacketAck.active_key":
		return x.ActiveKey != nil
	case "fairyring.keyshare.CurrentKeysPacketAck.queued_key":
		return x.QueuedKey != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketAck does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketAck) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fairyring.keyshare.CurrentKeysPacketAck.active_key":
		x.ActiveKey = nil
	case "fairyring.keyshare.CurrentKeysPacketAck.queued_key":
		x.QueuedKey = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketAck does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrentKeysPacketAck) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fairyring.keyshare.CurrentKeysPacketAck.active_key":
		value := x.ActiveKey
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fairyring.keyshare.CurrentKeysPacketAck.queued_key":
		value := x.QueuedKey
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketAck does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketAck) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fairyring.keyshare.CurrentKeysPacketAck.active_key":
		x.ActiveKey = value.Message().Interface().(*common.ActivePublicKey)
	case "fairyring.keyshare.CurrentKeysPacketAck.queued_key":
		x.QueuedKey = value.Message().Interface().(*common.QueuedPublicKey)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketAck does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketAck) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.CurrentKeysPacketAck.active_key":
		if x.ActiveKey == nil {
			x.ActiveKey = new(common.ActivePublicKey)
		}
		return protoreflect.ValueOfMessage(x.ActiveKey.ProtoReflect())
	case "fairyring.keyshare.CurrentKeysPacketAck.queued_key":
		if x.QueuedKey == nil {
			x.QueuedKey = new(common.QueuedPublicKey)
		}
		return protoreflect.ValueOfMessage(x.QueuedKey.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketAck does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrentKeysPacketAck) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fairyring.keyshare.CurrentKeysPacketAck.active_key":
		m := new(common.ActivePublicKey)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fairyring.keyshare.CurrentKeysPacketAck.queued_key":
		m := new(common.QueuedPublicKey)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fairyring.keyshare.CurrentKeysPacketAck"))
		}
		panic(fmt.Errorf("message fairyring.keyshare.CurrentKeysPacketAck does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrentKeysPacketAck) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fairyring.keyshare.CurrentKeysPacketAck", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrentKeysPacketAck) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentKeysPacketAck) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrentKeysPacketAck) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrentKeysPacketAck) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrentKeysPacketAck)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ActiveKey != nil {
			l = options.Size(x.ActiveKey)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.QueuedKey != nil {
			l = options.Size(x.QueuedKey)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrentKeysPacketAck)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.QueuedKey != nil {
			encoded, err := options.Marshal(x.QueuedKey)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.ActiveKey != nil {
			encoded, err := options.Marshal(x.ActiveKey)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrentKeysPacketAck)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentKeysPacketAck: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentKeysPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveKey", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ActiveKey == nil {
					x.ActiveKey = &common.ActivePublicKey{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ActiveKey); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueuedKey", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.QueuedKey == nil {
					x.QueuedKey = &common.QueuedPublicKey{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.QueuedKey); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fairyring/keyshare/packet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeysharePacketData defines all the packet types of the keyshare module
type KeysharePacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// packet can be one of the following types
	//
	// Types that are assignable to Packet:
	//
	//	*KeysharePacketData_NoData
	//	*KeysharePacketData_RequestDecryptionKeyPacket
	//	*KeysharePacketData_GetDecryptionKeyPacket
	//	*KeysharePacketData_DecryptionKeyDataPacket
	//	*KeysharePacketData_PrivateDecryptionKeyDataPacket
	//	*KeysharePacketData_CurrentKeysPacket
	//	*KeysharePacketData_RequestPrivateDecryptionKeyPacket
	//	*KeysharePacketData_GetPrivateDecryptionKeyPacket
	Packet isKeysharePacketData_Packet `protobuf_oneof:"packet"`
}

func (x *KeysharePacketData) Reset() {
	*x = KeysharePacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysharePacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysharePacketData) ProtoMessage() {}

// Deprecated: Use KeysharePacketData.ProtoReflect.Descriptor instead.
func (*KeysharePacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{0}
}

func (x *KeysharePacketData) GetPacket() isKeysharePacketData_Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *KeysharePacketData) GetNoData() *NoData {
	if x, ok := x.GetPacket().(*KeysharePacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (x *KeysharePacketData) GetRequestDecryptionKeyPacket() *RequestDecryptionKeyPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_RequestDecryptionKeyPacket); ok {
		return x.RequestDecryptionKeyPacket
	}
	return nil
}

func (x *KeysharePacketData) GetGetDecryptionKeyPacket() *GetDecryptionKeyPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_GetDecryptionKeyPacket); ok {
		return x.GetDecryptionKeyPacket
	}
	return nil
}

func (x *KeysharePacketData) GetDecryptionKeyDataPacket() *DecryptionKeyDataPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_DecryptionKeyDataPacket); ok {
		return x.DecryptionKeyDataPacket
	}
	return nil
}

func (x *KeysharePacketData) GetPrivateDecryptionKeyDataPacket() *PrivateDecryptionKeyDataPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_PrivateDecryptionKeyDataPacket); ok {
		return x.PrivateDecryptionKeyDataPacket
	}
	return nil
}

func (x *KeysharePacketData) GetCurrentKeysPacket() *CurrentKeysPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_CurrentKeysPacket); ok {
		return x.CurrentKeysPacket
	}
	return nil
}

func (x *KeysharePacketData) GetRequestPrivateDecryptionKeyPacket() *RequestPrivateDecryptionKeyPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_RequestPrivateDecryptionKeyPacket); ok {
		return x.RequestPrivateDecryptionKeyPacket
	}
	return nil
}

func (x *KeysharePacketData) GetGetPrivateDecryptionKeyPacket() *GetPrivateDecryptionKeyPacketData {
	if x, ok := x.GetPacket().(*KeysharePacketData_GetPrivateDecryptionKeyPacket); ok {
		return x.GetPrivateDecryptionKeyPacket
	}
	return nil
}

type isKeysharePacketData_Packet interface {
	isKeysharePacketData_Packet()
}

type KeysharePacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=no_data,json=noData,proto3,oneof"`
}

type KeysharePacketData_RequestDecryptionKeyPacket struct {
	RequestDecryptionKeyPacket *RequestDecryptionKeyPacketData `protobuf:"bytes,2,opt,name=request_decryption_key_packet,json=requestDecryptionKeyPacket,proto3,oneof"`
}

type KeysharePacketData_GetDecryptionKeyPacket struct {
	GetDecryptionKeyPacket *GetDecryptionKeyPacketData `protobuf:"bytes,3,opt,name=get_decryption_key_packet,json=getDecryptionKeyPacket,proto3,oneof"`
}

type KeysharePacketData_DecryptionKeyDataPacket struct {
	DecryptionKeyDataPacket *DecryptionKeyDataPacketData `protobuf:"bytes,4,opt,name=decryption_key_data_packet,json=decryptionKeyDataPacket,proto3,oneof"`
}

type KeysharePacketData_PrivateDecryptionKeyDataPacket struct {
	PrivateDecryptionKeyDataPacket *PrivateDecryptionKeyDataPacketData `protobuf:"bytes,5,opt,name=private_decryption_key_data_packet,json=privateDecryptionKeyDataPacket,proto3,oneof"`
}

type KeysharePacketData_CurrentKeysPacket struct {
	CurrentKeysPacket *CurrentKeysPacketData `protobuf:"bytes,6,opt,name=current_keys_packet,json=currentKeysPacket,proto3,oneof"`
}

type KeysharePacketData_RequestPrivateDecryptionKeyPacket struct {
	RequestPrivateDecryptionKeyPacket *RequestPrivateDecryptionKeyPacketData `protobuf:"bytes,7,opt,name=request_private_decryption_key_packet,json=requestPrivateDecryptionKeyPacket,proto3,oneof"`
}

type KeysharePacketData_GetPrivateDecryptionKeyPacket struct {
	GetPrivateDecryptionKeyPacket *GetPrivateDecryptionKeyPacketData `protobuf:"bytes,8,opt,name=get_private_decryption_key_packet,json=getPrivateDecryptionKeyPacket,proto3,oneof"`
}

func (*KeysharePacketData_NoData) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_RequestDecryptionKeyPacket) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_GetDecryptionKeyPacket) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_DecryptionKeyDataPacket) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_PrivateDecryptionKeyDataPacket) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_CurrentKeysPacket) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_RequestPrivateDecryptionKeyPacket) isKeysharePacketData_Packet() {}

func (*KeysharePacketData_GetPrivateDecryptionKeyPacket) isKeysharePacketData_Packet() {}

// NoData defines a blank packet
type NoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoData) Reset() {
	*x = NoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoData) ProtoMessage() {}

// Deprecated: Use NoData.ProtoReflect.Descriptor instead.
func (*NoData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{1}
}

// RequestDecryptionKeyPacketData defines a struct for the packet payload
type RequestDecryptionKeyPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requester string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	// id can either be a request id or a proposal id
	//
	// Types that are assignable to Id:
	//
	//	*RequestDecryptionKeyPacketData_ProposalId
	//	*RequestDecryptionKeyPacketData_RequestId
	Id             isRequestDecryptionKeyPacketData_Id `protobuf_oneof:"id"`
	EstimatedDelay *durationpb.Duration                `protobuf:"bytes,4,opt,name=estimated_delay,json=estimatedDelay,proto3" json:"estimated_delay,omitempty"`
}

func (x *RequestDecryptionKeyPacketData) Reset() {
	*x = RequestDecryptionKeyPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDecryptionKeyPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDecryptionKeyPacketData) ProtoMessage() {}

// Deprecated: Use RequestDecryptionKeyPacketData.ProtoReflect.Descriptor instead.
func (*RequestDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{2}
}

func (x *RequestDecryptionKeyPacketData) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *RequestDecryptionKeyPacketData) GetId() isRequestDecryptionKeyPacketData_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RequestDecryptionKeyPacketData) GetProposalId() string {
	if x, ok := x.GetId().(*RequestDecryptionKeyPacketData_ProposalId); ok {
		return x.ProposalId
	}
	return ""
}

func (x *RequestDecryptionKeyPacketData) GetRequestId() string {
	if x, ok := x.GetId().(*RequestDecryptionKeyPacketData_RequestId); ok {
		return x.RequestId
	}
	return ""
}

func (x *RequestDecryptionKeyPacketData) GetEstimatedDelay() *durationpb.Duration {
	if x != nil {
		return x.EstimatedDelay
	}
	return nil
}

type isRequestDecryptionKeyPacketData_Id interface {
	isRequestDecryptionKeyPacketData_Id()
}

type RequestDecryptionKeyPacketData_ProposalId struct {
	ProposalId string `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3,oneof"`
}

type RequestDecryptionKeyPacketData_RequestId struct {
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3,oneof"`
}

func (*RequestDecryptionKeyPacketData_ProposalId) isRequestDecryptionKeyPacketData_Id() {}

func (*RequestDecryptionKeyPacketData_RequestId) isRequestDecryptionKeyPacketData_Id() {}

// RequestPrivateDecryptionKeyPacketData defines a struct for the packet payload
type RequestPrivateDecryptionKeyPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requester string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *RequestPrivateDecryptionKeyPacketData) Reset() {
	*x = RequestPrivateDecryptionKeyPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPrivateDecryptionKeyPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPrivateDecryptionKeyPacketData) ProtoMessage() {}

// Deprecated: Use RequestPrivateDecryptionKeyPacketData.ProtoReflect.Descriptor instead.
func (*RequestPrivateDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{3}
}

func (x *RequestPrivateDecryptionKeyPacketData) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *RequestPrivateDecryptionKeyPacketData) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// RequestPrivateDecryptionKeyPacketAck defines a struct for the packet acknowledgment
type RequestPrivateDecryptionKeyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *RequestPrivateDecryptionKeyPacketAck) Reset() {
	*x = RequestPrivateDecryptionKeyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPrivateDecryptionKeyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPrivateDecryptionKeyPacketAck) ProtoMessage() {}

// Deprecated: Use RequestPrivateDecryptionKeyPacketAck.ProtoReflect.Descriptor instead.
func (*RequestPrivateDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{4}
}

func (x *RequestPrivateDecryptionKeyPacketAck) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RequestPrivateDecryptionKeyPacketAck) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

// RequestDecryptionKeyPacketAck defines a struct for the packet acknowledgment
type RequestDecryptionKeyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *RequestDecryptionKeyPacketAck) Reset() {
	*x = RequestDecryptionKeyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDecryptionKeyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDecryptionKeyPacketAck) ProtoMessage() {}

// Deprecated: Use RequestDecryptionKeyPacketAck.ProtoReflect.Descriptor instead.
func (*RequestDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{5}
}

func (x *RequestDecryptionKeyPacketAck) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *RequestDecryptionKeyPacketAck) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

// GetDecryptionKeyPacketData defines a struct for the packet payload
type GetDecryptionKeyPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *GetDecryptionKeyPacketData) Reset() {
	*x = GetDecryptionKeyPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecryptionKeyPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecryptionKeyPacketData) ProtoMessage() {}

// Deprecated: Use GetDecryptionKeyPacketData.ProtoReflect.Descriptor instead.
func (*GetDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{6}
}

func (x *GetDecryptionKeyPacketData) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// GetDecryptionKeyPacketAck defines a struct for the packet acknowledgment
type GetDecryptionKeyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDecryptionKeyPacketAck) Reset() {
	*x = GetDecryptionKeyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecryptionKeyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecryptionKeyPacketAck) ProtoMessage() {}

// Deprecated: Use GetDecryptionKeyPacketAck.ProtoReflect.Descriptor instead.
func (*GetDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{7}
}

// GetPrivateDecryptionKeyPacketData defines a struct for the packet payload
type GetPrivateDecryptionKeyPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity   string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Requester  string `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	SecpPubkey string `protobuf:"bytes,3,opt,name=secp_pubkey,json=secpPubkey,proto3" json:"secp_pubkey,omitempty"`
}

func (x *GetPrivateDecryptionKeyPacketData) Reset() {
	*x = GetPrivateDecryptionKeyPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateDecryptionKeyPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateDecryptionKeyPacketData) ProtoMessage() {}

// Deprecated: Use GetPrivateDecryptionKeyPacketData.ProtoReflect.Descriptor instead.
func (*GetPrivateDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{8}
}

func (x *GetPrivateDecryptionKeyPacketData) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *GetPrivateDecryptionKeyPacketData) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *GetPrivateDecryptionKeyPacketData) GetSecpPubkey() string {
	if x != nil {
		return x.SecpPubkey
	}
	return ""
}

// GetPrivateKeysharePacketAck defines a struct for the packet acknowledgment
type GetPrivateDecryptionKeyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPrivateDecryptionKeyPacketAck) Reset() {
	*x = GetPrivateDecryptionKeyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateDecryptionKeyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateDecryptionKeyPacketAck) ProtoMessage() {}

// Deprecated: Use GetPrivateDecryptionKeyPacketAck.ProtoReflect.Descriptor instead.
func (*GetPrivateDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{9}
}

// DecryptionKeyDataPacketData defines a struct for the packet payload
type DecryptionKeyDataPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey        string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	DecryptionKey string `protobuf:"bytes,3,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
	AggrHeight    string `protobuf:"bytes,4,opt,name=aggr_height,json=aggrHeight,proto3" json:"aggr_height,omitempty"`
	ProposalId    string `protobuf:"bytes,5,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"` // used for private governance
	RequestId     string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`    // might be useful to destination chains to sort out the response
	Retries       uint64 `protobuf:"varint,7,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (x *DecryptionKeyDataPacketData) Reset() {
	*x = DecryptionKeyDataPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptionKeyDataPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionKeyDataPacketData) ProtoMessage() {}

// Deprecated: Use DecryptionKeyDataPacketData.ProtoReflect.Descriptor instead.
func (*DecryptionKeyDataPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{10}
}

func (x *DecryptionKeyDataPacketData) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *DecryptionKeyDataPacketData) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *DecryptionKeyDataPacketData) GetDecryptionKey() string {
	if x != nil {
		return x.DecryptionKey
	}
	return ""
}

func (x *DecryptionKeyDataPacketData) GetAggrHeight() string {
	if x != nil {
		return x.AggrHeight
	}
	return ""
}

func (x *DecryptionKeyDataPacketData) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *DecryptionKeyDataPacketData) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DecryptionKeyDataPacketData) GetRetries() uint64 {
	if x != nil {
		return x.Retries
	}
	return 0
}

// DecryptionKeyPacketAck defines a struct for the packet acknowledgment
type DecryptionKeyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DecryptionKeyPacketAck) Reset() {
	*x = DecryptionKeyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptionKeyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptionKeyPacketAck) ProtoMessage() {}

// Deprecated: Use DecryptionKeyPacketAck.ProtoReflect.Descriptor instead.
func (*DecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{11}
}

// PrivateDecryptionKeyDataPacketData defines a struct for the packet payload
type PrivateDecryptionKeyDataPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity             string                         `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey               string                         `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	RequestId            string                         `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PrivateDecryptionKey []*common.PrivateDecryptionKey `protobuf:"bytes,4,rep,name=private_decryption_key,json=privateDecryptionKey,proto3" json:"private_decryption_key,omitempty"`
}

func (x *PrivateDecryptionKeyDataPacketData) Reset() {
	*x = PrivateDecryptionKeyDataPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDecryptionKeyDataPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDecryptionKeyDataPacketData) ProtoMessage() {}

// Deprecated: Use PrivateDecryptionKeyDataPacketData.ProtoReflect.Descriptor instead.
func (*PrivateDecryptionKeyDataPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{12}
}

func (x *PrivateDecryptionKeyDataPacketData) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PrivateDecryptionKeyDataPacketData) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *PrivateDecryptionKeyDataPacketData) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PrivateDecryptionKeyDataPacketData) GetPrivateDecryptionKey() []*common.PrivateDecryptionKey {
	if x != nil {
		return x.PrivateDecryptionKey
	}
	return nil
}

// PrivateDecryptionKeyPacketAck defines a struct for the packet payload
type PrivateDecryptionKeyPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrivateDecryptionKeyPacketAck) Reset() {
	*x = PrivateDecryptionKeyPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDecryptionKeyPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDecryptionKeyPacketAck) ProtoMessage() {}

// Deprecated: Use PrivateDecryptionKeyPacketAck.ProtoReflect.Descriptor instead.
func (*PrivateDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{13}
}

// CurrentKeysPacketData defines a struct for the packet payload
type CurrentKeysPacketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrentKeysPacketData) Reset() {
	*x = CurrentKeysPacketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentKeysPacketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentKeysPacketData) ProtoMessage() {}

// Deprecated: Use CurrentKeysPacketData.ProtoReflect.Descriptor instead.
func (*CurrentKeysPacketData) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{14}
}

// CurrentKeysPacketAck defines a struct for the packet acknowledgment
type CurrentKeysPacketAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveKey *common.ActivePublicKey `protobuf:"bytes,1,opt,name=active_key,json=activeKey,proto3" json:"active_key,omitempty"`
	QueuedKey *common.QueuedPublicKey `protobuf:"bytes,2,opt,name=queued_key,json=queuedKey,proto3" json:"queued_key,omitempty"`
}

func (x *CurrentKeysPacketAck) Reset() {
	*x = CurrentKeysPacketAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fairyring_keyshare_packet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentKeysPacketAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentKeysPacketAck) ProtoMessage() {}

// Deprecated: Use CurrentKeysPacketAck.ProtoReflect.Descriptor instead.
func (*CurrentKeysPacketAck) Descriptor() ([]byte, []int) {
	return file_fairyring_keyshare_packet_proto_rawDescGZIP(), []int{15}
}

func (x *CurrentKeysPacketAck) GetActiveKey() *common.ActivePublicKey {
	if x != nil {
		return x.ActiveKey
	}
	return nil
}

func (x *CurrentKeysPacketAck) GetQueuedKey() *common.QueuedPublicKey {
	if x != nil {
		return x.QueuedKey
	}
	return nil
}

var File_fairyring_keyshare_packet_proto protoreflect.FileDescriptor

var file_fairyring_keyshare_packet_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x66, 0x61, 0x69,
	0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa3, 0x07, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4e, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x77,
	0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x61, 0x69,
	0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65,
	0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x6e, 0x0a, 0x1a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x22, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1d, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x08, 0x0a, 0x06, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xd2, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f, 0x01, 0x52,
	0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42,
	0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x24, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x53, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x38, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x6b, 0x22, 0x7e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x70, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x22, 0x22, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x22, 0xf3, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b, 0x22, 0xd5, 0x01, 0x0a, 0x22, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22,
	0x1f, 0x0a, 0x1d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x6b,
	0x22, 0x17, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x79,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x42, 0xb3, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x66,
	0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x42, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x68, 0x61, 0x72, 0x65, 0xa2, 0x02, 0x03, 0x46, 0x4b, 0x58, 0xaa, 0x02, 0x12, 0x46, 0x61,
	0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0xca, 0x02, 0x12, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4b, 0x65, 0x79,
	0x73, 0x68, 0x61, 0x72, 0x65, 0xe2, 0x02, 0x1e, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69, 0x6e,
	0x67, 0x5c, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x46, 0x61, 0x69, 0x72, 0x79, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x3a, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fairyring_keyshare_packet_proto_rawDescOnce sync.Once
	file_fairyring_keyshare_packet_proto_rawDescData = file_fairyring_keyshare_packet_proto_rawDesc
)

func file_fairyring_keyshare_packet_proto_rawDescGZIP() []byte {
	file_fairyring_keyshare_packet_proto_rawDescOnce.Do(func() {
		file_fairyring_keyshare_packet_proto_rawDescData = protoimpl.X.CompressGZIP(file_fairyring_keyshare_packet_proto_rawDescData)
	})
	return file_fairyring_keyshare_packet_proto_rawDescData
}

var file_fairyring_keyshare_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_fairyring_keyshare_packet_proto_goTypes = []interface{}{
	(*KeysharePacketData)(nil),                    // 0: fairyring.keyshare.KeysharePacketData
	(*NoData)(nil),                                // 1: fairyring.keyshare.NoData
	(*RequestDecryptionKeyPacketData)(nil),        // 2: fairyring.keyshare.RequestDecryptionKeyPacketData
	(*RequestPrivateDecryptionKeyPacketData)(nil), // 3: fairyring.keyshare.RequestPrivateDecryptionKeyPacketData
	(*RequestPrivateDecryptionKeyPacketAck)(nil),  // 4: fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck
	(*RequestDecryptionKeyPacketAck)(nil),         // 5: fairyring.keyshare.RequestDecryptionKeyPacketAck
	(*GetDecryptionKeyPacketData)(nil),            // 6: fairyring.keyshare.GetDecryptionKeyPacketData
	(*GetDecryptionKeyPacketAck)(nil),             // 7: fairyring.keyshare.GetDecryptionKeyPacketAck
	(*GetPrivateDecryptionKeyPacketData)(nil),     // 8: fairyring.keyshare.GetPrivateDecryptionKeyPacketData
	(*GetPrivateDecryptionKeyPacketAck)(nil),      // 9: fairyring.keyshare.GetPrivateDecryptionKeyPacketAck
	(*DecryptionKeyDataPacketData)(nil),           // 10: fairyring.keyshare.DecryptionKeyDataPacketData
	(*DecryptionKeyPacketAck)(nil),                // 11: fairyring.keyshare.DecryptionKeyPacketAck
	(*PrivateDecryptionKeyDataPacketData)(nil),    // 12: fairyring.keyshare.PrivateDecryptionKeyDataPacketData
	(*PrivateDecryptionKeyPacketAck)(nil),         // 13: fairyring.keyshare.PrivateDecryptionKeyPacketAck
	(*CurrentKeysPacketData)(nil),                 // 14: fairyring.keyshare.CurrentKeysPacketData
	(*CurrentKeysPacketAck)(nil),                  // 15: fairyring.keyshare.CurrentKeysPacketAck
	(*durationpb.Duration)(nil),                   // 16: google.protobuf.Duration
	(*common.PrivateDecryptionKey)(nil),           // 17: fairyring.common.PrivateDecryptionKey
	(*common.ActivePublicKey)(nil),                // 18: fairyring.common.ActivePublicKey
	(*common.QueuedPublicKey)(nil),                // 19: fairyring.common.QueuedPublicKey
}
var file_fairyring_keyshare_packet_proto_depIdxs = []int32{
	1,  // 0: fairyring.keyshare.KeysharePacketData.no_data:type_name -> fairyring.keyshare.NoData
	2,  // 1: fairyring.keyshare.KeysharePacketData.request_decryption_key_packet:type_name -> fairyring.keyshare.RequestDecryptionKeyPacketData
	6,  // 2: fairyring.keyshare.KeysharePacketData.get_decryption_key_packet:type_name -> fairyring.keyshare.GetDecryptionKeyPacketData
	10, // 3: fairyring.keyshare.KeysharePacketData.decryption_key_data_packet:type_name -> fairyring.keyshare.DecryptionKeyDataPacketData
	12, // 4: fairyring.keyshare.KeysharePacketData.private_decryption_key_data_packet:type_name -> fairyring.keyshare.PrivateDecryptionKeyDataPacketData
	14, // 5: fairyring.keyshare.KeysharePacketData.current_keys_packet:type_name -> fairyring.keyshare.CurrentKeysPacketData
	3,  // 6: fairyring.keyshare.KeysharePacketData.request_private_decryption_key_packet:type_name -> fairyring.keyshare.RequestPrivateDecryptionKeyPacketData
	8,  // 7: fairyring.keyshare.KeysharePacketData.get_private_decryption_key_packet:type_name -> fairyring.keyshare.GetPrivateDecryptionKeyPacketData
	16, // 8: fairyring.keyshare.RequestDecryptionKeyPacketData.estimated_delay:type_name -> google.protobuf.Duration
	17, // 9: fairyring.keyshare.PrivateDecryptionKeyDataPacketData.private_decryption_key:type_name -> fairyring.common.PrivateDecryptionKey
	18, // 10: fairyring.keyshare.CurrentKeysPacketAck.active_key:type_name -> fairyring.common.ActivePublicKey
	19, // 11: fairyring.keyshare.CurrentKeysPacketAck.queued_key:type_name -> fairyring.common.QueuedPublicKey
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_fairyring_keyshare_packet_proto_init() }
func file_fairyring_keyshare_packet_proto_init() {
	if File_fairyring_keyshare_packet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fairyring_keyshare_packet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysharePacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDecryptionKeyPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPrivateDecryptionKeyPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPrivateDecryptionKeyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDecryptionKeyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecryptionKeyPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecryptionKeyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivateDecryptionKeyPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivateDecryptionKeyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptionKeyDataPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptionKeyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDecryptionKeyDataPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDecryptionKeyPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentKeysPacketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fairyring_keyshare_packet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentKeysPacketAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fairyring_keyshare_packet_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*KeysharePacketData_NoData)(nil),
		(*KeysharePacketData_RequestDecryptionKeyPacket)(nil),
		(*KeysharePacketData_GetDecryptionKeyPacket)(nil),
		(*KeysharePacketData_DecryptionKeyDataPacket)(nil),
		(*KeysharePacketData_PrivateDecryptionKeyDataPacket)(nil),
		(*KeysharePacketData_CurrentKeysPacket)(nil),
		(*KeysharePacketData_RequestPrivateDecryptionKeyPacket)(nil),
		(*KeysharePacketData_GetPrivateDecryptionKeyPacket)(nil),
	}
	file_fairyring_keyshare_packet_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RequestDecryptionKeyPacketData_ProposalId)(nil),
		(*RequestDecryptionKeyPacketData_RequestId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fairyring_keyshare_packet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fairyring_keyshare_packet_proto_goTypes,
		DependencyIndexes: file_fairyring_keyshare_packet_proto_depIdxs,
		MessageInfos:      file_fairyring_keyshare_packet_proto_msgTypes,
	}.Build()
	File_fairyring_keyshare_packet_proto = out.File
	file_fairyring_keyshare_packet_proto_rawDesc = nil
	file_fairyring_keyshare_packet_proto_goTypes = nil
	file_fairyring_keyshare_packet_proto_depIdxs = nil
}
