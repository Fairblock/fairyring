// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/keyshare/requested_decryption_key.proto

package types

import (
	fmt "fmt"
	types "github.com/Fairblock/fairyring/x/common/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DecryptionKeyRequest defines the storage structure for general keyshare requests
type DecryptionKeyRequest struct {
	Identity         string               `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey           string               `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IbcInfo          *IBCInfo             `protobuf:"bytes,3,opt,name=ibc_info,json=ibcInfo,proto3" json:"ibc_info,omitempty"`
	Counterparty     *CounterPartyIBCInfo `protobuf:"bytes,4,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	DecryptionKey    string               `protobuf:"bytes,5,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
	ProposalId       string               `protobuf:"bytes,6,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Sent             bool                 `protobuf:"varint,7,opt,name=sent,proto3" json:"sent,omitempty"`
	SignalValidators bool                 `protobuf:"varint,8,opt,name=signal_validators,json=signalValidators,proto3" json:"signal_validators,omitempty"`
}

func (m *DecryptionKeyRequest) Reset()         { *m = DecryptionKeyRequest{} }
func (m *DecryptionKeyRequest) String() string { return proto.CompactTextString(m) }
func (*DecryptionKeyRequest) ProtoMessage()    {}
func (*DecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558a490dc8740931, []int{0}
}
func (m *DecryptionKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecryptionKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecryptionKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecryptionKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptionKeyRequest.Merge(m, src)
}
func (m *DecryptionKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DecryptionKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptionKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptionKeyRequest proto.InternalMessageInfo

func (m *DecryptionKeyRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *DecryptionKeyRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DecryptionKeyRequest) GetIbcInfo() *IBCInfo {
	if m != nil {
		return m.IbcInfo
	}
	return nil
}

func (m *DecryptionKeyRequest) GetCounterparty() *CounterPartyIBCInfo {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *DecryptionKeyRequest) GetDecryptionKey() string {
	if m != nil {
		return m.DecryptionKey
	}
	return ""
}

func (m *DecryptionKeyRequest) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *DecryptionKeyRequest) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

func (m *DecryptionKeyRequest) GetSignalValidators() bool {
	if m != nil {
		return m.SignalValidators
	}
	return false
}

// IBCInfo defines the structure to verify request for
// general and private keyshares in case the request was made over IBC
type IBCInfo struct {
	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId       string `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *IBCInfo) Reset()         { *m = IBCInfo{} }
func (m *IBCInfo) String() string { return proto.CompactTextString(m) }
func (*IBCInfo) ProtoMessage()    {}
func (*IBCInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_558a490dc8740931, []int{1}
}
func (m *IBCInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCInfo.Merge(m, src)
}
func (m *IBCInfo) XXX_Size() int {
	return m.Size()
}
func (m *IBCInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IBCInfo proto.InternalMessageInfo

func (m *IBCInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *IBCInfo) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *IBCInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *IBCInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

// CounterPartyIBCInfo defines the structure to send general
// and private keyshares if the request was made over IBC
type CounterPartyIBCInfo struct {
	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PortId       string `protobuf:"bytes,4,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *CounterPartyIBCInfo) Reset()         { *m = CounterPartyIBCInfo{} }
func (m *CounterPartyIBCInfo) String() string { return proto.CompactTextString(m) }
func (*CounterPartyIBCInfo) ProtoMessage()    {}
func (*CounterPartyIBCInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_558a490dc8740931, []int{2}
}
func (m *CounterPartyIBCInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterPartyIBCInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterPartyIBCInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterPartyIBCInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterPartyIBCInfo.Merge(m, src)
}
func (m *CounterPartyIBCInfo) XXX_Size() int {
	return m.Size()
}
func (m *CounterPartyIBCInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterPartyIBCInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CounterPartyIBCInfo proto.InternalMessageInfo

func (m *CounterPartyIBCInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *CounterPartyIBCInfo) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *CounterPartyIBCInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *CounterPartyIBCInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

// PrivateDecryptionKeyRequest defines the stroage structure for private
// encrypted and unaggregated decryption key requests
type PrivateDecryptionKeyRequest struct {
	Identity              string                        `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey                string                        `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IbcInfo               *IBCInfo                      `protobuf:"bytes,3,opt,name=ibc_info,json=ibcInfo,proto3" json:"ibc_info,omitempty"`
	Counterparty          *CounterPartyIBCInfo          `protobuf:"bytes,4,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	PrivateDecryptionKeys []*types.PrivateDecryptionKey `protobuf:"bytes,5,rep,name=private_decryption_keys,json=privateDecryptionKeys,proto3" json:"private_decryption_keys,omitempty"`
	Sent                  bool                          `protobuf:"varint,7,opt,name=sent,proto3" json:"sent,omitempty"`
	SignalValidators      bool                          `protobuf:"varint,8,opt,name=signal_validators,json=signalValidators,proto3" json:"signal_validators,omitempty"`
}

func (m *PrivateDecryptionKeyRequest) Reset()         { *m = PrivateDecryptionKeyRequest{} }
func (m *PrivateDecryptionKeyRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateDecryptionKeyRequest) ProtoMessage()    {}
func (*PrivateDecryptionKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_558a490dc8740931, []int{3}
}
func (m *PrivateDecryptionKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateDecryptionKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateDecryptionKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateDecryptionKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDecryptionKeyRequest.Merge(m, src)
}
func (m *PrivateDecryptionKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateDecryptionKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDecryptionKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDecryptionKeyRequest proto.InternalMessageInfo

func (m *PrivateDecryptionKeyRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PrivateDecryptionKeyRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *PrivateDecryptionKeyRequest) GetIbcInfo() *IBCInfo {
	if m != nil {
		return m.IbcInfo
	}
	return nil
}

func (m *PrivateDecryptionKeyRequest) GetCounterparty() *CounterPartyIBCInfo {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

func (m *PrivateDecryptionKeyRequest) GetPrivateDecryptionKeys() []*types.PrivateDecryptionKey {
	if m != nil {
		return m.PrivateDecryptionKeys
	}
	return nil
}

func (m *PrivateDecryptionKeyRequest) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

func (m *PrivateDecryptionKeyRequest) GetSignalValidators() bool {
	if m != nil {
		return m.SignalValidators
	}
	return false
}

func init() {
	proto.RegisterType((*DecryptionKeyRequest)(nil), "fairyring.keyshare.DecryptionKeyRequest")
	proto.RegisterType((*IBCInfo)(nil), "fairyring.keyshare.IBCInfo")
	proto.RegisterType((*CounterPartyIBCInfo)(nil), "fairyring.keyshare.CounterPartyIBCInfo")
	proto.RegisterType((*PrivateDecryptionKeyRequest)(nil), "fairyring.keyshare.PrivateDecryptionKeyRequest")
}

func init() {
	proto.RegisterFile("fairyring/keyshare/requested_decryption_key.proto", fileDescriptor_558a490dc8740931)
}

var fileDescriptor_558a490dc8740931 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x18, 0xcc, 0x26, 0x69, 0x7e, 0xbe, 0xb4, 0x08, 0xcc, 0x4f, 0x57, 0x8d, 0x58, 0xa2, 0x54, 0x40,
	0x24, 0xa4, 0x5d, 0x51, 0x24, 0x1e, 0xa0, 0x45, 0x48, 0xab, 0x5e, 0xaa, 0x1c, 0x38, 0x70, 0x60,
	0xe5, 0xb5, 0x9d, 0xc4, 0xca, 0xd6, 0x36, 0x5e, 0xa7, 0xc2, 0x67, 0x1e, 0x00, 0x1e, 0x8b, 0x63,
	0x8f, 0x3d, 0xa2, 0xe4, 0x21, 0xb8, 0xa2, 0x78, 0x37, 0x49, 0x03, 0xb9, 0x71, 0x40, 0xea, 0xcd,
	0x1e, 0x7f, 0x33, 0x1e, 0x8f, 0xed, 0x0f, 0x5e, 0x8f, 0x30, 0xd7, 0x56, 0x73, 0x31, 0x8e, 0xa6,
	0xcc, 0xe6, 0x13, 0xac, 0x59, 0xa4, 0xd9, 0xe7, 0x19, 0xcb, 0x0d, 0xa3, 0x09, 0x65, 0x44, 0x5b,
	0x65, 0xb8, 0x14, 0xc9, 0x94, 0xd9, 0x50, 0x69, 0x69, 0x24, 0x42, 0x6b, 0x4a, 0xb8, 0xa2, 0x1c,
	0x1d, 0x6f, 0x64, 0x88, 0xbc, 0xbc, 0x94, 0x22, 0x72, 0x38, 0x4d, 0x8c, 0x55, 0x2c, 0x2f, 0x88,
	0xfd, 0x9b, 0x2a, 0x3c, 0x7a, 0xb7, 0x56, 0x3c, 0x67, 0x76, 0x58, 0x6c, 0x84, 0x8e, 0xa0, 0xc5,
	0x29, 0x13, 0x86, 0x1b, 0xeb, 0x7b, 0x3d, 0x6f, 0xd0, 0x1e, 0xae, 0xe7, 0xe8, 0x09, 0x34, 0xd4,
	0x2c, 0x9d, 0x32, 0xeb, 0x57, 0xdd, 0x4a, 0x39, 0x43, 0x6f, 0xa1, 0xc5, 0x53, 0x92, 0x70, 0x31,
	0x92, 0x7e, 0xad, 0xe7, 0x0d, 0x3a, 0x27, 0xdd, 0xf0, 0x6f, 0x63, 0x61, 0x7c, 0x7a, 0x16, 0x8b,
	0x91, 0x1c, 0x36, 0x79, 0x4a, 0x96, 0x03, 0x74, 0x0e, 0xfb, 0x44, 0xce, 0x84, 0x61, 0x5a, 0x61,
	0x6d, 0xac, 0x5f, 0x77, 0xdc, 0x97, 0xbb, 0xb8, 0x67, 0x45, 0xdd, 0xc5, 0xb2, 0x6e, 0xa5, 0xb3,
	0x45, 0x46, 0xcf, 0xe1, 0xde, 0x76, 0x44, 0xfe, 0x9e, 0x33, 0x79, 0x40, 0x6f, 0x1f, 0x13, 0x3d,
	0x83, 0x8e, 0xd2, 0x52, 0xc9, 0x1c, 0x67, 0x09, 0xa7, 0x7e, 0xc3, 0xd5, 0xc0, 0x0a, 0x8a, 0x29,
	0x42, 0x50, 0xcf, 0x99, 0x30, 0x7e, 0xb3, 0xe7, 0x0d, 0x5a, 0x43, 0x37, 0x46, 0xaf, 0xe0, 0x41,
	0xce, 0xc7, 0x02, 0x67, 0xc9, 0x15, 0xce, 0x38, 0xc5, 0x46, 0xea, 0xdc, 0x6f, 0xb9, 0x82, 0xfb,
	0xc5, 0xc2, 0x87, 0x35, 0xde, 0xff, 0xea, 0x41, 0xb3, 0xb4, 0x88, 0xba, 0xd0, 0x26, 0x19, 0x67,
	0xc2, 0x2c, 0xf7, 0x2a, 0xe3, 0x2c, 0x80, 0x98, 0xa2, 0x63, 0x38, 0x20, 0x52, 0x08, 0x46, 0x9c,
	0x63, 0x4e, 0xcb, 0x54, 0xf7, 0x37, 0x60, 0x4c, 0xd1, 0x53, 0x00, 0x32, 0xc1, 0x42, 0x30, 0x67,
	0xb7, 0xe6, 0x2a, 0xda, 0x25, 0x12, 0x53, 0x74, 0x08, 0x4d, 0x25, 0xb5, 0x93, 0xaf, 0x97, 0x77,
	0x22, 0xb5, 0x89, 0x69, 0xff, 0x9b, 0x07, 0x0f, 0x77, 0x84, 0xf6, 0x1f, 0x1d, 0xfd, 0xaa, 0x42,
	0xf7, 0x42, 0xf3, 0x2b, 0x6c, 0xd8, 0xdd, 0x7a, 0x79, 0x9f, 0xe0, 0x50, 0x15, 0xe7, 0xfa, 0xe3,
	0x93, 0xe6, 0xfe, 0x5e, 0xaf, 0x36, 0xe8, 0x9c, 0xbc, 0xb8, 0xa5, 0x5b, 0x7c, 0xc9, 0x70, 0x67,
	0x10, 0x8f, 0xd5, 0x0e, 0x34, 0xff, 0xe7, 0x17, 0x79, 0x1a, 0xff, 0x98, 0x07, 0xde, 0xf5, 0x3c,
	0xf0, 0x7e, 0xce, 0x03, 0xef, 0xfb, 0x22, 0xa8, 0x5c, 0x2f, 0x82, 0xca, 0xcd, 0x22, 0xa8, 0x7c,
	0x8c, 0xc6, 0xdc, 0x4c, 0x66, 0xe9, 0xd2, 0x55, 0xf4, 0x1e, 0x73, 0x9d, 0x66, 0x92, 0x4c, 0xa3,
	0x4d, 0x03, 0xf9, 0xb2, 0xe9, 0x44, 0xae, 0x7b, 0xa4, 0x0d, 0xd7, 0x3e, 0xde, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x26, 0xb1, 0xd6, 0x20, 0xac, 0x04, 0x00, 0x00,
}

func (m *DecryptionKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecryptionKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecryptionKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignalValidators {
		i--
		if m.SignalValidators {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Sent {
		i--
		if m.Sent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DecryptionKey) > 0 {
		i -= len(m.DecryptionKey)
		copy(dAtA[i:], m.DecryptionKey)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.DecryptionKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Counterparty != nil {
		{
			size, err := m.Counterparty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IbcInfo != nil {
		{
			size, err := m.IbcInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IBCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CounterPartyIBCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterPartyIBCInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterPartyIBCInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateDecryptionKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateDecryptionKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateDecryptionKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignalValidators {
		i--
		if m.SignalValidators {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Sent {
		i--
		if m.Sent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.PrivateDecryptionKeys) > 0 {
		for iNdEx := len(m.PrivateDecryptionKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateDecryptionKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Counterparty != nil {
		{
			size, err := m.Counterparty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IbcInfo != nil {
		{
			size, err := m.IbcInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintRequestedDecryptionKey(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestedDecryptionKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestedDecryptionKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DecryptionKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	if m.IbcInfo != nil {
		l = m.IbcInfo.Size()
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	if m.Counterparty != nil {
		l = m.Counterparty.Size()
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.DecryptionKey)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	if m.Sent {
		n += 2
	}
	if m.SignalValidators {
		n += 2
	}
	return n
}

func (m *IBCInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	return n
}

func (m *CounterPartyIBCInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	return n
}

func (m *PrivateDecryptionKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	if m.IbcInfo != nil {
		l = m.IbcInfo.Size()
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	if m.Counterparty != nil {
		l = m.Counterparty.Size()
		n += 1 + l + sovRequestedDecryptionKey(uint64(l))
	}
	if len(m.PrivateDecryptionKeys) > 0 {
		for _, e := range m.PrivateDecryptionKeys {
			l = e.Size()
			n += 1 + l + sovRequestedDecryptionKey(uint64(l))
		}
	}
	if m.Sent {
		n += 2
	}
	if m.SignalValidators {
		n += 2
	}
	return n
}

func sovRequestedDecryptionKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestedDecryptionKey(x uint64) (n int) {
	return sovRequestedDecryptionKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DecryptionKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedDecryptionKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecryptionKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecryptionKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcInfo == nil {
				m.IbcInfo = &IBCInfo{}
			}
			if err := m.IbcInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counterparty == nil {
				m.Counterparty = &CounterPartyIBCInfo{}
			}
			if err := m.Counterparty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptionKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sent = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalValidators", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignalValidators = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedDecryptionKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedDecryptionKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedDecryptionKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterPartyIBCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedDecryptionKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterPartyIBCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterPartyIBCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedDecryptionKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateDecryptionKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestedDecryptionKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateDecryptionKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateDecryptionKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IbcInfo == nil {
				m.IbcInfo = &IBCInfo{}
			}
			if err := m.IbcInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counterparty == nil {
				m.Counterparty = &CounterPartyIBCInfo{}
			}
			if err := m.Counterparty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDecryptionKeys = append(m.PrivateDecryptionKeys, &types.PrivateDecryptionKey{})
			if err := m.PrivateDecryptionKeys[len(m.PrivateDecryptionKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sent = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalValidators", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignalValidators = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestedDecryptionKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestedDecryptionKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestedDecryptionKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestedDecryptionKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestedDecryptionKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestedDecryptionKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestedDecryptionKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestedDecryptionKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestedDecryptionKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestedDecryptionKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestedDecryptionKey = fmt.Errorf("proto: unexpected end of group")
)
