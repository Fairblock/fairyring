// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/keyshare/packet.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	types "github.com/Fairblock/fairyring/x/common/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeysharePacketData defines all the packet types of the keyshare module
type KeysharePacketData struct {
	// packet can be one of the following types
	//
	// Types that are valid to be assigned to Packet:
	//	*KeysharePacketData_NoData
	//	*KeysharePacketData_RequestDecryptionKeyPacket
	//	*KeysharePacketData_GetDecryptionKeyPacket
	//	*KeysharePacketData_DecryptionKeyDataPacket
	//	*KeysharePacketData_PrivateDecryptionKeyDataPacket
	//	*KeysharePacketData_CurrentKeysPacket
	//	*KeysharePacketData_RequestPrivateDecryptionKeyPacket
	//	*KeysharePacketData_GetPrivateDecryptionKeyPacket
	Packet isKeysharePacketData_Packet `protobuf_oneof:"packet"`
}

func (m *KeysharePacketData) Reset()         { *m = KeysharePacketData{} }
func (m *KeysharePacketData) String() string { return proto.CompactTextString(m) }
func (*KeysharePacketData) ProtoMessage()    {}
func (*KeysharePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{0}
}
func (m *KeysharePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeysharePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeysharePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeysharePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeysharePacketData.Merge(m, src)
}
func (m *KeysharePacketData) XXX_Size() int {
	return m.Size()
}
func (m *KeysharePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_KeysharePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_KeysharePacketData proto.InternalMessageInfo

type isKeysharePacketData_Packet interface {
	isKeysharePacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KeysharePacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=no_data,json=noData,proto3,oneof" json:"no_data,omitempty"`
}
type KeysharePacketData_RequestDecryptionKeyPacket struct {
	RequestDecryptionKeyPacket *RequestDecryptionKeyPacketData `protobuf:"bytes,2,opt,name=request_decryption_key_packet,json=requestDecryptionKeyPacket,proto3,oneof" json:"request_decryption_key_packet,omitempty"`
}
type KeysharePacketData_GetDecryptionKeyPacket struct {
	GetDecryptionKeyPacket *GetDecryptionKeyPacketData `protobuf:"bytes,3,opt,name=get_decryption_key_packet,json=getDecryptionKeyPacket,proto3,oneof" json:"get_decryption_key_packet,omitempty"`
}
type KeysharePacketData_DecryptionKeyDataPacket struct {
	DecryptionKeyDataPacket *DecryptionKeyDataPacketData `protobuf:"bytes,4,opt,name=decryption_key_data_packet,json=decryptionKeyDataPacket,proto3,oneof" json:"decryption_key_data_packet,omitempty"`
}
type KeysharePacketData_PrivateDecryptionKeyDataPacket struct {
	PrivateDecryptionKeyDataPacket *PrivateDecryptionKeyDataPacketData `protobuf:"bytes,5,opt,name=private_decryption_key_data_packet,json=privateDecryptionKeyDataPacket,proto3,oneof" json:"private_decryption_key_data_packet,omitempty"`
}
type KeysharePacketData_CurrentKeysPacket struct {
	CurrentKeysPacket *CurrentKeysPacketData `protobuf:"bytes,6,opt,name=current_keys_packet,json=currentKeysPacket,proto3,oneof" json:"current_keys_packet,omitempty"`
}
type KeysharePacketData_RequestPrivateDecryptionKeyPacket struct {
	RequestPrivateDecryptionKeyPacket *RequestPrivateDecryptionKeyPacketData `protobuf:"bytes,7,opt,name=request_private_decryption_key_packet,json=requestPrivateDecryptionKeyPacket,proto3,oneof" json:"request_private_decryption_key_packet,omitempty"`
}
type KeysharePacketData_GetPrivateDecryptionKeyPacket struct {
	GetPrivateDecryptionKeyPacket *GetPrivateDecryptionKeyPacketData `protobuf:"bytes,8,opt,name=get_private_decryption_key_packet,json=getPrivateDecryptionKeyPacket,proto3,oneof" json:"get_private_decryption_key_packet,omitempty"`
}

func (*KeysharePacketData_NoData) isKeysharePacketData_Packet()                            {}
func (*KeysharePacketData_RequestDecryptionKeyPacket) isKeysharePacketData_Packet()        {}
func (*KeysharePacketData_GetDecryptionKeyPacket) isKeysharePacketData_Packet()            {}
func (*KeysharePacketData_DecryptionKeyDataPacket) isKeysharePacketData_Packet()           {}
func (*KeysharePacketData_PrivateDecryptionKeyDataPacket) isKeysharePacketData_Packet()    {}
func (*KeysharePacketData_CurrentKeysPacket) isKeysharePacketData_Packet()                 {}
func (*KeysharePacketData_RequestPrivateDecryptionKeyPacket) isKeysharePacketData_Packet() {}
func (*KeysharePacketData_GetPrivateDecryptionKeyPacket) isKeysharePacketData_Packet()     {}

func (m *KeysharePacketData) GetPacket() isKeysharePacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *KeysharePacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*KeysharePacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *KeysharePacketData) GetRequestDecryptionKeyPacket() *RequestDecryptionKeyPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_RequestDecryptionKeyPacket); ok {
		return x.RequestDecryptionKeyPacket
	}
	return nil
}

func (m *KeysharePacketData) GetGetDecryptionKeyPacket() *GetDecryptionKeyPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_GetDecryptionKeyPacket); ok {
		return x.GetDecryptionKeyPacket
	}
	return nil
}

func (m *KeysharePacketData) GetDecryptionKeyDataPacket() *DecryptionKeyDataPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_DecryptionKeyDataPacket); ok {
		return x.DecryptionKeyDataPacket
	}
	return nil
}

func (m *KeysharePacketData) GetPrivateDecryptionKeyDataPacket() *PrivateDecryptionKeyDataPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_PrivateDecryptionKeyDataPacket); ok {
		return x.PrivateDecryptionKeyDataPacket
	}
	return nil
}

func (m *KeysharePacketData) GetCurrentKeysPacket() *CurrentKeysPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_CurrentKeysPacket); ok {
		return x.CurrentKeysPacket
	}
	return nil
}

func (m *KeysharePacketData) GetRequestPrivateDecryptionKeyPacket() *RequestPrivateDecryptionKeyPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_RequestPrivateDecryptionKeyPacket); ok {
		return x.RequestPrivateDecryptionKeyPacket
	}
	return nil
}

func (m *KeysharePacketData) GetGetPrivateDecryptionKeyPacket() *GetPrivateDecryptionKeyPacketData {
	if x, ok := m.GetPacket().(*KeysharePacketData_GetPrivateDecryptionKeyPacket); ok {
		return x.GetPrivateDecryptionKeyPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KeysharePacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KeysharePacketData_NoData)(nil),
		(*KeysharePacketData_RequestDecryptionKeyPacket)(nil),
		(*KeysharePacketData_GetDecryptionKeyPacket)(nil),
		(*KeysharePacketData_DecryptionKeyDataPacket)(nil),
		(*KeysharePacketData_PrivateDecryptionKeyDataPacket)(nil),
		(*KeysharePacketData_CurrentKeysPacket)(nil),
		(*KeysharePacketData_RequestPrivateDecryptionKeyPacket)(nil),
		(*KeysharePacketData_GetPrivateDecryptionKeyPacket)(nil),
	}
}

// NoData defines a blank packet
type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// RequestDecryptionKeyPacketData defines a struct for the packet payload
type RequestDecryptionKeyPacketData struct {
	Requester string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	// id can either be a request id or a proposal id
	//
	// Types that are valid to be assigned to Id:
	//	*RequestDecryptionKeyPacketData_ProposalId
	//	*RequestDecryptionKeyPacketData_Identity
	Id             isRequestDecryptionKeyPacketData_Id `protobuf_oneof:"id"`
	EstimatedDelay *time.Duration                      `protobuf:"bytes,4,opt,name=estimated_delay,json=estimatedDelay,proto3,stdduration" json:"estimated_delay,omitempty"`
}

func (m *RequestDecryptionKeyPacketData) Reset()         { *m = RequestDecryptionKeyPacketData{} }
func (m *RequestDecryptionKeyPacketData) String() string { return proto.CompactTextString(m) }
func (*RequestDecryptionKeyPacketData) ProtoMessage()    {}
func (*RequestDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{2}
}
func (m *RequestDecryptionKeyPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDecryptionKeyPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDecryptionKeyPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDecryptionKeyPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDecryptionKeyPacketData.Merge(m, src)
}
func (m *RequestDecryptionKeyPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RequestDecryptionKeyPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDecryptionKeyPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDecryptionKeyPacketData proto.InternalMessageInfo

type isRequestDecryptionKeyPacketData_Id interface {
	isRequestDecryptionKeyPacketData_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestDecryptionKeyPacketData_ProposalId struct {
	ProposalId string `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3,oneof" json:"proposal_id,omitempty"`
}
type RequestDecryptionKeyPacketData_Identity struct {
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
}

func (*RequestDecryptionKeyPacketData_ProposalId) isRequestDecryptionKeyPacketData_Id() {}
func (*RequestDecryptionKeyPacketData_Identity) isRequestDecryptionKeyPacketData_Id()   {}

func (m *RequestDecryptionKeyPacketData) GetId() isRequestDecryptionKeyPacketData_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestDecryptionKeyPacketData) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *RequestDecryptionKeyPacketData) GetProposalId() string {
	if x, ok := m.GetId().(*RequestDecryptionKeyPacketData_ProposalId); ok {
		return x.ProposalId
	}
	return ""
}

func (m *RequestDecryptionKeyPacketData) GetIdentity() string {
	if x, ok := m.GetId().(*RequestDecryptionKeyPacketData_Identity); ok {
		return x.Identity
	}
	return ""
}

func (m *RequestDecryptionKeyPacketData) GetEstimatedDelay() *time.Duration {
	if m != nil {
		return m.EstimatedDelay
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestDecryptionKeyPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestDecryptionKeyPacketData_ProposalId)(nil),
		(*RequestDecryptionKeyPacketData_Identity)(nil),
	}
}

// RequestPrivateDecryptionKeyPacketData defines a struct for the packet payload
type RequestPrivateDecryptionKeyPacketData struct {
	Requester string `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	Identity  string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RequestPrivateDecryptionKeyPacketData) Reset()         { *m = RequestPrivateDecryptionKeyPacketData{} }
func (m *RequestPrivateDecryptionKeyPacketData) String() string { return proto.CompactTextString(m) }
func (*RequestPrivateDecryptionKeyPacketData) ProtoMessage()    {}
func (*RequestPrivateDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{3}
}
func (m *RequestPrivateDecryptionKeyPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPrivateDecryptionKeyPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPrivateDecryptionKeyPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPrivateDecryptionKeyPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPrivateDecryptionKeyPacketData.Merge(m, src)
}
func (m *RequestPrivateDecryptionKeyPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RequestPrivateDecryptionKeyPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPrivateDecryptionKeyPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPrivateDecryptionKeyPacketData proto.InternalMessageInfo

func (m *RequestPrivateDecryptionKeyPacketData) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *RequestPrivateDecryptionKeyPacketData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// RequestPrivateDecryptionKeyPacketAck defines a struct for the packet acknowledgment
type RequestPrivateDecryptionKeyPacketAck struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *RequestPrivateDecryptionKeyPacketAck) Reset()         { *m = RequestPrivateDecryptionKeyPacketAck{} }
func (m *RequestPrivateDecryptionKeyPacketAck) String() string { return proto.CompactTextString(m) }
func (*RequestPrivateDecryptionKeyPacketAck) ProtoMessage()    {}
func (*RequestPrivateDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{4}
}
func (m *RequestPrivateDecryptionKeyPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPrivateDecryptionKeyPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPrivateDecryptionKeyPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPrivateDecryptionKeyPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPrivateDecryptionKeyPacketAck.Merge(m, src)
}
func (m *RequestPrivateDecryptionKeyPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *RequestPrivateDecryptionKeyPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPrivateDecryptionKeyPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPrivateDecryptionKeyPacketAck proto.InternalMessageInfo

func (m *RequestPrivateDecryptionKeyPacketAck) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestPrivateDecryptionKeyPacketAck) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// RequestDecryptionKeyPacketAck defines a struct for the packet acknowledgment
type RequestDecryptionKeyPacketAck struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *RequestDecryptionKeyPacketAck) Reset()         { *m = RequestDecryptionKeyPacketAck{} }
func (m *RequestDecryptionKeyPacketAck) String() string { return proto.CompactTextString(m) }
func (*RequestDecryptionKeyPacketAck) ProtoMessage()    {}
func (*RequestDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{5}
}
func (m *RequestDecryptionKeyPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDecryptionKeyPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDecryptionKeyPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDecryptionKeyPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDecryptionKeyPacketAck.Merge(m, src)
}
func (m *RequestDecryptionKeyPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *RequestDecryptionKeyPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDecryptionKeyPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDecryptionKeyPacketAck proto.InternalMessageInfo

func (m *RequestDecryptionKeyPacketAck) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestDecryptionKeyPacketAck) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// GetDecryptionKeyPacketData defines a struct for the packet payload
type GetDecryptionKeyPacketData struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *GetDecryptionKeyPacketData) Reset()         { *m = GetDecryptionKeyPacketData{} }
func (m *GetDecryptionKeyPacketData) String() string { return proto.CompactTextString(m) }
func (*GetDecryptionKeyPacketData) ProtoMessage()    {}
func (*GetDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{6}
}
func (m *GetDecryptionKeyPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDecryptionKeyPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDecryptionKeyPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDecryptionKeyPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDecryptionKeyPacketData.Merge(m, src)
}
func (m *GetDecryptionKeyPacketData) XXX_Size() int {
	return m.Size()
}
func (m *GetDecryptionKeyPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDecryptionKeyPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_GetDecryptionKeyPacketData proto.InternalMessageInfo

func (m *GetDecryptionKeyPacketData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// GetDecryptionKeyPacketAck defines a struct for the packet acknowledgment
type GetDecryptionKeyPacketAck struct {
}

func (m *GetDecryptionKeyPacketAck) Reset()         { *m = GetDecryptionKeyPacketAck{} }
func (m *GetDecryptionKeyPacketAck) String() string { return proto.CompactTextString(m) }
func (*GetDecryptionKeyPacketAck) ProtoMessage()    {}
func (*GetDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{7}
}
func (m *GetDecryptionKeyPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDecryptionKeyPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDecryptionKeyPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDecryptionKeyPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDecryptionKeyPacketAck.Merge(m, src)
}
func (m *GetDecryptionKeyPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *GetDecryptionKeyPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDecryptionKeyPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_GetDecryptionKeyPacketAck proto.InternalMessageInfo

// GetPrivateDecryptionKeyPacketData defines a struct for the packet payload
type GetPrivateDecryptionKeyPacketData struct {
	Identity   string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Requester  string `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	SecpPubkey string `protobuf:"bytes,3,opt,name=secp_pubkey,json=secpPubkey,proto3" json:"secp_pubkey,omitempty"`
}

func (m *GetPrivateDecryptionKeyPacketData) Reset()         { *m = GetPrivateDecryptionKeyPacketData{} }
func (m *GetPrivateDecryptionKeyPacketData) String() string { return proto.CompactTextString(m) }
func (*GetPrivateDecryptionKeyPacketData) ProtoMessage()    {}
func (*GetPrivateDecryptionKeyPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{8}
}
func (m *GetPrivateDecryptionKeyPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrivateDecryptionKeyPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrivateDecryptionKeyPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrivateDecryptionKeyPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrivateDecryptionKeyPacketData.Merge(m, src)
}
func (m *GetPrivateDecryptionKeyPacketData) XXX_Size() int {
	return m.Size()
}
func (m *GetPrivateDecryptionKeyPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrivateDecryptionKeyPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrivateDecryptionKeyPacketData proto.InternalMessageInfo

func (m *GetPrivateDecryptionKeyPacketData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *GetPrivateDecryptionKeyPacketData) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *GetPrivateDecryptionKeyPacketData) GetSecpPubkey() string {
	if m != nil {
		return m.SecpPubkey
	}
	return ""
}

// GetPrivateKeysharePacketAck defines a struct for the packet acknowledgment
type GetPrivateDecryptionKeyPacketAck struct {
}

func (m *GetPrivateDecryptionKeyPacketAck) Reset()         { *m = GetPrivateDecryptionKeyPacketAck{} }
func (m *GetPrivateDecryptionKeyPacketAck) String() string { return proto.CompactTextString(m) }
func (*GetPrivateDecryptionKeyPacketAck) ProtoMessage()    {}
func (*GetPrivateDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{9}
}
func (m *GetPrivateDecryptionKeyPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrivateDecryptionKeyPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrivateDecryptionKeyPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrivateDecryptionKeyPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrivateDecryptionKeyPacketAck.Merge(m, src)
}
func (m *GetPrivateDecryptionKeyPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *GetPrivateDecryptionKeyPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrivateDecryptionKeyPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrivateDecryptionKeyPacketAck proto.InternalMessageInfo

// DecryptionKeyDataPacketData defines a struct for the packet payload
type DecryptionKeyDataPacketData struct {
	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey        string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	DecryptionKey string `protobuf:"bytes,3,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
	AggrHeight    string `protobuf:"bytes,4,opt,name=aggr_height,json=aggrHeight,proto3" json:"aggr_height,omitempty"`
	ProposalId    string `protobuf:"bytes,5,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Retries       uint64 `protobuf:"varint,6,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (m *DecryptionKeyDataPacketData) Reset()         { *m = DecryptionKeyDataPacketData{} }
func (m *DecryptionKeyDataPacketData) String() string { return proto.CompactTextString(m) }
func (*DecryptionKeyDataPacketData) ProtoMessage()    {}
func (*DecryptionKeyDataPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{10}
}
func (m *DecryptionKeyDataPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecryptionKeyDataPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecryptionKeyDataPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecryptionKeyDataPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptionKeyDataPacketData.Merge(m, src)
}
func (m *DecryptionKeyDataPacketData) XXX_Size() int {
	return m.Size()
}
func (m *DecryptionKeyDataPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptionKeyDataPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptionKeyDataPacketData proto.InternalMessageInfo

func (m *DecryptionKeyDataPacketData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *DecryptionKeyDataPacketData) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *DecryptionKeyDataPacketData) GetDecryptionKey() string {
	if m != nil {
		return m.DecryptionKey
	}
	return ""
}

func (m *DecryptionKeyDataPacketData) GetAggrHeight() string {
	if m != nil {
		return m.AggrHeight
	}
	return ""
}

func (m *DecryptionKeyDataPacketData) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *DecryptionKeyDataPacketData) GetRetries() uint64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

// DecryptionKeyPacketAck defines a struct for the packet acknowledgment
type DecryptionKeyPacketAck struct {
}

func (m *DecryptionKeyPacketAck) Reset()         { *m = DecryptionKeyPacketAck{} }
func (m *DecryptionKeyPacketAck) String() string { return proto.CompactTextString(m) }
func (*DecryptionKeyPacketAck) ProtoMessage()    {}
func (*DecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{11}
}
func (m *DecryptionKeyPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecryptionKeyPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecryptionKeyPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecryptionKeyPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptionKeyPacketAck.Merge(m, src)
}
func (m *DecryptionKeyPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *DecryptionKeyPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptionKeyPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptionKeyPacketAck proto.InternalMessageInfo

// PrivateDecryptionKeyDataPacketData defines a struct for the packet payload
type PrivateDecryptionKeyDataPacketData struct {
	Identity             string                        `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey               string                        `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrivateDecryptionKey []*types.PrivateDecryptionKey `protobuf:"bytes,4,rep,name=private_decryption_key,json=privateDecryptionKey,proto3" json:"private_decryption_key,omitempty"`
}

func (m *PrivateDecryptionKeyDataPacketData) Reset()         { *m = PrivateDecryptionKeyDataPacketData{} }
func (m *PrivateDecryptionKeyDataPacketData) String() string { return proto.CompactTextString(m) }
func (*PrivateDecryptionKeyDataPacketData) ProtoMessage()    {}
func (*PrivateDecryptionKeyDataPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{12}
}
func (m *PrivateDecryptionKeyDataPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateDecryptionKeyDataPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateDecryptionKeyDataPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateDecryptionKeyDataPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDecryptionKeyDataPacketData.Merge(m, src)
}
func (m *PrivateDecryptionKeyDataPacketData) XXX_Size() int {
	return m.Size()
}
func (m *PrivateDecryptionKeyDataPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDecryptionKeyDataPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDecryptionKeyDataPacketData proto.InternalMessageInfo

func (m *PrivateDecryptionKeyDataPacketData) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *PrivateDecryptionKeyDataPacketData) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *PrivateDecryptionKeyDataPacketData) GetPrivateDecryptionKey() []*types.PrivateDecryptionKey {
	if m != nil {
		return m.PrivateDecryptionKey
	}
	return nil
}

// PrivateDecryptionKeyPacketAck defines a struct for the packet payload
type PrivateDecryptionKeyPacketAck struct {
}

func (m *PrivateDecryptionKeyPacketAck) Reset()         { *m = PrivateDecryptionKeyPacketAck{} }
func (m *PrivateDecryptionKeyPacketAck) String() string { return proto.CompactTextString(m) }
func (*PrivateDecryptionKeyPacketAck) ProtoMessage()    {}
func (*PrivateDecryptionKeyPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{13}
}
func (m *PrivateDecryptionKeyPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateDecryptionKeyPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateDecryptionKeyPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateDecryptionKeyPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDecryptionKeyPacketAck.Merge(m, src)
}
func (m *PrivateDecryptionKeyPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *PrivateDecryptionKeyPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDecryptionKeyPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDecryptionKeyPacketAck proto.InternalMessageInfo

// CurrentKeysPacketData defines a struct for the packet payload
type CurrentKeysPacketData struct {
}

func (m *CurrentKeysPacketData) Reset()         { *m = CurrentKeysPacketData{} }
func (m *CurrentKeysPacketData) String() string { return proto.CompactTextString(m) }
func (*CurrentKeysPacketData) ProtoMessage()    {}
func (*CurrentKeysPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{14}
}
func (m *CurrentKeysPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentKeysPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentKeysPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentKeysPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentKeysPacketData.Merge(m, src)
}
func (m *CurrentKeysPacketData) XXX_Size() int {
	return m.Size()
}
func (m *CurrentKeysPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentKeysPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentKeysPacketData proto.InternalMessageInfo

// CurrentKeysPacketAck defines a struct for the packet acknowledgment
type CurrentKeysPacketAck struct {
	ActiveKey *types.ActivePublicKey `protobuf:"bytes,1,opt,name=active_key,json=activeKey,proto3" json:"active_key,omitempty"`
	QueuedKey *types.QueuedPublicKey `protobuf:"bytes,2,opt,name=queued_key,json=queuedKey,proto3" json:"queued_key,omitempty"`
}

func (m *CurrentKeysPacketAck) Reset()         { *m = CurrentKeysPacketAck{} }
func (m *CurrentKeysPacketAck) String() string { return proto.CompactTextString(m) }
func (*CurrentKeysPacketAck) ProtoMessage()    {}
func (*CurrentKeysPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_220841e1bebf3b1b, []int{15}
}
func (m *CurrentKeysPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentKeysPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentKeysPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentKeysPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentKeysPacketAck.Merge(m, src)
}
func (m *CurrentKeysPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *CurrentKeysPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentKeysPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentKeysPacketAck proto.InternalMessageInfo

func (m *CurrentKeysPacketAck) GetActiveKey() *types.ActivePublicKey {
	if m != nil {
		return m.ActiveKey
	}
	return nil
}

func (m *CurrentKeysPacketAck) GetQueuedKey() *types.QueuedPublicKey {
	if m != nil {
		return m.QueuedKey
	}
	return nil
}

func init() {
	proto.RegisterType((*KeysharePacketData)(nil), "fairyring.keyshare.KeysharePacketData")
	proto.RegisterType((*NoData)(nil), "fairyring.keyshare.NoData")
	proto.RegisterType((*RequestDecryptionKeyPacketData)(nil), "fairyring.keyshare.RequestDecryptionKeyPacketData")
	proto.RegisterType((*RequestPrivateDecryptionKeyPacketData)(nil), "fairyring.keyshare.RequestPrivateDecryptionKeyPacketData")
	proto.RegisterType((*RequestPrivateDecryptionKeyPacketAck)(nil), "fairyring.keyshare.RequestPrivateDecryptionKeyPacketAck")
	proto.RegisterType((*RequestDecryptionKeyPacketAck)(nil), "fairyring.keyshare.RequestDecryptionKeyPacketAck")
	proto.RegisterType((*GetDecryptionKeyPacketData)(nil), "fairyring.keyshare.GetDecryptionKeyPacketData")
	proto.RegisterType((*GetDecryptionKeyPacketAck)(nil), "fairyring.keyshare.GetDecryptionKeyPacketAck")
	proto.RegisterType((*GetPrivateDecryptionKeyPacketData)(nil), "fairyring.keyshare.GetPrivateDecryptionKeyPacketData")
	proto.RegisterType((*GetPrivateDecryptionKeyPacketAck)(nil), "fairyring.keyshare.GetPrivateDecryptionKeyPacketAck")
	proto.RegisterType((*DecryptionKeyDataPacketData)(nil), "fairyring.keyshare.DecryptionKeyDataPacketData")
	proto.RegisterType((*DecryptionKeyPacketAck)(nil), "fairyring.keyshare.DecryptionKeyPacketAck")
	proto.RegisterType((*PrivateDecryptionKeyDataPacketData)(nil), "fairyring.keyshare.PrivateDecryptionKeyDataPacketData")
	proto.RegisterType((*PrivateDecryptionKeyPacketAck)(nil), "fairyring.keyshare.PrivateDecryptionKeyPacketAck")
	proto.RegisterType((*CurrentKeysPacketData)(nil), "fairyring.keyshare.CurrentKeysPacketData")
	proto.RegisterType((*CurrentKeysPacketAck)(nil), "fairyring.keyshare.CurrentKeysPacketAck")
}

func init() { proto.RegisterFile("fairyring/keyshare/packet.proto", fileDescriptor_220841e1bebf3b1b) }

var fileDescriptor_220841e1bebf3b1b = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xe3, 0x6e, 0x36, 0x3f, 0x5e, 0xc4, 0x22, 0x86, 0x92, 0x4d, 0xb3, 0x1b, 0xa7, 0x31,
	0x14, 0x2d, 0x17, 0x5b, 0x2a, 0x5a, 0x04, 0xb7, 0x6d, 0x88, 0x20, 0xab, 0x4a, 0x28, 0x98, 0x5b,
	0x41, 0xb2, 0x26, 0xf6, 0xd4, 0xb1, 0x9c, 0xda, 0xee, 0x78, 0x5c, 0xf0, 0x05, 0x09, 0x89, 0x2b,
	0x12, 0x47, 0xc4, 0x95, 0xff, 0x81, 0xbf, 0x81, 0x1b, 0x3d, 0x70, 0xe0, 0x06, 0x6a, 0xff, 0x11,
	0x34, 0x33, 0x76, 0x12, 0xb7, 0x8e, 0x83, 0x7a, 0xb3, 0x67, 0xde, 0x7b, 0x9f, 0xef, 0xf3, 0xbc,
	0xf7, 0x3c, 0x30, 0x3c, 0xc7, 0x1e, 0x4d, 0xa9, 0x17, 0xb8, 0x86, 0x4f, 0xd2, 0x78, 0x81, 0x29,
	0x31, 0x22, 0x6c, 0xfb, 0x84, 0xe9, 0x11, 0x0d, 0x59, 0x88, 0xd0, 0xca, 0x40, 0xcf, 0x0d, 0xfa,
	0xaa, 0x1b, 0x86, 0xee, 0x92, 0x18, 0xc2, 0x62, 0x9e, 0x9c, 0x1b, 0x4e, 0x42, 0x31, 0xf3, 0xc2,
	0x40, 0xfa, 0xf4, 0xf7, 0xdd, 0xd0, 0x0d, 0xc5, 0xa3, 0xc1, 0x9f, 0xb2, 0xd5, 0x77, 0xd7, 0x28,
	0x3b, 0xbc, 0xb8, 0x08, 0x03, 0x43, 0x44, 0x73, 0x2c, 0x96, 0x46, 0x24, 0x96, 0x46, 0xda, 0x6f,
	0x4d, 0x40, 0xa7, 0x19, 0x67, 0x26, 0x74, 0x4c, 0x30, 0xc3, 0xe8, 0x25, 0x34, 0x83, 0xd0, 0x72,
	0x30, 0xc3, 0x3d, 0xe5, 0x50, 0x79, 0xd1, 0x39, 0xee, 0xeb, 0xf7, 0x75, 0xe9, 0x5f, 0x84, 0xdc,
	0x78, 0x5a, 0x33, 0x1b, 0x81, 0x78, 0x42, 0xdf, 0xc2, 0x80, 0x92, 0xcb, 0x84, 0xc4, 0xcc, 0x72,
	0x88, 0x4d, 0xd3, 0x88, 0x8b, 0xb4, 0x7c, 0x92, 0x5a, 0x32, 0xc7, 0xde, 0x9e, 0x08, 0x76, 0x5c,
	0x16, 0xcc, 0x94, 0x8e, 0x93, 0x95, 0xdf, 0x29, 0x49, 0xd7, 0x8a, 0xa6, 0x35, 0xb3, 0x4f, 0xb7,
	0x5a, 0x20, 0x1f, 0x0e, 0x5c, 0xb2, 0x0d, 0xfa, 0x48, 0x40, 0xf5, 0x32, 0xe8, 0xe7, 0xa4, 0x02,
	0xd8, 0x75, 0x4b, 0x77, 0x51, 0x00, 0xfd, 0x3b, 0x20, 0xfe, 0xa1, 0x72, 0x5a, 0x5d, 0xd0, 0x8c,
	0x32, 0x5a, 0x21, 0x18, 0x87, 0x14, 0x70, 0x4f, 0x9d, 0xf2, 0x6d, 0xf4, 0xa3, 0x02, 0x5a, 0x44,
	0xbd, 0x2b, 0xcc, 0x88, 0x55, 0x01, 0x7e, 0x2c, 0xc0, 0x1f, 0x95, 0x81, 0x67, 0xd2, 0xbb, 0x9a,
	0xaf, 0x46, 0x95, 0x56, 0xe8, 0x6b, 0x78, 0xdb, 0x4e, 0x28, 0x25, 0x01, 0xe3, 0xe8, 0x38, 0xc7,
	0x36, 0x04, 0xf6, 0x83, 0x32, 0xec, 0xa7, 0xd2, 0x9c, 0xd7, 0x57, 0x81, 0xf4, 0x96, 0x7d, 0x77,
	0x03, 0xfd, 0xa4, 0xc0, 0x51, 0x5e, 0x3a, 0x5b, 0x72, 0xcd, 0x78, 0x4d, 0xc1, 0xfb, 0xa4, 0xa2,
	0x84, 0xca, 0xb2, 0x2d, 0xf0, 0x47, 0x74, 0x97, 0x21, 0xfa, 0x41, 0x81, 0x11, 0xaf, 0xa8, 0x6a,
	0x2d, 0x2d, 0xa1, 0xe5, 0xe5, 0x96, 0xca, 0xda, 0xa9, 0x63, 0xe0, 0x56, 0x19, 0x8d, 0x5b, 0xd0,
	0x90, 0x1c, 0xad, 0x05, 0x0d, 0xd9, 0x6b, 0xda, 0x9f, 0x0a, 0xa8, 0xd5, 0x9d, 0x82, 0x9e, 0x43,
	0x3b, 0xcb, 0x8f, 0x50, 0xd1, 0xbd, 0x6d, 0x73, 0xbd, 0x80, 0x46, 0xd0, 0x89, 0x68, 0x18, 0x85,
	0x31, 0x5e, 0x5a, 0x9e, 0x23, 0x1a, 0xb2, 0x3d, 0xad, 0x99, 0x90, 0x2f, 0xbe, 0x76, 0xd0, 0x73,
	0x68, 0x79, 0x0e, 0x09, 0x98, 0xc7, 0x52, 0xd1, 0x3b, 0x7c, 0x7f, 0xb5, 0x82, 0xa6, 0xf0, 0x26,
	0x89, 0x99, 0x77, 0x81, 0x19, 0x71, 0x2c, 0x87, 0x2c, 0x71, 0x9a, 0x95, 0xfc, 0x81, 0x2e, 0xc7,
	0x94, 0x9e, 0x8f, 0x29, 0x7d, 0x92, 0x8d, 0xa9, 0x71, 0xfd, 0x97, 0x7f, 0x86, 0x8a, 0xf9, 0x64,
	0xe5, 0x37, 0xe1, 0x6e, 0xe3, 0x3a, 0xec, 0x79, 0x8e, 0x86, 0xe1, 0xe8, 0x7f, 0x9d, 0xdb, 0x8e,
	0xbc, 0xfa, 0x1b, 0xa2, 0x45, 0x52, 0x6b, 0xc9, 0xda, 0x19, 0xbc, 0xb7, 0x13, 0x71, 0x62, 0xfb,
	0x85, 0x18, 0x4a, 0x31, 0x06, 0xea, 0x42, 0x23, 0x4a, 0xe6, 0x3e, 0xc9, 0xa3, 0x67, 0x6f, 0xda,
	0x57, 0x30, 0xd8, 0x7e, 0x1e, 0x0f, 0x0d, 0xfa, 0x31, 0xf4, 0xb7, 0x4f, 0xa6, 0xaa, 0x88, 0xda,
	0x33, 0x38, 0x28, 0xf7, 0x3c, 0xb1, 0x7d, 0xed, 0x7b, 0x18, 0xed, 0x2c, 0xcb, 0x4a, 0xbd, 0x85,
	0x23, 0xd8, 0xbb, 0x7b, 0x04, 0x43, 0xe8, 0xc4, 0xc4, 0x8e, 0xac, 0x2c, 0x25, 0x51, 0x3a, 0x26,
	0xf0, 0xa5, 0x99, 0x4c, 0x4b, 0x83, 0xc3, 0x4a, 0x3e, 0xd7, 0xf8, 0x97, 0x02, 0xcf, 0x2a, 0xe6,
	0xd4, 0x43, 0x3e, 0x27, 0x3a, 0x82, 0x27, 0xc5, 0xfe, 0xcd, 0xb4, 0xbd, 0x51, 0x98, 0xb8, 0x5c,
	0x3f, 0x76, 0x5d, 0x6a, 0x2d, 0x88, 0xe7, 0x2e, 0xe4, 0x20, 0x6f, 0x9b, 0xc0, 0x97, 0xa6, 0x62,
	0x85, 0x1b, 0x6c, 0xf6, 0xce, 0x63, 0x69, 0xb0, 0xd1, 0x39, 0x3d, 0x68, 0x52, 0xc2, 0xa8, 0x47,
	0x62, 0x31, 0x16, 0xeb, 0x66, 0xfe, 0xaa, 0xf5, 0xa0, 0xbb, 0x25, 0xe1, 0xdf, 0x15, 0xd0, 0x76,
	0xcf, 0xe7, 0x07, 0xe5, 0xfd, 0x0d, 0x74, 0xcb, 0xe7, 0x57, 0xaf, 0x7e, 0xf8, 0xe8, 0x45, 0xe7,
	0xf8, 0xfd, 0x8d, 0xc1, 0x25, 0xaf, 0x08, 0xa5, 0x7f, 0x0a, 0x73, 0xbf, 0xec, 0xcf, 0xa0, 0x0d,
	0x61, 0x50, 0x7d, 0x94, 0x4f, 0xe1, 0x9d, 0xd2, 0x3f, 0x80, 0xf6, 0xab, 0x02, 0xfb, 0xf7, 0x76,
	0x78, 0xaf, 0xbc, 0x02, 0xc0, 0x36, 0xf3, 0xae, 0x88, 0x10, 0x29, 0x6f, 0x1e, 0xa3, 0xfb, 0x22,
	0x4f, 0x84, 0xcd, 0x2c, 0x99, 0x2f, 0x3d, 0x9b, 0xeb, 0x6b, 0x4b, 0x27, 0x7e, 0x86, 0xaf, 0x00,
	0x2e, 0x13, 0x92, 0x10, 0xc7, 0xca, 0x3f, 0x47, 0x69, 0x84, 0x2f, 0x85, 0xcd, 0x46, 0x04, 0xe9,
	0x74, 0x4a, 0xd2, 0xf1, 0xeb, 0x3f, 0x6e, 0x54, 0xe5, 0xfa, 0x46, 0x55, 0xfe, 0xbd, 0x51, 0x95,
	0x9f, 0x6f, 0xd5, 0xda, 0xf5, 0xad, 0x5a, 0xfb, 0xfb, 0x56, 0xad, 0x9d, 0x19, 0xae, 0xc7, 0x16,
	0xc9, 0x9c, 0xc7, 0x30, 0x3e, 0xc3, 0x1e, 0x9d, 0x2f, 0x43, 0xdb, 0x37, 0xd6, 0xb7, 0xac, 0xef,
	0xd6, 0x57, 0x3a, 0x71, 0xc5, 0x9a, 0x37, 0xc4, 0x24, 0xfc, 0xf0, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9a, 0xf9, 0x0b, 0xa8, 0xf5, 0x09, 0x00, 0x00,
}

func (m *KeysharePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeysharePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeysharePacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_RequestDecryptionKeyPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_RequestDecryptionKeyPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestDecryptionKeyPacket != nil {
		{
			size, err := m.RequestDecryptionKeyPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_GetDecryptionKeyPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_GetDecryptionKeyPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetDecryptionKeyPacket != nil {
		{
			size, err := m.GetDecryptionKeyPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_DecryptionKeyDataPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_DecryptionKeyDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecryptionKeyDataPacket != nil {
		{
			size, err := m.DecryptionKeyDataPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_PrivateDecryptionKeyDataPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_PrivateDecryptionKeyDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateDecryptionKeyDataPacket != nil {
		{
			size, err := m.PrivateDecryptionKeyDataPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_CurrentKeysPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_CurrentKeysPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CurrentKeysPacket != nil {
		{
			size, err := m.CurrentKeysPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_RequestPrivateDecryptionKeyPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_RequestPrivateDecryptionKeyPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestPrivateDecryptionKeyPacket != nil {
		{
			size, err := m.RequestPrivateDecryptionKeyPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *KeysharePacketData_GetPrivateDecryptionKeyPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysharePacketData_GetPrivateDecryptionKeyPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GetPrivateDecryptionKeyPacket != nil {
		{
			size, err := m.GetPrivateDecryptionKeyPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestDecryptionKeyPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDecryptionKeyPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKeyPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EstimatedDelay != nil {
		n9, err9 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.EstimatedDelay, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.EstimatedDelay):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintPacket(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDecryptionKeyPacketData_ProposalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKeyPacketData_ProposalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ProposalId)
	copy(dAtA[i:], m.ProposalId)
	i = encodeVarintPacket(dAtA, i, uint64(len(m.ProposalId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RequestDecryptionKeyPacketData_Identity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKeyPacketData_Identity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Identity)
	copy(dAtA[i:], m.Identity)
	i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *RequestPrivateDecryptionKeyPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPrivateDecryptionKeyPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPrivateDecryptionKeyPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPrivateDecryptionKeyPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPrivateDecryptionKeyPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPrivateDecryptionKeyPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDecryptionKeyPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDecryptionKeyPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKeyPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDecryptionKeyPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDecryptionKeyPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDecryptionKeyPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDecryptionKeyPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDecryptionKeyPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDecryptionKeyPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPrivateDecryptionKeyPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivateDecryptionKeyPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrivateDecryptionKeyPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecpPubkey) > 0 {
		i -= len(m.SecpPubkey)
		copy(dAtA[i:], m.SecpPubkey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.SecpPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPrivateDecryptionKeyPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivateDecryptionKeyPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrivateDecryptionKeyPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DecryptionKeyDataPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecryptionKeyDataPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecryptionKeyDataPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retries != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AggrHeight) > 0 {
		i -= len(m.AggrHeight)
		copy(dAtA[i:], m.AggrHeight)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.AggrHeight)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DecryptionKey) > 0 {
		i -= len(m.DecryptionKey)
		copy(dAtA[i:], m.DecryptionKey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DecryptionKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecryptionKeyPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecryptionKeyPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecryptionKeyPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PrivateDecryptionKeyDataPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateDecryptionKeyDataPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateDecryptionKeyDataPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateDecryptionKey) > 0 {
		for iNdEx := len(m.PrivateDecryptionKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateDecryptionKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateDecryptionKeyPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateDecryptionKeyPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateDecryptionKeyPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CurrentKeysPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentKeysPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentKeysPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CurrentKeysPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentKeysPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentKeysPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueuedKey != nil {
		{
			size, err := m.QueuedKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ActiveKey != nil {
		{
			size, err := m.ActiveKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeysharePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *KeysharePacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_RequestDecryptionKeyPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestDecryptionKeyPacket != nil {
		l = m.RequestDecryptionKeyPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_GetDecryptionKeyPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetDecryptionKeyPacket != nil {
		l = m.GetDecryptionKeyPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_DecryptionKeyDataPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecryptionKeyDataPacket != nil {
		l = m.DecryptionKeyDataPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_PrivateDecryptionKeyDataPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateDecryptionKeyDataPacket != nil {
		l = m.PrivateDecryptionKeyDataPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_CurrentKeysPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentKeysPacket != nil {
		l = m.CurrentKeysPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_RequestPrivateDecryptionKeyPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestPrivateDecryptionKeyPacket != nil {
		l = m.RequestPrivateDecryptionKeyPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *KeysharePacketData_GetPrivateDecryptionKeyPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetPrivateDecryptionKeyPacket != nil {
		l = m.GetPrivateDecryptionKeyPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestDecryptionKeyPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Id != nil {
		n += m.Id.Size()
	}
	if m.EstimatedDelay != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.EstimatedDelay)
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RequestDecryptionKeyPacketData_ProposalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	n += 1 + l + sovPacket(uint64(l))
	return n
}
func (m *RequestDecryptionKeyPacketData_Identity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	n += 1 + l + sovPacket(uint64(l))
	return n
}
func (m *RequestPrivateDecryptionKeyPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RequestPrivateDecryptionKeyPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RequestDecryptionKeyPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *GetDecryptionKeyPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *GetDecryptionKeyPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPrivateDecryptionKeyPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.SecpPubkey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *GetPrivateDecryptionKeyPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DecryptionKeyDataPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DecryptionKey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.AggrHeight)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Retries != 0 {
		n += 1 + sovPacket(uint64(m.Retries))
	}
	return n
}

func (m *DecryptionKeyPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PrivateDecryptionKeyDataPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if len(m.PrivateDecryptionKey) > 0 {
		for _, e := range m.PrivateDecryptionKey {
			l = e.Size()
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	return n
}

func (m *PrivateDecryptionKeyPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CurrentKeysPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CurrentKeysPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveKey != nil {
		l = m.ActiveKey.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.QueuedKey != nil {
		l = m.QueuedKey.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeysharePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeysharePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeysharePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDecryptionKeyPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDecryptionKeyPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_RequestDecryptionKeyPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDecryptionKeyPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetDecryptionKeyPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_GetDecryptionKeyPacket{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKeyDataPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecryptionKeyDataPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_DecryptionKeyDataPacket{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKeyDataPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrivateDecryptionKeyDataPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_PrivateDecryptionKeyDataPacket{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentKeysPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CurrentKeysPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_CurrentKeysPacket{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPrivateDecryptionKeyPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestPrivateDecryptionKeyPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_RequestPrivateDecryptionKeyPacket{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPrivateDecryptionKeyPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetPrivateDecryptionKeyPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &KeysharePacketData_GetPrivateDecryptionKeyPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDecryptionKeyPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDecryptionKeyPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &RequestDecryptionKeyPacketData_ProposalId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &RequestDecryptionKeyPacketData_Identity{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EstimatedDelay == nil {
				m.EstimatedDelay = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.EstimatedDelay, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPrivateDecryptionKeyPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPrivateDecryptionKeyPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPrivateDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDecryptionKeyPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDecryptionKeyPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDecryptionKeyPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDecryptionKeyPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDecryptionKeyPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDecryptionKeyPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivateDecryptionKeyPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivateDecryptionKeyPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivateDecryptionKeyPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecpPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecpPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivateDecryptionKeyPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivateDecryptionKeyPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivateDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecryptionKeyDataPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecryptionKeyDataPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecryptionKeyDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptionKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggrHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggrHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecryptionKeyPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecryptionKeyPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateDecryptionKeyDataPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateDecryptionKeyDataPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateDecryptionKeyDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDecryptionKey = append(m.PrivateDecryptionKey, &types.PrivateDecryptionKey{})
			if err := m.PrivateDecryptionKey[len(m.PrivateDecryptionKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateDecryptionKeyPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateDecryptionKeyPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateDecryptionKeyPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentKeysPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentKeysPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentKeysPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentKeysPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentKeysPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentKeysPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveKey == nil {
				m.ActiveKey = &types.ActivePublicKey{}
			}
			if err := m.ActiveKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueuedKey == nil {
				m.QueuedKey = &types.QueuedPublicKey{}
			}
			if err := m.QueuedKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
