// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/common/shared_types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RequestDecryptionKey defines a struct for the data payload
type RequestDecryptionKey struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// id can either be a identity or a proposal id
	//
	// Types that are valid to be assigned to Id:
	//	*RequestDecryptionKey_ProposalId
	//	*RequestDecryptionKey_Identity
	Id             isRequestDecryptionKey_Id `protobuf_oneof:"id"`
	EstimatedDelay *time.Duration            `protobuf:"bytes,4,opt,name=estimated_delay,json=estimatedDelay,proto3,stdduration" json:"estimated_delay,omitempty"`
}

func (m *RequestDecryptionKey) Reset()         { *m = RequestDecryptionKey{} }
func (m *RequestDecryptionKey) String() string { return proto.CompactTextString(m) }
func (*RequestDecryptionKey) ProtoMessage()    {}
func (*RequestDecryptionKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{0}
}
func (m *RequestDecryptionKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDecryptionKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDecryptionKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDecryptionKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDecryptionKey.Merge(m, src)
}
func (m *RequestDecryptionKey) XXX_Size() int {
	return m.Size()
}
func (m *RequestDecryptionKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDecryptionKey.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDecryptionKey proto.InternalMessageInfo

type isRequestDecryptionKey_Id interface {
	isRequestDecryptionKey_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestDecryptionKey_ProposalId struct {
	ProposalId string `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3,oneof" json:"proposal_id,omitempty"`
}
type RequestDecryptionKey_Identity struct {
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
}

func (*RequestDecryptionKey_ProposalId) isRequestDecryptionKey_Id() {}
func (*RequestDecryptionKey_Identity) isRequestDecryptionKey_Id()   {}

func (m *RequestDecryptionKey) GetId() isRequestDecryptionKey_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestDecryptionKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *RequestDecryptionKey) GetProposalId() string {
	if x, ok := m.GetId().(*RequestDecryptionKey_ProposalId); ok {
		return x.ProposalId
	}
	return ""
}

func (m *RequestDecryptionKey) GetIdentity() string {
	if x, ok := m.GetId().(*RequestDecryptionKey_Identity); ok {
		return x.Identity
	}
	return ""
}

func (m *RequestDecryptionKey) GetEstimatedDelay() *time.Duration {
	if m != nil {
		return m.EstimatedDelay
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestDecryptionKey) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestDecryptionKey_ProposalId)(nil),
		(*RequestDecryptionKey_Identity)(nil),
	}
}

// RequestDecryptionKeyResponse defines the response to the RequestDecryptionKey message
type RequestDecryptionKeyResponse struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey   string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *RequestDecryptionKeyResponse) Reset()         { *m = RequestDecryptionKeyResponse{} }
func (m *RequestDecryptionKeyResponse) String() string { return proto.CompactTextString(m) }
func (*RequestDecryptionKeyResponse) ProtoMessage()    {}
func (*RequestDecryptionKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{1}
}
func (m *RequestDecryptionKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDecryptionKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDecryptionKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDecryptionKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDecryptionKeyResponse.Merge(m, src)
}
func (m *RequestDecryptionKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestDecryptionKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDecryptionKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDecryptionKeyResponse proto.InternalMessageInfo

func (m *RequestDecryptionKeyResponse) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *RequestDecryptionKeyResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// GetDecryptionKey defines a struct for the data payload
type GetDecryptionKey struct {
	IsGovernanceProposal bool   `protobuf:"varint,1,opt,name=is_governance_proposal,json=isGovernanceProposal,proto3" json:"is_governance_proposal,omitempty"`
	ProposalId           string `protobuf:"bytes,2,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Identity             string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *GetDecryptionKey) Reset()         { *m = GetDecryptionKey{} }
func (m *GetDecryptionKey) String() string { return proto.CompactTextString(m) }
func (*GetDecryptionKey) ProtoMessage()    {}
func (*GetDecryptionKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{2}
}
func (m *GetDecryptionKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDecryptionKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDecryptionKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDecryptionKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDecryptionKey.Merge(m, src)
}
func (m *GetDecryptionKey) XXX_Size() int {
	return m.Size()
}
func (m *GetDecryptionKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDecryptionKey.DiscardUnknown(m)
}

var xxx_messageInfo_GetDecryptionKey proto.InternalMessageInfo

func (m *GetDecryptionKey) GetIsGovernanceProposal() bool {
	if m != nil {
		return m.IsGovernanceProposal
	}
	return false
}

func (m *GetDecryptionKey) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *GetDecryptionKey) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// GetDecryptionKeyResponse defines the response to the GetDecryptionKey message
type GetDecryptionKeyResponse struct {
}

func (m *GetDecryptionKeyResponse) Reset()         { *m = GetDecryptionKeyResponse{} }
func (m *GetDecryptionKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetDecryptionKeyResponse) ProtoMessage()    {}
func (*GetDecryptionKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{3}
}
func (m *GetDecryptionKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDecryptionKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDecryptionKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDecryptionKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDecryptionKeyResponse.Merge(m, src)
}
func (m *GetDecryptionKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDecryptionKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDecryptionKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDecryptionKeyResponse proto.InternalMessageInfo

// GetPrivateDecryptionKey defines a struct for the data payload
type GetPrivateDecryptionKey struct {
	Identity   string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Requester  string `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	SecpPubkey string `protobuf:"bytes,3,opt,name=secp_pubkey,json=secpPubkey,proto3" json:"secp_pubkey,omitempty"`
}

func (m *GetPrivateDecryptionKey) Reset()         { *m = GetPrivateDecryptionKey{} }
func (m *GetPrivateDecryptionKey) String() string { return proto.CompactTextString(m) }
func (*GetPrivateDecryptionKey) ProtoMessage()    {}
func (*GetPrivateDecryptionKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{4}
}
func (m *GetPrivateDecryptionKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrivateDecryptionKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrivateDecryptionKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrivateDecryptionKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrivateDecryptionKey.Merge(m, src)
}
func (m *GetPrivateDecryptionKey) XXX_Size() int {
	return m.Size()
}
func (m *GetPrivateDecryptionKey) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrivateDecryptionKey.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrivateDecryptionKey proto.InternalMessageInfo

func (m *GetPrivateDecryptionKey) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *GetPrivateDecryptionKey) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *GetPrivateDecryptionKey) GetSecpPubkey() string {
	if m != nil {
		return m.SecpPubkey
	}
	return ""
}

// GetPrivateDecryptionKeyResponse defines the response to the GetPrivateDecryptionKey message
type GetPrivateDecryptionKeyResponse struct {
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *GetPrivateDecryptionKeyResponse) Reset()         { *m = GetPrivateDecryptionKeyResponse{} }
func (m *GetPrivateDecryptionKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetPrivateDecryptionKeyResponse) ProtoMessage()    {}
func (*GetPrivateDecryptionKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{5}
}
func (m *GetPrivateDecryptionKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrivateDecryptionKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrivateDecryptionKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPrivateDecryptionKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrivateDecryptionKeyResponse.Merge(m, src)
}
func (m *GetPrivateDecryptionKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPrivateDecryptionKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrivateDecryptionKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrivateDecryptionKeyResponse proto.InternalMessageInfo

func (m *GetPrivateDecryptionKeyResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

// ActivePublicKey defines the pubkey currently in use
type ActivePublicKey struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Expiry    uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *ActivePublicKey) Reset()         { *m = ActivePublicKey{} }
func (m *ActivePublicKey) String() string { return proto.CompactTextString(m) }
func (*ActivePublicKey) ProtoMessage()    {}
func (*ActivePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{6}
}
func (m *ActivePublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivePublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivePublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivePublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePublicKey.Merge(m, src)
}
func (m *ActivePublicKey) XXX_Size() int {
	return m.Size()
}
func (m *ActivePublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePublicKey proto.InternalMessageInfo

func (m *ActivePublicKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ActivePublicKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ActivePublicKey) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// QueuedPublicKey defines the pubkey that (when set) will replace the acive pubkey
// when it expires
type QueuedPublicKey struct {
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Expiry    uint64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *QueuedPublicKey) Reset()         { *m = QueuedPublicKey{} }
func (m *QueuedPublicKey) String() string { return proto.CompactTextString(m) }
func (*QueuedPublicKey) ProtoMessage()    {}
func (*QueuedPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{7}
}
func (m *QueuedPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedPublicKey.Merge(m, src)
}
func (m *QueuedPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *QueuedPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedPublicKey proto.InternalMessageInfo

func (m *QueuedPublicKey) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *QueuedPublicKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueuedPublicKey) GetExpiry() uint64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// RequestPrivateDecryptionKey defines the structure to request for
// encrypted and unaggregated keyshares
type RequestPrivateDecryptionKey struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *RequestPrivateDecryptionKey) Reset()         { *m = RequestPrivateDecryptionKey{} }
func (m *RequestPrivateDecryptionKey) String() string { return proto.CompactTextString(m) }
func (*RequestPrivateDecryptionKey) ProtoMessage()    {}
func (*RequestPrivateDecryptionKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{8}
}
func (m *RequestPrivateDecryptionKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPrivateDecryptionKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPrivateDecryptionKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPrivateDecryptionKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPrivateDecryptionKey.Merge(m, src)
}
func (m *RequestPrivateDecryptionKey) XXX_Size() int {
	return m.Size()
}
func (m *RequestPrivateDecryptionKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPrivateDecryptionKey.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPrivateDecryptionKey proto.InternalMessageInfo

func (m *RequestPrivateDecryptionKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *RequestPrivateDecryptionKey) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

// PrivateDecryptionKey defines the storage structure for
// the list of encrypted keyshares (unaggregated)
type PrivateDecryptionKey struct {
	Requester        string                      `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	PrivateKeyshares []*IndexedEncryptedKeyshare `protobuf:"bytes,2,rep,name=private_keyshares,json=privateKeyshares,proto3" json:"private_keyshares,omitempty"`
}

func (m *PrivateDecryptionKey) Reset()         { *m = PrivateDecryptionKey{} }
func (m *PrivateDecryptionKey) String() string { return proto.CompactTextString(m) }
func (*PrivateDecryptionKey) ProtoMessage()    {}
func (*PrivateDecryptionKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{9}
}
func (m *PrivateDecryptionKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateDecryptionKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateDecryptionKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateDecryptionKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDecryptionKey.Merge(m, src)
}
func (m *PrivateDecryptionKey) XXX_Size() int {
	return m.Size()
}
func (m *PrivateDecryptionKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDecryptionKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDecryptionKey proto.InternalMessageInfo

func (m *PrivateDecryptionKey) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *PrivateDecryptionKey) GetPrivateKeyshares() []*IndexedEncryptedKeyshare {
	if m != nil {
		return m.PrivateKeyshares
	}
	return nil
}

// IndexedEncryptedKeyshare defines the storage of submitted encrypted
// keyshares along with their indices (can be decrypted and aggregated)
type IndexedEncryptedKeyshare struct {
	EncryptedKeyshareValue string `protobuf:"bytes,1,opt,name=encrypted_keyshare_value,json=encryptedKeyshareValue,proto3" json:"encrypted_keyshare_value,omitempty"`
	EncryptedKeyshareIndex uint64 `protobuf:"varint,2,opt,name=encrypted_keyshare_index,json=encryptedKeyshareIndex,proto3" json:"encrypted_keyshare_index,omitempty"`
}

func (m *IndexedEncryptedKeyshare) Reset()         { *m = IndexedEncryptedKeyshare{} }
func (m *IndexedEncryptedKeyshare) String() string { return proto.CompactTextString(m) }
func (*IndexedEncryptedKeyshare) ProtoMessage()    {}
func (*IndexedEncryptedKeyshare) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{10}
}
func (m *IndexedEncryptedKeyshare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedEncryptedKeyshare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedEncryptedKeyshare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedEncryptedKeyshare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedEncryptedKeyshare.Merge(m, src)
}
func (m *IndexedEncryptedKeyshare) XXX_Size() int {
	return m.Size()
}
func (m *IndexedEncryptedKeyshare) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedEncryptedKeyshare.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedEncryptedKeyshare proto.InternalMessageInfo

func (m *IndexedEncryptedKeyshare) GetEncryptedKeyshareValue() string {
	if m != nil {
		return m.EncryptedKeyshareValue
	}
	return ""
}

func (m *IndexedEncryptedKeyshare) GetEncryptedKeyshareIndex() uint64 {
	if m != nil {
		return m.EncryptedKeyshareIndex
	}
	return 0
}

type Bid struct {
	Bidder    string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	SealedBid string `protobuf:"bytes,2,opt,name=sealed_bid,json=sealedBid,proto3" json:"sealed_bid,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{11}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetSealedBid() string {
	if m != nil {
		return m.SealedBid
	}
	return ""
}

type DecryptedBid struct {
	Bidder string      `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Bid    *types.Coin `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (m *DecryptedBid) Reset()         { *m = DecryptedBid{} }
func (m *DecryptedBid) String() string { return proto.CompactTextString(m) }
func (*DecryptedBid) ProtoMessage()    {}
func (*DecryptedBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{12}
}
func (m *DecryptedBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecryptedBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecryptedBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecryptedBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecryptedBid.Merge(m, src)
}
func (m *DecryptedBid) XXX_Size() int {
	return m.Size()
}
func (m *DecryptedBid) XXX_DiscardUnknown() {
	xxx_messageInfo_DecryptedBid.DiscardUnknown(m)
}

var xxx_messageInfo_DecryptedBid proto.InternalMessageInfo

func (m *DecryptedBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *DecryptedBid) GetBid() *types.Coin {
	if m != nil {
		return m.Bid
	}
	return nil
}

type AuctionDetail struct {
	Creator       string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Identity      string          `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Pubkey        string          `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	AuctionId     uint64          `protobuf:"varint,4,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	ResolveAt     uint64          `protobuf:"varint,5,opt,name=resolve_at,json=resolveAt,proto3" json:"resolve_at,omitempty"`
	Bids          []*Bid          `protobuf:"bytes,6,rep,name=bids,proto3" json:"bids,omitempty"`
	DecryptedBids []*DecryptedBid `protobuf:"bytes,7,rep,name=decrypted_bids,json=decryptedBids,proto3" json:"decrypted_bids,omitempty"`
	IsTimed       bool            `protobuf:"varint,8,opt,name=is_timed,json=isTimed,proto3" json:"is_timed,omitempty"`
	IsResolved    bool            `protobuf:"varint,9,opt,name=is_resolved,json=isResolved,proto3" json:"is_resolved,omitempty"`
	WinningBid    *DecryptedBid   `protobuf:"bytes,10,opt,name=winning_bid,json=winningBid,proto3" json:"winning_bid,omitempty"`
	FailReason    string          `protobuf:"bytes,11,opt,name=fail_reason,json=failReason,proto3" json:"fail_reason,omitempty"`
	BidDenom      string          `protobuf:"bytes,12,opt,name=bid_denom,json=bidDenom,proto3" json:"bid_denom,omitempty"`
}

func (m *AuctionDetail) Reset()         { *m = AuctionDetail{} }
func (m *AuctionDetail) String() string { return proto.CompactTextString(m) }
func (*AuctionDetail) ProtoMessage()    {}
func (*AuctionDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{13}
}
func (m *AuctionDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionDetail.Merge(m, src)
}
func (m *AuctionDetail) XXX_Size() int {
	return m.Size()
}
func (m *AuctionDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionDetail.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionDetail proto.InternalMessageInfo

func (m *AuctionDetail) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *AuctionDetail) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *AuctionDetail) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *AuctionDetail) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *AuctionDetail) GetResolveAt() uint64 {
	if m != nil {
		return m.ResolveAt
	}
	return 0
}

func (m *AuctionDetail) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *AuctionDetail) GetDecryptedBids() []*DecryptedBid {
	if m != nil {
		return m.DecryptedBids
	}
	return nil
}

func (m *AuctionDetail) GetIsTimed() bool {
	if m != nil {
		return m.IsTimed
	}
	return false
}

func (m *AuctionDetail) GetIsResolved() bool {
	if m != nil {
		return m.IsResolved
	}
	return false
}

func (m *AuctionDetail) GetWinningBid() *DecryptedBid {
	if m != nil {
		return m.WinningBid
	}
	return nil
}

func (m *AuctionDetail) GetFailReason() string {
	if m != nil {
		return m.FailReason
	}
	return ""
}

func (m *AuctionDetail) GetBidDenom() string {
	if m != nil {
		return m.BidDenom
	}
	return ""
}

type AuctionDetailList struct {
	AuctionDetail []AuctionDetail `protobuf:"bytes,1,rep,name=auction_detail,json=auctionDetail,proto3" json:"auction_detail"`
}

func (m *AuctionDetailList) Reset()         { *m = AuctionDetailList{} }
func (m *AuctionDetailList) String() string { return proto.CompactTextString(m) }
func (*AuctionDetailList) ProtoMessage()    {}
func (*AuctionDetailList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{14}
}
func (m *AuctionDetailList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionDetailList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionDetailList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionDetailList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionDetailList.Merge(m, src)
}
func (m *AuctionDetailList) XXX_Size() int {
	return m.Size()
}
func (m *AuctionDetailList) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionDetailList.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionDetailList proto.InternalMessageInfo

func (m *AuctionDetailList) GetAuctionDetail() []AuctionDetail {
	if m != nil {
		return m.AuctionDetail
	}
	return nil
}

type QueuedAuctionDecryption struct {
	AuctionDetail *AuctionDetail `protobuf:"bytes,1,opt,name=auction_detail,json=auctionDetail,proto3" json:"auction_detail,omitempty"`
}

func (m *QueuedAuctionDecryption) Reset()         { *m = QueuedAuctionDecryption{} }
func (m *QueuedAuctionDecryption) String() string { return proto.CompactTextString(m) }
func (*QueuedAuctionDecryption) ProtoMessage()    {}
func (*QueuedAuctionDecryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{15}
}
func (m *QueuedAuctionDecryption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedAuctionDecryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedAuctionDecryption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedAuctionDecryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedAuctionDecryption.Merge(m, src)
}
func (m *QueuedAuctionDecryption) XXX_Size() int {
	return m.Size()
}
func (m *QueuedAuctionDecryption) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedAuctionDecryption.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedAuctionDecryption proto.InternalMessageInfo

func (m *QueuedAuctionDecryption) GetAuctionDetail() *AuctionDetail {
	if m != nil {
		return m.AuctionDetail
	}
	return nil
}

type Bidder struct {
	Address   string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Delegated *types.Coin `protobuf:"bytes,2,opt,name=delegated,proto3" json:"delegated,omitempty"`
	Active    bool        `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *Bidder) Reset()         { *m = Bidder{} }
func (m *Bidder) String() string { return proto.CompactTextString(m) }
func (*Bidder) ProtoMessage()    {}
func (*Bidder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b708507d1b3951ff, []int{16}
}
func (m *Bidder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bidder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bidder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bidder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bidder.Merge(m, src)
}
func (m *Bidder) XXX_Size() int {
	return m.Size()
}
func (m *Bidder) XXX_DiscardUnknown() {
	xxx_messageInfo_Bidder.DiscardUnknown(m)
}

var xxx_messageInfo_Bidder proto.InternalMessageInfo

func (m *Bidder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Bidder) GetDelegated() *types.Coin {
	if m != nil {
		return m.Delegated
	}
	return nil
}

func (m *Bidder) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func init() {
	proto.RegisterType((*RequestDecryptionKey)(nil), "fairyring.common.RequestDecryptionKey")
	proto.RegisterType((*RequestDecryptionKeyResponse)(nil), "fairyring.common.RequestDecryptionKeyResponse")
	proto.RegisterType((*GetDecryptionKey)(nil), "fairyring.common.GetDecryptionKey")
	proto.RegisterType((*GetDecryptionKeyResponse)(nil), "fairyring.common.GetDecryptionKeyResponse")
	proto.RegisterType((*GetPrivateDecryptionKey)(nil), "fairyring.common.GetPrivateDecryptionKey")
	proto.RegisterType((*GetPrivateDecryptionKeyResponse)(nil), "fairyring.common.GetPrivateDecryptionKeyResponse")
	proto.RegisterType((*ActivePublicKey)(nil), "fairyring.common.ActivePublicKey")
	proto.RegisterType((*QueuedPublicKey)(nil), "fairyring.common.QueuedPublicKey")
	proto.RegisterType((*RequestPrivateDecryptionKey)(nil), "fairyring.common.RequestPrivateDecryptionKey")
	proto.RegisterType((*PrivateDecryptionKey)(nil), "fairyring.common.PrivateDecryptionKey")
	proto.RegisterType((*IndexedEncryptedKeyshare)(nil), "fairyring.common.IndexedEncryptedKeyshare")
	proto.RegisterType((*Bid)(nil), "fairyring.common.Bid")
	proto.RegisterType((*DecryptedBid)(nil), "fairyring.common.DecryptedBid")
	proto.RegisterType((*AuctionDetail)(nil), "fairyring.common.AuctionDetail")
	proto.RegisterType((*AuctionDetailList)(nil), "fairyring.common.AuctionDetailList")
	proto.RegisterType((*QueuedAuctionDecryption)(nil), "fairyring.common.QueuedAuctionDecryption")
	proto.RegisterType((*Bidder)(nil), "fairyring.common.Bidder")
}

func init() {
	proto.RegisterFile("fairyring/common/shared_types.proto", fileDescriptor_b708507d1b3951ff)
}

var fileDescriptor_b708507d1b3951ff = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0xb3, 0x4b, 0x92, 0x7d, 0xdb, 0xa4, 0xa9, 0x15, 0x52, 0x77, 0x1b, 0x76, 0x83, 0xb9,
	0x04, 0x10, 0xb6, 0x5a, 0x90, 0x00, 0x09, 0x09, 0x65, 0xd9, 0x36, 0x8d, 0xda, 0x43, 0x70, 0x11,
	0x48, 0x5c, 0xac, 0xb1, 0xe7, 0x65, 0x3b, 0xaa, 0xd7, 0x63, 0x3c, 0xe3, 0x25, 0xfb, 0x01, 0x38,
	0x82, 0x38, 0xf2, 0x75, 0xb8, 0xe5, 0xd8, 0x23, 0x27, 0x40, 0xc9, 0x17, 0x41, 0x33, 0x1e, 0x7b,
	0xff, 0x64, 0xb7, 0x20, 0xa4, 0xde, 0xfc, 0xfe, 0xcd, 0xfb, 0xbd, 0xdf, 0x7b, 0xf3, 0x3c, 0xf0,
	0xde, 0x39, 0x61, 0xf9, 0x24, 0x67, 0xe9, 0xd0, 0x8f, 0xf9, 0x68, 0xc4, 0x53, 0x5f, 0xbc, 0x20,
	0x39, 0xd2, 0x50, 0x4e, 0x32, 0x14, 0x5e, 0x96, 0x73, 0xc9, 0xed, 0xdd, 0xda, 0xc9, 0x2b, 0x9d,
	0x3a, 0x7b, 0x43, 0x3e, 0xe4, 0xda, 0xe8, 0xab, 0xaf, 0xd2, 0xaf, 0xd3, 0x1d, 0x72, 0x3e, 0x4c,
	0xd0, 0xd7, 0x52, 0x54, 0x9c, 0xfb, 0xb4, 0xc8, 0x89, 0x64, 0x3c, 0xad, 0xec, 0x31, 0x17, 0x23,
	0x2e, 0xfc, 0x88, 0x08, 0xf4, 0xc7, 0x0f, 0x22, 0x94, 0xe4, 0x81, 0x1f, 0x73, 0x66, 0xec, 0xee,
	0xef, 0x16, 0xec, 0x05, 0xf8, 0x43, 0x81, 0x42, 0x0e, 0x30, 0xce, 0x27, 0x99, 0x8a, 0x7d, 0x8a,
	0x13, 0xdb, 0x81, 0xcd, 0x38, 0x47, 0x22, 0x79, 0xee, 0x58, 0x87, 0xd6, 0x51, 0x2b, 0xa8, 0x44,
	0xfb, 0x5d, 0x68, 0x67, 0x39, 0xcf, 0xb8, 0x20, 0x49, 0xc8, 0xa8, 0xb3, 0xae, 0xac, 0x4f, 0xd6,
	0x02, 0xa8, 0x94, 0xa7, 0xd4, 0x3e, 0x80, 0x2d, 0x46, 0x31, 0x95, 0x4c, 0x4e, 0x9c, 0x86, 0xb1,
	0xd7, 0x1a, 0xfb, 0x09, 0xdc, 0x46, 0x21, 0xd9, 0x88, 0x48, 0xa4, 0x21, 0xc5, 0x84, 0x4c, 0x9c,
	0xe6, 0xa1, 0x75, 0xd4, 0x7e, 0x78, 0xcf, 0x2b, 0xab, 0xf1, 0xaa, 0x6a, 0xbc, 0x81, 0xa9, 0xa6,
	0xdf, 0xfc, 0xed, 0xaf, 0x9e, 0x15, 0xec, 0xd4, 0x71, 0x03, 0x15, 0xd6, 0x6f, 0xc2, 0x3a, 0xa3,
	0x6e, 0x00, 0x07, 0xcb, 0x4a, 0x08, 0x50, 0x64, 0x3c, 0x15, 0x68, 0x77, 0x66, 0xd0, 0x94, 0xb5,
	0x4c, 0xb1, 0xec, 0xc3, 0x46, 0x56, 0x44, 0x2f, 0x71, 0x52, 0xd6, 0x11, 0x18, 0xc9, 0xfd, 0xc9,
	0x82, 0xdd, 0x13, 0x5c, 0xe0, 0xe4, 0x13, 0xd8, 0x67, 0x22, 0x1c, 0xf2, 0x31, 0xe6, 0x29, 0x49,
	0x63, 0x0c, 0xab, 0x92, 0xf5, 0xb1, 0x5b, 0xc1, 0x1e, 0x13, 0x27, 0xb5, 0xf1, 0xcc, 0xd8, 0xec,
	0xde, 0x12, 0xbe, 0xe6, 0xd8, 0xea, 0x2c, 0xb2, 0x35, 0xc5, 0xe7, 0x76, 0xc0, 0x59, 0x84, 0x51,
	0xd5, 0xe5, 0x4a, 0xb8, 0x7b, 0x82, 0xf2, 0x2c, 0x67, 0x63, 0x22, 0x71, 0x1e, 0xe9, 0xeb, 0x4a,
	0x3e, 0x80, 0x56, 0x5e, 0xd2, 0x85, 0xb9, 0x41, 0x33, 0x55, 0x28, 0xb4, 0x02, 0xe3, 0x2c, 0x34,
	0xac, 0x94, 0x78, 0x40, 0xa9, 0xce, 0x4a, 0x66, 0x3e, 0x87, 0xde, 0x8a, 0xac, 0x35, 0xe1, 0x53,
	0x52, 0xad, 0x39, 0x52, 0x23, 0xb8, 0x7d, 0x1c, 0x4b, 0x36, 0xc6, 0xb3, 0x22, 0x4a, 0x58, 0xac,
	0x80, 0xbe, 0x03, 0x90, 0x69, 0x21, 0x9c, 0xba, 0xb7, 0xb2, 0xda, 0x3c, 0x33, 0x85, 0xeb, 0xf3,
	0x53, 0xb8, 0x0f, 0x1b, 0x78, 0x91, 0xb1, 0xbc, 0x84, 0xd8, 0x0c, 0x8c, 0xa4, 0x72, 0x7c, 0x5d,
	0x60, 0x81, 0xf4, 0x0d, 0xe6, 0x78, 0x0e, 0xf7, 0xcd, 0xc0, 0x2d, 0x25, 0x7f, 0xf5, 0xd5, 0x99,
	0x6d, 0xcb, 0xfa, 0x42, 0xa7, 0x7f, 0xb6, 0x60, 0x6f, 0xe9, 0x71, 0x73, 0xfd, 0xb2, 0x16, 0xfb,
	0xf5, 0x1d, 0xdc, 0xc9, 0xca, 0x28, 0x55, 0x9d, 0xde, 0x24, 0xc2, 0x59, 0x3f, 0x6c, 0x1c, 0xb5,
	0x1f, 0x7e, 0xe0, 0x2d, 0x2e, 0x11, 0xef, 0x34, 0xa5, 0x78, 0x81, 0xf4, 0x51, 0xaa, 0x13, 0x20,
	0x7d, 0x6a, 0x42, 0x82, 0x5d, 0x73, 0x48, 0xa5, 0x10, 0xee, 0x2f, 0x16, 0x38, 0xab, 0xdc, 0xed,
	0xcf, 0xc0, 0xc1, 0x4a, 0x59, 0xe7, 0x0d, 0xc7, 0x24, 0x29, 0xd0, 0x40, 0xdc, 0xc7, 0xc5, 0xa0,
	0x6f, 0x95, 0x75, 0x45, 0x24, 0x53, 0x89, 0x34, 0x25, 0xcd, 0x25, 0x91, 0x1a, 0x86, 0xfb, 0x05,
	0x34, 0xfa, 0x8c, 0xaa, 0xa6, 0x44, 0x8c, 0xd2, 0x9a, 0x0b, 0x23, 0xa9, 0x2e, 0x0b, 0x24, 0x09,
	0xd2, 0x30, 0xaa, 0x6f, 0x59, 0xab, 0xd4, 0xf4, 0x19, 0x75, 0x9f, 0xc3, 0x2d, 0x43, 0xab, 0x96,
	0x57, 0x1e, 0xf3, 0x21, 0x34, 0x54, 0x7c, 0xc3, 0x2c, 0xa4, 0x72, 0x7d, 0x7a, 0x6a, 0x7d, 0x7a,
	0x66, 0x7d, 0x7a, 0x5f, 0x71, 0x96, 0x06, 0xca, 0xcb, 0xbd, 0x6c, 0xc0, 0xf6, 0x71, 0x11, 0xab,
	0x4e, 0x0d, 0x50, 0x12, 0x96, 0xfc, 0xbf, 0xde, 0xcf, 0x5c, 0x98, 0xc6, 0xec, 0x85, 0x51, 0x35,
	0x91, 0xf2, 0x78, 0xb5, 0x39, 0x9a, 0x9a, 0x9e, 0x96, 0xd1, 0x9c, 0x52, 0x65, 0xce, 0x51, 0xf0,
	0x64, 0x8c, 0x21, 0x91, 0xce, 0x5b, 0xa5, 0xd9, 0x68, 0x8e, 0xa5, 0xfd, 0x3e, 0x34, 0x23, 0x46,
	0x85, 0xb3, 0xa1, 0xa7, 0xe1, 0xed, 0x9b, 0xd3, 0xd0, 0x67, 0x34, 0xd0, 0x2e, 0xf6, 0x23, 0xd8,
	0xa1, 0x15, 0x3b, 0xa1, 0x0e, 0xda, 0xd4, 0x41, 0xdd, 0x9b, 0x41, 0xb3, 0x2c, 0x06, 0xdb, 0x74,
	0x46, 0x12, 0xf6, 0x3d, 0xd8, 0x62, 0x22, 0x94, 0x6c, 0x84, 0xd4, 0xd9, 0xd2, 0x2b, 0x71, 0x93,
	0x89, 0x6f, 0x94, 0xa8, 0xf6, 0x0a, 0x13, 0xa1, 0x01, 0x47, 0x9d, 0x96, 0xb6, 0x02, 0x13, 0x81,
	0xd1, 0xd8, 0x5f, 0x42, 0xfb, 0x47, 0x96, 0xa6, 0x2c, 0x1d, 0xea, 0x06, 0x82, 0x6e, 0xc0, 0xbf,
	0xe5, 0x07, 0x13, 0xa2, 0x3a, 0xda, 0x83, 0xf6, 0x39, 0x61, 0x49, 0x98, 0x23, 0x11, 0x3c, 0x75,
	0xda, 0xe5, 0xe6, 0x52, 0xaa, 0x40, 0x6b, 0xec, 0xfb, 0xd0, 0x8a, 0x98, 0xfa, 0xe3, 0xa4, 0x7c,
	0xe4, 0xdc, 0x2a, 0x5b, 0x10, 0x31, 0x3a, 0x50, 0xb2, 0x4b, 0xe0, 0xce, 0x5c, 0x27, 0x9f, 0x31,
	0x21, 0xed, 0x67, 0xb0, 0x53, 0xf1, 0x4f, 0xb5, 0xd6, 0xb1, 0x34, 0x2d, 0xbd, 0x9b, 0xb0, 0xe6,
	0x82, 0xfb, 0xcd, 0xcb, 0x3f, 0x7b, 0x6b, 0xc1, 0x36, 0x99, 0x55, 0xba, 0x04, 0xee, 0x96, 0xab,
	0xa9, 0xf6, 0xad, 0xae, 0xb9, 0xfd, 0x78, 0x49, 0x22, 0xeb, 0x3f, 0x24, 0x5a, 0x4c, 0x21, 0x60,
	0xa3, 0x5f, 0xce, 0xb1, 0x03, 0x9b, 0x84, 0xd2, 0x1c, 0x85, 0xa8, 0x06, 0xd1, 0x88, 0xf6, 0xa7,
	0xd0, 0xa2, 0x98, 0xe0, 0x50, 0xfd, 0x46, 0xf5, 0x24, 0xbe, 0x76, 0xce, 0xa7, 0xbe, 0x6a, 0x4a,
	0x89, 0x5e, 0xdf, 0x7a, 0x4a, 0xb7, 0x02, 0x23, 0xf5, 0x4f, 0x2e, 0xaf, 0xba, 0xd6, 0xab, 0xab,
	0xae, 0xf5, 0xf7, 0x55, 0xd7, 0xfa, 0xf5, 0xba, 0xbb, 0xf6, 0xea, 0xba, 0xbb, 0xf6, 0xc7, 0x75,
	0x77, 0xed, 0xfb, 0x8f, 0x86, 0x4c, 0xbe, 0x28, 0x22, 0x05, 0xdd, 0x7f, 0x4c, 0x58, 0x1e, 0x25,
	0x3c, 0x7e, 0xe9, 0x4f, 0xdf, 0x3f, 0x17, 0xd5, 0x0b, 0x48, 0x3f, 0x7d, 0xa2, 0x0d, 0xfd, 0xdf,
	0xff, 0xf8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x25, 0x19, 0xc4, 0x22, 0x09, 0x00, 0x00,
}

func (m *RequestDecryptionKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDecryptionKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EstimatedDelay != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.EstimatedDelay, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.EstimatedDelay):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintSharedTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDecryptionKey_ProposalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKey_ProposalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ProposalId)
	copy(dAtA[i:], m.ProposalId)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.ProposalId)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RequestDecryptionKey_Identity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKey_Identity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Identity)
	copy(dAtA[i:], m.Identity)
	i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *RequestDecryptionKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDecryptionKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDecryptionKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDecryptionKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDecryptionKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDecryptionKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsGovernanceProposal {
		i--
		if m.IsGovernanceProposal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDecryptionKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDecryptionKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDecryptionKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPrivateDecryptionKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivateDecryptionKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrivateDecryptionKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecpPubkey) > 0 {
		i -= len(m.SecpPubkey)
		copy(dAtA[i:], m.SecpPubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.SecpPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPrivateDecryptionKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrivateDecryptionKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPrivateDecryptionKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivePublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivePublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueuedPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPrivateDecryptionKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPrivateDecryptionKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPrivateDecryptionKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateDecryptionKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateDecryptionKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateDecryptionKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateKeyshares) > 0 {
		for iNdEx := len(m.PrivateKeyshares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateKeyshares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSharedTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexedEncryptedKeyshare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedEncryptedKeyshare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedEncryptedKeyshare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncryptedKeyshareIndex != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.EncryptedKeyshareIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EncryptedKeyshareValue) > 0 {
		i -= len(m.EncryptedKeyshareValue)
		copy(dAtA[i:], m.EncryptedKeyshareValue)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.EncryptedKeyshareValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SealedBid) > 0 {
		i -= len(m.SealedBid)
		copy(dAtA[i:], m.SealedBid)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.SealedBid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecryptedBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecryptedBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecryptedBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bid != nil {
		{
			size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSharedTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuctionDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidDenom) > 0 {
		i -= len(m.BidDenom)
		copy(dAtA[i:], m.BidDenom)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.BidDenom)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FailReason) > 0 {
		i -= len(m.FailReason)
		copy(dAtA[i:], m.FailReason)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.FailReason)))
		i--
		dAtA[i] = 0x5a
	}
	if m.WinningBid != nil {
		{
			size, err := m.WinningBid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSharedTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.IsResolved {
		i--
		if m.IsResolved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsTimed {
		i--
		if m.IsTimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.DecryptedBids) > 0 {
		for iNdEx := len(m.DecryptedBids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecryptedBids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSharedTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSharedTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ResolveAt != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.ResolveAt))
		i--
		dAtA[i] = 0x28
	}
	if m.AuctionId != 0 {
		i = encodeVarintSharedTypes(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuctionDetailList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionDetailList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionDetailList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuctionDetail) > 0 {
		for iNdEx := len(m.AuctionDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuctionDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSharedTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueuedAuctionDecryption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedAuctionDecryption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedAuctionDecryption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionDetail != nil {
		{
			size, err := m.AuctionDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSharedTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bidder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bidder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bidder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Delegated != nil {
		{
			size, err := m.Delegated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSharedTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSharedTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSharedTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestDecryptionKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Id != nil {
		n += m.Id.Size()
	}
	if m.EstimatedDelay != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.EstimatedDelay)
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *RequestDecryptionKey_ProposalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposalId)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *RequestDecryptionKey_Identity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	n += 1 + l + sovSharedTypes(uint64(l))
	return n
}
func (m *RequestDecryptionKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *GetDecryptionKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsGovernanceProposal {
		n += 2
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *GetDecryptionKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPrivateDecryptionKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.SecpPubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *GetPrivateDecryptionKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *ActivePublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSharedTypes(uint64(m.Expiry))
	}
	return n
}

func (m *QueuedPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSharedTypes(uint64(m.Expiry))
	}
	return n
}

func (m *RequestPrivateDecryptionKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *PrivateDecryptionKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if len(m.PrivateKeyshares) > 0 {
		for _, e := range m.PrivateKeyshares {
			l = e.Size()
			n += 1 + l + sovSharedTypes(uint64(l))
		}
	}
	return n
}

func (m *IndexedEncryptedKeyshare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedKeyshareValue)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.EncryptedKeyshareIndex != 0 {
		n += 1 + sovSharedTypes(uint64(m.EncryptedKeyshareIndex))
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.SealedBid)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *DecryptedBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Bid != nil {
		l = m.Bid.Size()
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *AuctionDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.AuctionId != 0 {
		n += 1 + sovSharedTypes(uint64(m.AuctionId))
	}
	if m.ResolveAt != 0 {
		n += 1 + sovSharedTypes(uint64(m.ResolveAt))
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovSharedTypes(uint64(l))
		}
	}
	if len(m.DecryptedBids) > 0 {
		for _, e := range m.DecryptedBids {
			l = e.Size()
			n += 1 + l + sovSharedTypes(uint64(l))
		}
	}
	if m.IsTimed {
		n += 2
	}
	if m.IsResolved {
		n += 2
	}
	if m.WinningBid != nil {
		l = m.WinningBid.Size()
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.FailReason)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.BidDenom)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *AuctionDetailList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuctionDetail) > 0 {
		for _, e := range m.AuctionDetail {
			l = e.Size()
			n += 1 + l + sovSharedTypes(uint64(l))
		}
	}
	return n
}

func (m *QueuedAuctionDecryption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionDetail != nil {
		l = m.AuctionDetail.Size()
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	return n
}

func (m *Bidder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Delegated != nil {
		l = m.Delegated.Size()
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func sovSharedTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSharedTypes(x uint64) (n int) {
	return sovSharedTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestDecryptionKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDecryptionKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDecryptionKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &RequestDecryptionKey_ProposalId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &RequestDecryptionKey_Identity{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedDelay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EstimatedDelay == nil {
				m.EstimatedDelay = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.EstimatedDelay, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDecryptionKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDecryptionKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDecryptionKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDecryptionKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDecryptionKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDecryptionKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGovernanceProposal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGovernanceProposal = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDecryptionKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDecryptionKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDecryptionKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivateDecryptionKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivateDecryptionKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivateDecryptionKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecpPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecpPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrivateDecryptionKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrivateDecryptionKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrivateDecryptionKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPrivateDecryptionKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPrivateDecryptionKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPrivateDecryptionKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateDecryptionKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateDecryptionKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateDecryptionKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeyshares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKeyshares = append(m.PrivateKeyshares, &IndexedEncryptedKeyshare{})
			if err := m.PrivateKeyshares[len(m.PrivateKeyshares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedEncryptedKeyshare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedEncryptedKeyshare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedEncryptedKeyshare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyshareValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKeyshareValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKeyshareIndex", wireType)
			}
			m.EncryptedKeyshareIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptedKeyshareIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SealedBid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SealedBid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecryptedBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecryptedBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecryptedBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bid == nil {
				m.Bid = &types.Coin{}
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveAt", wireType)
			}
			m.ResolveAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptedBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptedBids = append(m.DecryptedBids, &DecryptedBid{})
			if err := m.DecryptedBids[len(m.DecryptedBids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTimed = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResolved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResolved = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WinningBid == nil {
				m.WinningBid = &DecryptedBid{}
			}
			if err := m.WinningBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionDetailList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionDetailList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionDetailList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionDetail = append(m.AuctionDetail, AuctionDetail{})
			if err := m.AuctionDetail[len(m.AuctionDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedAuctionDecryption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedAuctionDecryption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedAuctionDecryption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionDetail == nil {
				m.AuctionDetail = &AuctionDetail{}
			}
			if err := m.AuctionDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bidder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bidder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bidder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delegated == nil {
				m.Delegated = &types.Coin{}
			}
			if err := m.Delegated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSharedTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSharedTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSharedTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSharedTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSharedTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSharedTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSharedTypes = fmt.Errorf("proto: unexpected end of group")
)
