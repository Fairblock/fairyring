// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fairyring/pep/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/Fairblock/fairyring/x/common/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGeneralIdentityRequest is request type for the Query/GeneralIdentity RPC method.
type QueryGeneralIdentityRequest struct {
	ReqId string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (m *QueryGeneralIdentityRequest) Reset()         { *m = QueryGeneralIdentityRequest{} }
func (m *QueryGeneralIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralIdentityRequest) ProtoMessage()    {}
func (*QueryGeneralIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{2}
}
func (m *QueryGeneralIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralIdentityRequest.Merge(m, src)
}
func (m *QueryGeneralIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralIdentityRequest proto.InternalMessageInfo

func (m *QueryGeneralIdentityRequest) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

// QueryGeneralIdentityResponse is response type for the Query/GeneralIdentity RPC method.
type QueryGeneralIdentityResponse struct {
	RequestDetails *IdentityExecutionEntry `protobuf:"bytes,1,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (m *QueryGeneralIdentityResponse) Reset()         { *m = QueryGeneralIdentityResponse{} }
func (m *QueryGeneralIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralIdentityResponse) ProtoMessage()    {}
func (*QueryGeneralIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{3}
}
func (m *QueryGeneralIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralIdentityResponse.Merge(m, src)
}
func (m *QueryGeneralIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralIdentityResponse proto.InternalMessageInfo

func (m *QueryGeneralIdentityResponse) GetRequestDetails() *IdentityExecutionEntry {
	if m != nil {
		return m.RequestDetails
	}
	return nil
}

// QueryGeneralIdentityAllRequest is request type for the Query/GeneralIdentityAll RPC method.
type QueryGeneralIdentityAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGeneralIdentityAllRequest) Reset()         { *m = QueryGeneralIdentityAllRequest{} }
func (m *QueryGeneralIdentityAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralIdentityAllRequest) ProtoMessage()    {}
func (*QueryGeneralIdentityAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{4}
}
func (m *QueryGeneralIdentityAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralIdentityAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralIdentityAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralIdentityAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralIdentityAllRequest.Merge(m, src)
}
func (m *QueryGeneralIdentityAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralIdentityAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralIdentityAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralIdentityAllRequest proto.InternalMessageInfo

func (m *QueryGeneralIdentityAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGeneralIdentityAllResponse is response type for the Query/GeneralIdentityAll RPC method.
type QueryGeneralIdentityAllResponse struct {
	RequestDetailsList []*IdentityExecutionEntry `protobuf:"bytes,1,rep,name=request_details_list,json=requestDetailsList,proto3" json:"request_details_list,omitempty"`
	Pagination         *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGeneralIdentityAllResponse) Reset()         { *m = QueryGeneralIdentityAllResponse{} }
func (m *QueryGeneralIdentityAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGeneralIdentityAllResponse) ProtoMessage()    {}
func (*QueryGeneralIdentityAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{5}
}
func (m *QueryGeneralIdentityAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGeneralIdentityAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGeneralIdentityAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGeneralIdentityAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGeneralIdentityAllResponse.Merge(m, src)
}
func (m *QueryGeneralIdentityAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGeneralIdentityAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGeneralIdentityAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGeneralIdentityAllResponse proto.InternalMessageInfo

func (m *QueryGeneralIdentityAllResponse) GetRequestDetailsList() []*IdentityExecutionEntry {
	if m != nil {
		return m.RequestDetailsList
	}
	return nil
}

func (m *QueryGeneralIdentityAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryEncryptedTxRequest is request type for the Query/EncryptedTx RPC method.
type QueryEncryptedTxRequest struct {
	TargetHeight uint64 `protobuf:"varint,1,opt,name=target_height,json=targetHeight,proto3" json:"target_height,omitempty"`
	Index        uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryEncryptedTxRequest) Reset()         { *m = QueryEncryptedTxRequest{} }
func (m *QueryEncryptedTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedTxRequest) ProtoMessage()    {}
func (*QueryEncryptedTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{6}
}
func (m *QueryEncryptedTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedTxRequest.Merge(m, src)
}
func (m *QueryEncryptedTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedTxRequest proto.InternalMessageInfo

func (m *QueryEncryptedTxRequest) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *QueryEncryptedTxRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// QueryEncryptedTxResponse is response type for the Query/EncryptedTx RPC method.
type QueryEncryptedTxResponse struct {
	EncryptedTx EncryptedTx `protobuf:"bytes,1,opt,name=encrypted_tx,json=encryptedTx,proto3" json:"encrypted_tx"`
}

func (m *QueryEncryptedTxResponse) Reset()         { *m = QueryEncryptedTxResponse{} }
func (m *QueryEncryptedTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedTxResponse) ProtoMessage()    {}
func (*QueryEncryptedTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{7}
}
func (m *QueryEncryptedTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedTxResponse.Merge(m, src)
}
func (m *QueryEncryptedTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedTxResponse proto.InternalMessageInfo

func (m *QueryEncryptedTxResponse) GetEncryptedTx() EncryptedTx {
	if m != nil {
		return m.EncryptedTx
	}
	return EncryptedTx{}
}

// QueryEncryptedTxAllRequest is request type for the Query/EncryptedTxAll RPC method.
type QueryEncryptedTxAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryEncryptedTxAllRequest) Reset()         { *m = QueryEncryptedTxAllRequest{} }
func (m *QueryEncryptedTxAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedTxAllRequest) ProtoMessage()    {}
func (*QueryEncryptedTxAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{8}
}
func (m *QueryEncryptedTxAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedTxAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedTxAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedTxAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedTxAllRequest.Merge(m, src)
}
func (m *QueryEncryptedTxAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedTxAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedTxAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedTxAllRequest proto.InternalMessageInfo

func (m *QueryEncryptedTxAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryEncryptedTxAllResponse is response type for the Query/EncryptedTxAll RPC method.
type QueryEncryptedTxAllResponse struct {
	EncryptedTxArray []EncryptedTxArray  `protobuf:"bytes,1,rep,name=encrypted_tx_array,json=encryptedTxArray,proto3" json:"encrypted_tx_array"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryEncryptedTxAllResponse) Reset()         { *m = QueryEncryptedTxAllResponse{} }
func (m *QueryEncryptedTxAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedTxAllResponse) ProtoMessage()    {}
func (*QueryEncryptedTxAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{9}
}
func (m *QueryEncryptedTxAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedTxAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedTxAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedTxAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedTxAllResponse.Merge(m, src)
}
func (m *QueryEncryptedTxAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedTxAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedTxAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedTxAllResponse proto.InternalMessageInfo

func (m *QueryEncryptedTxAllResponse) GetEncryptedTxArray() []EncryptedTxArray {
	if m != nil {
		return m.EncryptedTxArray
	}
	return nil
}

func (m *QueryEncryptedTxAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryEncryptedTxAllFromHeightRequest is request type for the Query/EncryptedTxAllFromHeight RPC method.
type QueryEncryptedTxAllFromHeightRequest struct {
	TargetHeight uint64 `protobuf:"varint,1,opt,name=target_height,json=targetHeight,proto3" json:"target_height,omitempty"`
}

func (m *QueryEncryptedTxAllFromHeightRequest) Reset()         { *m = QueryEncryptedTxAllFromHeightRequest{} }
func (m *QueryEncryptedTxAllFromHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedTxAllFromHeightRequest) ProtoMessage()    {}
func (*QueryEncryptedTxAllFromHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{10}
}
func (m *QueryEncryptedTxAllFromHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedTxAllFromHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedTxAllFromHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedTxAllFromHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedTxAllFromHeightRequest.Merge(m, src)
}
func (m *QueryEncryptedTxAllFromHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedTxAllFromHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedTxAllFromHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedTxAllFromHeightRequest proto.InternalMessageInfo

func (m *QueryEncryptedTxAllFromHeightRequest) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

// QueryEncryptedTxAllFromHeightResponse is response type for the Query/EncryptedTxAllFromHeight RPC method.
type QueryEncryptedTxAllFromHeightResponse struct {
	EncryptedTxArray EncryptedTxArray `protobuf:"bytes,1,opt,name=encrypted_tx_array,json=encryptedTxArray,proto3" json:"encrypted_tx_array"`
}

func (m *QueryEncryptedTxAllFromHeightResponse) Reset()         { *m = QueryEncryptedTxAllFromHeightResponse{} }
func (m *QueryEncryptedTxAllFromHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEncryptedTxAllFromHeightResponse) ProtoMessage()    {}
func (*QueryEncryptedTxAllFromHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{11}
}
func (m *QueryEncryptedTxAllFromHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEncryptedTxAllFromHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEncryptedTxAllFromHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEncryptedTxAllFromHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEncryptedTxAllFromHeightResponse.Merge(m, src)
}
func (m *QueryEncryptedTxAllFromHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEncryptedTxAllFromHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEncryptedTxAllFromHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEncryptedTxAllFromHeightResponse proto.InternalMessageInfo

func (m *QueryEncryptedTxAllFromHeightResponse) GetEncryptedTxArray() EncryptedTxArray {
	if m != nil {
		return m.EncryptedTxArray
	}
	return EncryptedTxArray{}
}

// QueryLatestHeightRequest is request type for the Query/LatestHeight RPC method.
type QueryLatestHeightRequest struct {
}

func (m *QueryLatestHeightRequest) Reset()         { *m = QueryLatestHeightRequest{} }
func (m *QueryLatestHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestHeightRequest) ProtoMessage()    {}
func (*QueryLatestHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{12}
}
func (m *QueryLatestHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestHeightRequest.Merge(m, src)
}
func (m *QueryLatestHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestHeightRequest proto.InternalMessageInfo

// QueryLatestHeightResponse is response type for the Query/LatestHeight RPC method.
type QueryLatestHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLatestHeightResponse) Reset()         { *m = QueryLatestHeightResponse{} }
func (m *QueryLatestHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestHeightResponse) ProtoMessage()    {}
func (*QueryLatestHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{13}
}
func (m *QueryLatestHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestHeightResponse.Merge(m, src)
}
func (m *QueryLatestHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestHeightResponse proto.InternalMessageInfo

func (m *QueryLatestHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryPepNonceRequest is request type for the Query/PepNonce RPC method.
type QueryPepNonceRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPepNonceRequest) Reset()         { *m = QueryPepNonceRequest{} }
func (m *QueryPepNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPepNonceRequest) ProtoMessage()    {}
func (*QueryPepNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{14}
}
func (m *QueryPepNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPepNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPepNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPepNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPepNonceRequest.Merge(m, src)
}
func (m *QueryPepNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPepNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPepNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPepNonceRequest proto.InternalMessageInfo

func (m *QueryPepNonceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryPepNonceResponse is response type for the Query/PepNonce RPC method.
type QueryPepNonceResponse struct {
	PepNonce PepNonce `protobuf:"bytes,1,opt,name=pep_nonce,json=pepNonce,proto3" json:"pep_nonce"`
}

func (m *QueryPepNonceResponse) Reset()         { *m = QueryPepNonceResponse{} }
func (m *QueryPepNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPepNonceResponse) ProtoMessage()    {}
func (*QueryPepNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{15}
}
func (m *QueryPepNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPepNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPepNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPepNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPepNonceResponse.Merge(m, src)
}
func (m *QueryPepNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPepNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPepNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPepNonceResponse proto.InternalMessageInfo

func (m *QueryPepNonceResponse) GetPepNonce() PepNonce {
	if m != nil {
		return m.PepNonce
	}
	return PepNonce{}
}

// QueryPepNonceAllRequest is request type for the Query/PepNonceAll RPC method.
type QueryPepNonceAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPepNonceAllRequest) Reset()         { *m = QueryPepNonceAllRequest{} }
func (m *QueryPepNonceAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPepNonceAllRequest) ProtoMessage()    {}
func (*QueryPepNonceAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{16}
}
func (m *QueryPepNonceAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPepNonceAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPepNonceAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPepNonceAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPepNonceAllRequest.Merge(m, src)
}
func (m *QueryPepNonceAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPepNonceAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPepNonceAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPepNonceAllRequest proto.InternalMessageInfo

func (m *QueryPepNonceAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPepNonceAllResponse is response type for the Query/PepNonceAll RPC method.
type QueryPepNonceAllResponse struct {
	PepNonce   []PepNonce          `protobuf:"bytes,1,rep,name=pep_nonce,json=pepNonce,proto3" json:"pep_nonce"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPepNonceAllResponse) Reset()         { *m = QueryPepNonceAllResponse{} }
func (m *QueryPepNonceAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPepNonceAllResponse) ProtoMessage()    {}
func (*QueryPepNonceAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{17}
}
func (m *QueryPepNonceAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPepNonceAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPepNonceAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPepNonceAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPepNonceAllResponse.Merge(m, src)
}
func (m *QueryPepNonceAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPepNonceAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPepNonceAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPepNonceAllResponse proto.InternalMessageInfo

func (m *QueryPepNonceAllResponse) GetPepNonce() []PepNonce {
	if m != nil {
		return m.PepNonce
	}
	return nil
}

func (m *QueryPepNonceAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPubkeyRequest is request type for the Query/Pubkey RPC method.
type QueryPubkeyRequest struct {
}

func (m *QueryPubkeyRequest) Reset()         { *m = QueryPubkeyRequest{} }
func (m *QueryPubkeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubkeyRequest) ProtoMessage()    {}
func (*QueryPubkeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{18}
}
func (m *QueryPubkeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubkeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubkeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubkeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubkeyRequest.Merge(m, src)
}
func (m *QueryPubkeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubkeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubkeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubkeyRequest proto.InternalMessageInfo

// QueryPubkeyResponse is response type for the Query/Pubkey RPC method.
type QueryPubkeyResponse struct {
	ActivePubkey types.ActivePublicKey `protobuf:"bytes,1,opt,name=active_pubkey,json=activePubkey,proto3" json:"active_pubkey"`
	QueuedPubkey types.QueuedPublicKey `protobuf:"bytes,2,opt,name=queued_pubkey,json=queuedPubkey,proto3" json:"queued_pubkey"`
}

func (m *QueryPubkeyResponse) Reset()         { *m = QueryPubkeyResponse{} }
func (m *QueryPubkeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubkeyResponse) ProtoMessage()    {}
func (*QueryPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{19}
}
func (m *QueryPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubkeyResponse.Merge(m, src)
}
func (m *QueryPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubkeyResponse proto.InternalMessageInfo

func (m *QueryPubkeyResponse) GetActivePubkey() types.ActivePublicKey {
	if m != nil {
		return m.ActivePubkey
	}
	return types.ActivePublicKey{}
}

func (m *QueryPubkeyResponse) GetQueuedPubkey() types.QueuedPublicKey {
	if m != nil {
		return m.QueuedPubkey
	}
	return types.QueuedPublicKey{}
}

// QueryPrivateIdentityRequest is request type for the Query/PrivateIdentity RPC method.
type QueryPrivateIdentityRequest struct {
	ReqId string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (m *QueryPrivateIdentityRequest) Reset()         { *m = QueryPrivateIdentityRequest{} }
func (m *QueryPrivateIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPrivateIdentityRequest) ProtoMessage()    {}
func (*QueryPrivateIdentityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{20}
}
func (m *QueryPrivateIdentityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrivateIdentityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrivateIdentityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrivateIdentityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrivateIdentityRequest.Merge(m, src)
}
func (m *QueryPrivateIdentityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrivateIdentityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrivateIdentityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrivateIdentityRequest proto.InternalMessageInfo

func (m *QueryPrivateIdentityRequest) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

// QueryPrivateIdentityResponse is response type for the Query/PrivateIdentity RPC method.
type QueryPrivateIdentityResponse struct {
	Creator               string                        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReqId                 string                        `protobuf:"bytes,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Pubkey                string                        `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrivateDecryptionKeys []*types.PrivateDecryptionKey `protobuf:"bytes,4,rep,name=private_decryption_keys,json=privateDecryptionKeys,proto3" json:"private_decryption_keys,omitempty"`
}

func (m *QueryPrivateIdentityResponse) Reset()         { *m = QueryPrivateIdentityResponse{} }
func (m *QueryPrivateIdentityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPrivateIdentityResponse) ProtoMessage()    {}
func (*QueryPrivateIdentityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{21}
}
func (m *QueryPrivateIdentityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrivateIdentityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrivateIdentityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrivateIdentityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrivateIdentityResponse.Merge(m, src)
}
func (m *QueryPrivateIdentityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrivateIdentityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrivateIdentityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrivateIdentityResponse proto.InternalMessageInfo

func (m *QueryPrivateIdentityResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryPrivateIdentityResponse) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *QueryPrivateIdentityResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryPrivateIdentityResponse) GetPrivateDecryptionKeys() []*types.PrivateDecryptionKey {
	if m != nil {
		return m.PrivateDecryptionKeys
	}
	return nil
}

// QueryDecryptDataRequest is request type for the Query/DecryptData RPC method.
type QueryDecryptDataRequest struct {
	Pubkey        string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	DecryptionKey string `protobuf:"bytes,2,opt,name=decryption_key,json=decryptionKey,proto3" json:"decryption_key,omitempty"`
	EncryptedData string `protobuf:"bytes,3,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
}

func (m *QueryDecryptDataRequest) Reset()         { *m = QueryDecryptDataRequest{} }
func (m *QueryDecryptDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDecryptDataRequest) ProtoMessage()    {}
func (*QueryDecryptDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{22}
}
func (m *QueryDecryptDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecryptDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecryptDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecryptDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecryptDataRequest.Merge(m, src)
}
func (m *QueryDecryptDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecryptDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecryptDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecryptDataRequest proto.InternalMessageInfo

func (m *QueryDecryptDataRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryDecryptDataRequest) GetDecryptionKey() string {
	if m != nil {
		return m.DecryptionKey
	}
	return ""
}

func (m *QueryDecryptDataRequest) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

// QueryDecryptDataResponse is response type for the Query/DecryptData RPC method.
type QueryDecryptDataResponse struct {
	DecryptedData string `protobuf:"bytes,1,opt,name=decrypted_data,json=decryptedData,proto3" json:"decrypted_data,omitempty"`
}

func (m *QueryDecryptDataResponse) Reset()         { *m = QueryDecryptDataResponse{} }
func (m *QueryDecryptDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDecryptDataResponse) ProtoMessage()    {}
func (*QueryDecryptDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd36cf23112e8be0, []int{23}
}
func (m *QueryDecryptDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDecryptDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDecryptDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDecryptDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDecryptDataResponse.Merge(m, src)
}
func (m *QueryDecryptDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDecryptDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDecryptDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDecryptDataResponse proto.InternalMessageInfo

func (m *QueryDecryptDataResponse) GetDecryptedData() string {
	if m != nil {
		return m.DecryptedData
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fairyring.pep.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fairyring.pep.QueryParamsResponse")
	proto.RegisterType((*QueryGeneralIdentityRequest)(nil), "fairyring.pep.QueryGeneralIdentityRequest")
	proto.RegisterType((*QueryGeneralIdentityResponse)(nil), "fairyring.pep.QueryGeneralIdentityResponse")
	proto.RegisterType((*QueryGeneralIdentityAllRequest)(nil), "fairyring.pep.QueryGeneralIdentityAllRequest")
	proto.RegisterType((*QueryGeneralIdentityAllResponse)(nil), "fairyring.pep.QueryGeneralIdentityAllResponse")
	proto.RegisterType((*QueryEncryptedTxRequest)(nil), "fairyring.pep.QueryEncryptedTxRequest")
	proto.RegisterType((*QueryEncryptedTxResponse)(nil), "fairyring.pep.QueryEncryptedTxResponse")
	proto.RegisterType((*QueryEncryptedTxAllRequest)(nil), "fairyring.pep.QueryEncryptedTxAllRequest")
	proto.RegisterType((*QueryEncryptedTxAllResponse)(nil), "fairyring.pep.QueryEncryptedTxAllResponse")
	proto.RegisterType((*QueryEncryptedTxAllFromHeightRequest)(nil), "fairyring.pep.QueryEncryptedTxAllFromHeightRequest")
	proto.RegisterType((*QueryEncryptedTxAllFromHeightResponse)(nil), "fairyring.pep.QueryEncryptedTxAllFromHeightResponse")
	proto.RegisterType((*QueryLatestHeightRequest)(nil), "fairyring.pep.QueryLatestHeightRequest")
	proto.RegisterType((*QueryLatestHeightResponse)(nil), "fairyring.pep.QueryLatestHeightResponse")
	proto.RegisterType((*QueryPepNonceRequest)(nil), "fairyring.pep.QueryPepNonceRequest")
	proto.RegisterType((*QueryPepNonceResponse)(nil), "fairyring.pep.QueryPepNonceResponse")
	proto.RegisterType((*QueryPepNonceAllRequest)(nil), "fairyring.pep.QueryPepNonceAllRequest")
	proto.RegisterType((*QueryPepNonceAllResponse)(nil), "fairyring.pep.QueryPepNonceAllResponse")
	proto.RegisterType((*QueryPubkeyRequest)(nil), "fairyring.pep.QueryPubkeyRequest")
	proto.RegisterType((*QueryPubkeyResponse)(nil), "fairyring.pep.QueryPubkeyResponse")
	proto.RegisterType((*QueryPrivateIdentityRequest)(nil), "fairyring.pep.QueryPrivateIdentityRequest")
	proto.RegisterType((*QueryPrivateIdentityResponse)(nil), "fairyring.pep.QueryPrivateIdentityResponse")
	proto.RegisterType((*QueryDecryptDataRequest)(nil), "fairyring.pep.QueryDecryptDataRequest")
	proto.RegisterType((*QueryDecryptDataResponse)(nil), "fairyring.pep.QueryDecryptDataResponse")
}

func init() { proto.RegisterFile("fairyring/pep/query.proto", fileDescriptor_dd36cf23112e8be0) }

var fileDescriptor_dd36cf23112e8be0 = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcb, 0x6f, 0xe3, 0x44,
	0x18, 0xef, 0xf4, 0xb5, 0xdb, 0xe9, 0x0b, 0x86, 0x96, 0x66, 0xbd, 0x6d, 0xda, 0xba, 0x4f, 0xb2,
	0xda, 0x78, 0xb7, 0x2d, 0x12, 0x5a, 0x4e, 0x2d, 0x6d, 0x97, 0x55, 0xab, 0xa5, 0x9b, 0x5d, 0x09,
	0xc4, 0x01, 0x6b, 0x12, 0x0f, 0xa9, 0xd5, 0xc4, 0x76, 0xec, 0x49, 0xd5, 0x28, 0x44, 0x3c, 0x84,
	0xc4, 0x85, 0x03, 0x12, 0x47, 0x90, 0xb8, 0x21, 0x8e, 0x70, 0x43, 0x70, 0xe4, 0xc0, 0x1e, 0x57,
	0xe2, 0xc2, 0x09, 0xa1, 0x16, 0x89, 0x7f, 0x03, 0x79, 0xfc, 0x39, 0xb1, 0x9d, 0x49, 0x93, 0x8a,
	0xdd, 0x4b, 0xd5, 0xf9, 0xfc, 0x3d, 0x7e, 0xbf, 0x6f, 0xbe, 0x99, 0x9f, 0x1d, 0x7c, 0xe3, 0x43,
	0x6a, 0xba, 0x35, 0xd7, 0xb4, 0x8a, 0x9a, 0xc3, 0x1c, 0xad, 0x52, 0x65, 0x6e, 0x2d, 0xeb, 0xb8,
	0x36, 0xb7, 0xc9, 0x78, 0xf3, 0x51, 0xd6, 0x61, 0x8e, 0xf2, 0x32, 0x2d, 0x9b, 0x96, 0xad, 0x89,
	0xbf, 0x81, 0x87, 0x92, 0x29, 0xd8, 0x5e, 0xd9, 0xf6, 0xb4, 0x3c, 0xf5, 0x58, 0x10, 0xaa, 0x9d,
	0xde, 0xcd, 0x33, 0x4e, 0xef, 0x6a, 0x0e, 0x2d, 0x9a, 0x16, 0xe5, 0xa6, 0x6d, 0x81, 0xef, 0x52,
	0xab, 0x50, 0xc1, 0x2e, 0x97, 0x6d, 0x4b, 0xf3, 0x8e, 0xa9, 0xcb, 0x0c, 0x9d, 0xd7, 0x1c, 0xe6,
	0x81, 0xd3, 0x42, 0x1c, 0x0d, 0xb3, 0x0a, 0x6e, 0xcd, 0xe1, 0xbe, 0xd3, 0x19, 0x78, 0x28, 0x71,
	0x0f, 0x87, 0xba, 0xb4, 0x1c, 0x46, 0xcf, 0x25, 0x9e, 0x31, 0x47, 0xb7, 0x6c, 0xab, 0xc0, 0xe0,
	0xf1, 0x54, 0xd1, 0x2e, 0xda, 0xe2, 0x5f, 0xcd, 0xff, 0x0f, 0xac, 0xb3, 0x45, 0xdb, 0x2e, 0x96,
	0x98, 0x46, 0x1d, 0x53, 0xa3, 0x96, 0x65, 0x73, 0x01, 0x1a, 0x52, 0xaa, 0x53, 0x98, 0x3c, 0xf2,
	0x79, 0x1d, 0x89, 0x3a, 0x39, 0x56, 0xa9, 0x32, 0x8f, 0xab, 0xef, 0xe0, 0x57, 0x62, 0x56, 0xcf,
	0xb1, 0x2d, 0x8f, 0x91, 0x37, 0xf0, 0x70, 0x80, 0x27, 0x85, 0x16, 0xd0, 0xfa, 0xe8, 0xc6, 0x74,
	0x36, 0xd6, 0xc1, 0x6c, 0xe0, 0xbe, 0x33, 0xf2, 0xf4, 0xaf, 0xf9, 0xbe, 0x1f, 0xfe, 0xfd, 0x31,
	0x83, 0x72, 0xe0, 0xaf, 0x6e, 0xe1, 0x9b, 0x22, 0xe1, 0x7d, 0x66, 0x31, 0x97, 0x96, 0x1e, 0x18,
	0xcc, 0xe2, 0x26, 0xaf, 0x41, 0x3d, 0x32, 0x8d, 0x87, 0x5d, 0x56, 0xd1, 0x4d, 0x43, 0x24, 0x1e,
	0xc9, 0x0d, 0xb9, 0xac, 0xf2, 0xc0, 0x50, 0x2d, 0x3c, 0x2b, 0x8f, 0x02, 0x3c, 0x0f, 0xf1, 0xa4,
	0x1b, 0x64, 0xd0, 0x0d, 0xc6, 0xa9, 0x59, 0x0a, 0x81, 0xad, 0x24, 0x80, 0x85, 0x91, 0x7b, 0x67,
	0xac, 0x50, 0xf5, 0xe9, 0xef, 0x59, 0xdc, 0xad, 0xe5, 0x26, 0x20, 0x7a, 0x37, 0x08, 0x56, 0x8f,
	0x71, 0x5a, 0x56, 0x6f, 0xbb, 0x54, 0x0a, 0x81, 0xee, 0x63, 0xdc, 0xda, 0x78, 0x28, 0xb6, 0x9a,
	0x0d, 0xa6, 0x24, 0xeb, 0x4f, 0x49, 0x36, 0x18, 0x30, 0x98, 0x92, 0xec, 0x11, 0x2d, 0x32, 0x88,
	0xcd, 0x45, 0x22, 0xd5, 0xdf, 0x10, 0x9e, 0xef, 0x58, 0x0a, 0xd8, 0xbd, 0x8b, 0xa7, 0x12, 0xec,
	0xf4, 0x92, 0xe9, 0xf1, 0x14, 0x5a, 0x18, 0xe8, 0x9d, 0x22, 0x89, 0x53, 0x3c, 0x34, 0x3d, 0x4e,
	0xee, 0xc7, 0x48, 0xf4, 0x0b, 0x12, 0x6b, 0x5d, 0x49, 0x04, 0xa8, 0x62, 0x2c, 0x9e, 0xe0, 0x19,
	0x41, 0x62, 0x2f, 0x1c, 0xe3, 0x27, 0x67, 0x61, 0xa3, 0x96, 0xf0, 0x38, 0xa7, 0x6e, 0x91, 0x71,
	0xfd, 0x98, 0x99, 0xc5, 0x63, 0x2e, 0x7a, 0x35, 0x98, 0x1b, 0x0b, 0x8c, 0x6f, 0x0b, 0x1b, 0x99,
	0xc2, 0x43, 0xa6, 0x65, 0xb0, 0x33, 0x81, 0x61, 0x30, 0x17, 0x2c, 0x54, 0x1d, 0xa7, 0xda, 0xb3,
	0x42, 0x4f, 0xde, 0xc2, 0x63, 0xd1, 0x33, 0x03, 0x3b, 0xa0, 0x24, 0x7a, 0x11, 0x89, 0xdc, 0x19,
	0xf4, 0x87, 0x31, 0x37, 0xca, 0x5a, 0x26, 0xd5, 0xc0, 0x4a, 0xb2, 0xc0, 0x0b, 0xd8, 0xe2, 0x5f,
	0x11, 0xcc, 0x7c, 0xb2, 0x0c, 0x50, 0x79, 0x8c, 0x49, 0x94, 0x8a, 0x4e, 0x5d, 0x97, 0xd6, 0x60,
	0x73, 0xe7, 0x3b, 0x13, 0xda, 0xf6, 0xdd, 0x80, 0xd5, 0x4b, 0x2c, 0x61, 0x7f, 0x7e, 0x5b, 0x7b,
	0x80, 0x97, 0x25, 0xe0, 0xf7, 0x5d, 0xbb, 0x1c, 0xec, 0xdd, 0x55, 0xf6, 0x59, 0xfd, 0x08, 0xaf,
	0x74, 0x49, 0xd6, 0xa5, 0x27, 0xe8, 0x7f, 0xf4, 0x44, 0x55, 0x60, 0x9e, 0x0e, 0x29, 0x67, 0x1e,
	0x8f, 0xc1, 0x57, 0x37, 0xf1, 0x0d, 0xc9, 0x33, 0x40, 0xf3, 0x2a, 0x1e, 0x8e, 0x91, 0x82, 0x95,
	0x7a, 0x07, 0x4f, 0x05, 0xb7, 0x23, 0x73, 0x1e, 0xfa, 0xd7, 0x6f, 0xd8, 0x8b, 0x14, 0xbe, 0x46,
	0x0d, 0xc3, 0x65, 0x9e, 0x07, 0xd7, 0x58, 0xb8, 0x54, 0x1f, 0xe3, 0xe9, 0x44, 0x04, 0x94, 0xb8,
	0x87, 0x47, 0x9a, 0xb7, 0x38, 0xf0, 0x9c, 0x49, 0x5e, 0xaa, 0x10, 0x03, 0xfc, 0xae, 0x3b, 0xb0,
	0x56, 0x29, 0x9c, 0xbe, 0xd0, 0xe1, 0x05, 0xcc, 0xf0, 0x77, 0x08, 0x7a, 0x17, 0xab, 0x21, 0xc7,
	0x3e, 0x70, 0x05, 0xec, 0xcf, 0x6f, 0x4e, 0x9b, 0xfa, 0x55, 0xcd, 0x9f, 0xb0, 0x50, 0x4f, 0xd4,
	0x9f, 0x50, 0x28, 0x60, 0x60, 0x06, 0xc8, 0x87, 0x78, 0x9c, 0x16, 0xb8, 0x79, 0xca, 0x74, 0x47,
	0x3c, 0x80, 0xd6, 0x2c, 0x46, 0x60, 0x07, 0xda, 0x9d, 0xdd, 0x16, 0x6e, 0x47, 0xd5, 0x7c, 0xc9,
	0x2c, 0x1c, 0xb0, 0x70, 0xb8, 0xc6, 0x68, 0x68, 0x3e, 0x61, 0x35, 0x3f, 0x5b, 0xa5, 0xca, 0xaa,
	0xcc, 0x08, 0xb3, 0xf5, 0x77, 0xca, 0xf6, 0x48, 0xb8, 0xb5, 0x65, 0xab, 0x84, 0xe6, 0x13, 0x56,
	0x6b, 0x4a, 0xe4, 0x91, 0x6b, 0x9e, 0x52, 0xce, 0x7a, 0x94, 0xc8, 0xdf, 0x11, 0x68, 0x64, 0x5b,
	0x18, 0x50, 0x4e, 0xe1, 0x6b, 0x05, 0x97, 0x51, 0x6e, 0xbb, 0xe1, 0x50, 0xc2, 0x32, 0x92, 0xb1,
	0x3f, 0x92, 0xd1, 0x9f, 0x7a, 0xa0, 0x33, 0x20, 0xcc, 0xb0, 0x22, 0x1f, 0xe0, 0x19, 0x27, 0xa8,
	0xa1, 0x1b, 0x4c, 0x1c, 0x31, 0xd3, 0xb6, 0xf4, 0x13, 0x56, 0xf3, 0x52, 0x83, 0x62, 0xf3, 0x57,
	0xdb, 0x79, 0x03, 0xa8, 0xdd, 0xa6, 0xff, 0x01, 0xab, 0xe5, 0xa6, 0x1d, 0x89, 0xd5, 0x53, 0x3f,
	0x86, 0x71, 0x06, 0xf3, 0x2e, 0xe5, 0x34, 0xe4, 0xde, 0x82, 0x84, 0x62, 0x90, 0x56, 0xf0, 0x44,
	0x1c, 0x0a, 0x30, 0x19, 0x37, 0xa2, 0xa9, 0x7d, 0xb7, 0xd6, 0xad, 0x62, 0x50, 0x4e, 0x81, 0xd9,
	0x78, 0xd3, 0xea, 0x17, 0x53, 0xb7, 0x61, 0xd6, 0x63, 0x00, 0xa0, 0x8b, 0xad, 0x4a, 0x61, 0x0a,
	0x14, 0xab, 0x14, 0xa4, 0xd8, 0xf8, 0x7c, 0x02, 0x0f, 0x89, 0x1c, 0xc4, 0xc2, 0xc3, 0xc1, 0xdb,
	0x10, 0x59, 0x4c, 0x9c, 0x89, 0xf6, 0xd7, 0x2d, 0x45, 0xbd, 0xcc, 0x25, 0x40, 0xa0, 0xce, 0x7d,
	0xf6, 0xc7, 0x3f, 0x5f, 0xf7, 0xcf, 0x90, 0x69, 0x4d, 0xf6, 0x82, 0x48, 0xbe, 0x41, 0x78, 0x34,
	0x72, 0x23, 0x92, 0x55, 0x59, 0xca, 0x76, 0x9d, 0x56, 0xd6, 0xba, 0xfa, 0x41, 0xfd, 0x37, 0x45,
	0xfd, 0xd7, 0xc9, 0xa6, 0xd6, 0xf9, 0x15, 0x56, 0xab, 0xc7, 0xb4, 0xa0, 0xa1, 0xd5, 0x85, 0xa2,
	0x37, 0xc8, 0x97, 0x08, 0x4f, 0xc4, 0x2f, 0x7f, 0xf2, 0x5a, 0x97, 0xc2, 0xad, 0xdb, 0x4c, 0xc9,
	0xf4, 0xe2, 0x0a, 0x30, 0x97, 0x04, 0xcc, 0x39, 0x72, 0xf3, 0x12, 0x98, 0xe4, 0x17, 0x84, 0x53,
	0x9d, 0xb4, 0x88, 0x6c, 0x76, 0xaf, 0xd6, 0x26, 0x83, 0xca, 0xd6, 0xd5, 0x82, 0x00, 0xec, 0xa6,
	0x00, 0x7b, 0x9b, 0xdc, 0xba, 0x42, 0x4f, 0xc9, 0x17, 0x08, 0x8f, 0x45, 0xe5, 0x8a, 0x48, 0xb7,
	0x50, 0x22, 0x76, 0xca, 0x7a, 0x77, 0x47, 0x00, 0xb6, 0x2c, 0x80, 0xa5, 0xc9, 0x6c, 0x02, 0x58,
	0x49, 0x38, 0x03, 0x14, 0xf2, 0x29, 0xc2, 0xd7, 0xc3, 0x1b, 0x9e, 0x2c, 0x49, 0x67, 0x38, 0xae,
	0x90, 0xca, 0xf2, 0xe5, 0x4e, 0x50, 0x3d, 0x23, 0xaa, 0x2f, 0x13, 0x55, 0xeb, 0xf0, 0xbd, 0xa3,
	0xd5, 0x41, 0x58, 0x1b, 0xe4, 0x13, 0x84, 0x47, 0x23, 0xe2, 0x24, 0x9f, 0xfb, 0x76, 0x85, 0x94,
	0xcf, 0xbd, 0x44, 0xe5, 0xd4, 0x05, 0x01, 0x46, 0x21, 0xa9, 0x4e, 0x60, 0xc4, 0x51, 0x0f, 0xee,
	0x23, 0xf9, 0x51, 0x8f, 0x2a, 0x53, 0x87, 0xa3, 0x1e, 0x53, 0xa9, 0xce, 0x47, 0x3d, 0xa8, 0xf2,
	0x2d, 0xc2, 0x93, 0x89, 0xcf, 0x06, 0x22, 0x3d, 0x22, 0xf2, 0x8f, 0x2d, 0xe5, 0x56, 0x4f, 0xbe,
	0x80, 0xe5, 0x8e, 0xc0, 0x92, 0x21, 0xeb, 0x09, 0x2c, 0xc5, 0xc0, 0x5f, 0x37, 0x21, 0x40, 0xab,
	0x07, 0x5a, 0xd2, 0xf0, 0xe1, 0x91, 0xf6, 0xaf, 0x1a, 0x72, 0xbb, 0x87, 0xaa, 0x91, 0xfd, 0xc9,
	0xf6, 0xea, 0x0e, 0x38, 0xd7, 0x04, 0xce, 0x45, 0x32, 0xdf, 0x05, 0x27, 0xf9, 0x1e, 0xe1, 0xc9,
	0x84, 0x56, 0xca, 0xbb, 0x27, 0xd7, 0x61, 0x79, 0xf7, 0x3a, 0x88, 0xaf, 0x7a, 0x4f, 0xa0, 0xda,
	0x22, 0x1b, 0xda, 0x3e, 0x35, 0xdd, 0x7c, 0xc9, 0x2e, 0x9c, 0x24, 0xf7, 0x14, 0x24, 0xb5, 0xbd,
	0x8f, 0x3f, 0x23, 0x3c, 0x1a, 0x91, 0x22, 0xf9, 0x64, 0xb7, 0x8b, 0xa5, 0x7c, 0xb2, 0x25, 0x9a,
	0xa6, 0xbe, 0x27, 0xc0, 0xe5, 0xc8, 0x51, 0x47, 0x70, 0x20, 0x6e, 0x42, 0xf0, 0xb4, 0x7a, 0x30,
	0x7e, 0x0d, 0xad, 0x1e, 0xd7, 0xdc, 0x86, 0x56, 0x8f, 0xab, 0x6b, 0x63, 0x67, 0xf7, 0xe9, 0x79,
	0x1a, 0x3d, 0x3b, 0x4f, 0xa3, 0xbf, 0xcf, 0xd3, 0xe8, 0xab, 0x8b, 0x74, 0xdf, 0xb3, 0x8b, 0x74,
	0xdf, 0x9f, 0x17, 0xe9, 0xbe, 0xf7, 0x33, 0x45, 0x93, 0x1f, 0x57, 0xf3, 0xfe, 0xfb, 0x81, 0xb4,
	0xea, 0x99, 0xa8, 0x2b, 0x7e, 0x31, 0xc9, 0x0f, 0x8b, 0x5f, 0x28, 0x36, 0xff, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x1c, 0x4f, 0x1c, 0x03, 0xc2, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a EncryptedTx by index.
	EncryptedTx(ctx context.Context, in *QueryEncryptedTxRequest, opts ...grpc.CallOption) (*QueryEncryptedTxResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAll(ctx context.Context, in *QueryEncryptedTxAllRequest, opts ...grpc.CallOption) (*QueryEncryptedTxAllResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAllFromHeight(ctx context.Context, in *QueryEncryptedTxAllFromHeightRequest, opts ...grpc.CallOption) (*QueryEncryptedTxAllFromHeightResponse, error)
	// Queries a list of LatestHeight items.
	LatestHeight(ctx context.Context, in *QueryLatestHeightRequest, opts ...grpc.CallOption) (*QueryLatestHeightResponse, error)
	// Queries a PepNonce by index.
	PepNonce(ctx context.Context, in *QueryPepNonceRequest, opts ...grpc.CallOption) (*QueryPepNonceResponse, error)
	// Queries a list of PepNonce items.
	PepNonceAll(ctx context.Context, in *QueryPepNonceAllRequest, opts ...grpc.CallOption) (*QueryPepNonceAllResponse, error)
	// Queries the public keys
	Pubkey(ctx context.Context, in *QueryPubkeyRequest, opts ...grpc.CallOption) (*QueryPubkeyResponse, error)
	// Queries a General Identity request by request id
	GeneralIdentity(ctx context.Context, in *QueryGeneralIdentityRequest, opts ...grpc.CallOption) (*QueryGeneralIdentityResponse, error)
	// Queries a list of General Identity requests
	GeneralIdentityAll(ctx context.Context, in *QueryGeneralIdentityAllRequest, opts ...grpc.CallOption) (*QueryGeneralIdentityAllResponse, error)
	// Queries a Private Identity request item by req id.
	PrivateIdentity(ctx context.Context, in *QueryPrivateIdentityRequest, opts ...grpc.CallOption) (*QueryPrivateIdentityResponse, error)
	// Queries a list of DecryptData items.
	DecryptData(ctx context.Context, in *QueryDecryptDataRequest, opts ...grpc.CallOption) (*QueryDecryptDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedTx(ctx context.Context, in *QueryEncryptedTxRequest, opts ...grpc.CallOption) (*QueryEncryptedTxResponse, error) {
	out := new(QueryEncryptedTxResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/EncryptedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedTxAll(ctx context.Context, in *QueryEncryptedTxAllRequest, opts ...grpc.CallOption) (*QueryEncryptedTxAllResponse, error) {
	out := new(QueryEncryptedTxAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/EncryptedTxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedTxAllFromHeight(ctx context.Context, in *QueryEncryptedTxAllFromHeightRequest, opts ...grpc.CallOption) (*QueryEncryptedTxAllFromHeightResponse, error) {
	out := new(QueryEncryptedTxAllFromHeightResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/EncryptedTxAllFromHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestHeight(ctx context.Context, in *QueryLatestHeightRequest, opts ...grpc.CallOption) (*QueryLatestHeightResponse, error) {
	out := new(QueryLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/LatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PepNonce(ctx context.Context, in *QueryPepNonceRequest, opts ...grpc.CallOption) (*QueryPepNonceResponse, error) {
	out := new(QueryPepNonceResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/PepNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PepNonceAll(ctx context.Context, in *QueryPepNonceAllRequest, opts ...grpc.CallOption) (*QueryPepNonceAllResponse, error) {
	out := new(QueryPepNonceAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/PepNonceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pubkey(ctx context.Context, in *QueryPubkeyRequest, opts ...grpc.CallOption) (*QueryPubkeyResponse, error) {
	out := new(QueryPubkeyResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/Pubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GeneralIdentity(ctx context.Context, in *QueryGeneralIdentityRequest, opts ...grpc.CallOption) (*QueryGeneralIdentityResponse, error) {
	out := new(QueryGeneralIdentityResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/GeneralIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GeneralIdentityAll(ctx context.Context, in *QueryGeneralIdentityAllRequest, opts ...grpc.CallOption) (*QueryGeneralIdentityAllResponse, error) {
	out := new(QueryGeneralIdentityAllResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/GeneralIdentityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PrivateIdentity(ctx context.Context, in *QueryPrivateIdentityRequest, opts ...grpc.CallOption) (*QueryPrivateIdentityResponse, error) {
	out := new(QueryPrivateIdentityResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/PrivateIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DecryptData(ctx context.Context, in *QueryDecryptDataRequest, opts ...grpc.CallOption) (*QueryDecryptDataResponse, error) {
	out := new(QueryDecryptDataResponse)
	err := c.cc.Invoke(ctx, "/fairyring.pep.Query/DecryptData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a EncryptedTx by index.
	EncryptedTx(context.Context, *QueryEncryptedTxRequest) (*QueryEncryptedTxResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAll(context.Context, *QueryEncryptedTxAllRequest) (*QueryEncryptedTxAllResponse, error)
	// Queries a list of EncryptedTx items.
	EncryptedTxAllFromHeight(context.Context, *QueryEncryptedTxAllFromHeightRequest) (*QueryEncryptedTxAllFromHeightResponse, error)
	// Queries a list of LatestHeight items.
	LatestHeight(context.Context, *QueryLatestHeightRequest) (*QueryLatestHeightResponse, error)
	// Queries a PepNonce by index.
	PepNonce(context.Context, *QueryPepNonceRequest) (*QueryPepNonceResponse, error)
	// Queries a list of PepNonce items.
	PepNonceAll(context.Context, *QueryPepNonceAllRequest) (*QueryPepNonceAllResponse, error)
	// Queries the public keys
	Pubkey(context.Context, *QueryPubkeyRequest) (*QueryPubkeyResponse, error)
	// Queries a General Identity request by request id
	GeneralIdentity(context.Context, *QueryGeneralIdentityRequest) (*QueryGeneralIdentityResponse, error)
	// Queries a list of General Identity requests
	GeneralIdentityAll(context.Context, *QueryGeneralIdentityAllRequest) (*QueryGeneralIdentityAllResponse, error)
	// Queries a Private Identity request item by req id.
	PrivateIdentity(context.Context, *QueryPrivateIdentityRequest) (*QueryPrivateIdentityResponse, error)
	// Queries a list of DecryptData items.
	DecryptData(context.Context, *QueryDecryptDataRequest) (*QueryDecryptDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EncryptedTx(ctx context.Context, req *QueryEncryptedTxRequest) (*QueryEncryptedTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedTx not implemented")
}
func (*UnimplementedQueryServer) EncryptedTxAll(ctx context.Context, req *QueryEncryptedTxAllRequest) (*QueryEncryptedTxAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedTxAll not implemented")
}
func (*UnimplementedQueryServer) EncryptedTxAllFromHeight(ctx context.Context, req *QueryEncryptedTxAllFromHeightRequest) (*QueryEncryptedTxAllFromHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedTxAllFromHeight not implemented")
}
func (*UnimplementedQueryServer) LatestHeight(ctx context.Context, req *QueryLatestHeightRequest) (*QueryLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestHeight not implemented")
}
func (*UnimplementedQueryServer) PepNonce(ctx context.Context, req *QueryPepNonceRequest) (*QueryPepNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PepNonce not implemented")
}
func (*UnimplementedQueryServer) PepNonceAll(ctx context.Context, req *QueryPepNonceAllRequest) (*QueryPepNonceAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PepNonceAll not implemented")
}
func (*UnimplementedQueryServer) Pubkey(ctx context.Context, req *QueryPubkeyRequest) (*QueryPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pubkey not implemented")
}
func (*UnimplementedQueryServer) GeneralIdentity(ctx context.Context, req *QueryGeneralIdentityRequest) (*QueryGeneralIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralIdentity not implemented")
}
func (*UnimplementedQueryServer) GeneralIdentityAll(ctx context.Context, req *QueryGeneralIdentityAllRequest) (*QueryGeneralIdentityAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralIdentityAll not implemented")
}
func (*UnimplementedQueryServer) PrivateIdentity(ctx context.Context, req *QueryPrivateIdentityRequest) (*QueryPrivateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateIdentity not implemented")
}
func (*UnimplementedQueryServer) DecryptData(ctx context.Context, req *QueryDecryptDataRequest) (*QueryDecryptDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncryptedTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/EncryptedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedTx(ctx, req.(*QueryEncryptedTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedTxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncryptedTxAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedTxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/EncryptedTxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedTxAll(ctx, req.(*QueryEncryptedTxAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedTxAllFromHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncryptedTxAllFromHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedTxAllFromHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/EncryptedTxAllFromHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedTxAllFromHeight(ctx, req.(*QueryEncryptedTxAllFromHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/LatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestHeight(ctx, req.(*QueryLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PepNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPepNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PepNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/PepNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PepNonce(ctx, req.(*QueryPepNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PepNonceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPepNonceAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PepNonceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/PepNonceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PepNonceAll(ctx, req.(*QueryPepNonceAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/Pubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pubkey(ctx, req.(*QueryPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GeneralIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGeneralIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GeneralIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/GeneralIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GeneralIdentity(ctx, req.(*QueryGeneralIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GeneralIdentityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGeneralIdentityAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GeneralIdentityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/GeneralIdentityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GeneralIdentityAll(ctx, req.(*QueryGeneralIdentityAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PrivateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPrivateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PrivateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/PrivateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PrivateIdentity(ctx, req.(*QueryPrivateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDecryptDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairyring.pep.Query/DecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DecryptData(ctx, req.(*QueryDecryptDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairyring.pep.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EncryptedTx",
			Handler:    _Query_EncryptedTx_Handler,
		},
		{
			MethodName: "EncryptedTxAll",
			Handler:    _Query_EncryptedTxAll_Handler,
		},
		{
			MethodName: "EncryptedTxAllFromHeight",
			Handler:    _Query_EncryptedTxAllFromHeight_Handler,
		},
		{
			MethodName: "LatestHeight",
			Handler:    _Query_LatestHeight_Handler,
		},
		{
			MethodName: "PepNonce",
			Handler:    _Query_PepNonce_Handler,
		},
		{
			MethodName: "PepNonceAll",
			Handler:    _Query_PepNonceAll_Handler,
		},
		{
			MethodName: "Pubkey",
			Handler:    _Query_Pubkey_Handler,
		},
		{
			MethodName: "GeneralIdentity",
			Handler:    _Query_GeneralIdentity_Handler,
		},
		{
			MethodName: "GeneralIdentityAll",
			Handler:    _Query_GeneralIdentityAll_Handler,
		},
		{
			MethodName: "PrivateIdentity",
			Handler:    _Query_PrivateIdentity_Handler,
		},
		{
			MethodName: "DecryptData",
			Handler:    _Query_DecryptData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fairyring/pep/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGeneralIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGeneralIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestDetails != nil {
		{
			size, err := m.RequestDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGeneralIdentityAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralIdentityAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralIdentityAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGeneralIdentityAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGeneralIdentityAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGeneralIdentityAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestDetailsList) > 0 {
		for iNdEx := len(m.RequestDetailsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestDetailsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedTxAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedTxAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedTxAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedTxAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedTxAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedTxAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedTxArray) > 0 {
		for iNdEx := len(m.EncryptedTxArray) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedTxArray[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedTxAllFromHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedTxAllFromHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedTxAllFromHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEncryptedTxAllFromHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEncryptedTxAllFromHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEncryptedTxAllFromHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedTxArray.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLatestHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPepNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPepNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPepNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPepNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPepNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPepNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PepNonce.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPepNonceAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPepNonceAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPepNonceAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPepNonceAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPepNonceAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPepNonceAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PepNonce) > 0 {
		for iNdEx := len(m.PepNonce) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PepNonce[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubkeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubkeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubkeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QueuedPubkey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ActivePubkey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPrivateIdentityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrivateIdentityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrivateIdentityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrivateIdentityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrivateIdentityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrivateIdentityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivateDecryptionKeys) > 0 {
		for iNdEx := len(m.PrivateDecryptionKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateDecryptionKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReqId) > 0 {
		i -= len(m.ReqId)
		copy(dAtA[i:], m.ReqId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReqId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecryptDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecryptDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecryptDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DecryptionKey) > 0 {
		i -= len(m.DecryptionKey)
		copy(dAtA[i:], m.DecryptionKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DecryptionKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDecryptDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDecryptDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDecryptDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecryptedData) > 0 {
		i -= len(m.DecryptedData)
		copy(dAtA[i:], m.DecryptedData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DecryptedData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGeneralIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGeneralIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestDetails != nil {
		l = m.RequestDetails.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGeneralIdentityAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGeneralIdentityAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestDetailsList) > 0 {
		for _, e := range m.RequestDetailsList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncryptedTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetHeight != 0 {
		n += 1 + sovQuery(uint64(m.TargetHeight))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryEncryptedTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedTx.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEncryptedTxAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncryptedTxAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptedTxArray) > 0 {
		for _, e := range m.EncryptedTxArray {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEncryptedTxAllFromHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetHeight != 0 {
		n += 1 + sovQuery(uint64(m.TargetHeight))
	}
	return n
}

func (m *QueryEncryptedTxAllFromHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedTxArray.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLatestHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryPepNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPepNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PepNonce.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPepNonceAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPepNonceAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PepNonce) > 0 {
		for _, e := range m.PepNonce {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPubkeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ActivePubkey.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.QueuedPubkey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPrivateIdentityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPrivateIdentityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.PrivateDecryptionKeys) > 0 {
		for _, e := range m.PrivateDecryptionKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDecryptDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DecryptionKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDecryptDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DecryptedData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestDetails == nil {
				m.RequestDetails = &IdentityExecutionEntry{}
			}
			if err := m.RequestDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralIdentityAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralIdentityAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralIdentityAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGeneralIdentityAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGeneralIdentityAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGeneralIdentityAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDetailsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestDetailsList = append(m.RequestDetailsList, &IdentityExecutionEntry{})
			if err := m.RequestDetailsList[len(m.RequestDetailsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedTxAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedTxAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedTxAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedTxAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedTxAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedTxAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTxArray = append(m.EncryptedTxArray, EncryptedTxArray{})
			if err := m.EncryptedTxArray[len(m.EncryptedTxArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedTxAllFromHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedTxAllFromHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedTxAllFromHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEncryptedTxAllFromHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEncryptedTxAllFromHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEncryptedTxAllFromHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTxArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedTxArray.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPepNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPepNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPepNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPepNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPepNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPepNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PepNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PepNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPepNonceAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPepNonceAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPepNonceAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPepNonceAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPepNonceAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPepNonceAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PepNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PepNonce = append(m.PepNonce, PepNonce{})
			if err := m.PepNonce[len(m.PepNonce)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubkeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubkeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubkeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActivePubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueuedPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrivateIdentityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrivateIdentityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrivateIdentityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrivateIdentityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrivateIdentityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrivateIdentityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDecryptionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDecryptionKeys = append(m.PrivateDecryptionKeys, &types.PrivateDecryptionKey{})
			if err := m.PrivateDecryptionKeys[len(m.PrivateDecryptionKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecryptDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecryptDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecryptDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptionKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDecryptDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDecryptDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDecryptDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
