// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: cosmos/mint/v1beta1/mint.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.mint.v1beta1";

/** Minter represents the minting state. */
export interface Minter {
  /** current annual inflation rate */
  inflation: string;
  /** current annual expected provisions */
  annualProvisions: string;
}

/** Params defines the parameters for the x/mint module. */
export interface Params {
  /** type of coin to mint */
  mintDenom: string;
  /** maximum annual change in inflation rate */
  inflationRateChange: string;
  /** maximum inflation rate */
  inflationMax: string;
  /** minimum inflation rate */
  inflationMin: string;
  /** goal of percent bonded atoms */
  goalBonded: string;
  /** expected blocks per year */
  blocksPerYear: number;
}

function createBaseMinter(): Minter {
  return { inflation: "", annualProvisions: "" };
}

export const Minter: MessageFns<Minter> = {
  encode(message: Minter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inflation !== "") {
      writer.uint32(10).string(message.inflation);
    }
    if (message.annualProvisions !== "") {
      writer.uint32(18).string(message.annualProvisions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Minter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inflation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annualProvisions = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Minter {
    return {
      inflation: isSet(object.inflation) ? globalThis.String(object.inflation) : "",
      annualProvisions: isSet(object.annualProvisions) ? globalThis.String(object.annualProvisions) : "",
    };
  },

  toJSON(message: Minter): unknown {
    const obj: any = {};
    if (message.inflation !== "") {
      obj.inflation = message.inflation;
    }
    if (message.annualProvisions !== "") {
      obj.annualProvisions = message.annualProvisions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Minter>, I>>(base?: I): Minter {
    return Minter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Minter>, I>>(object: I): Minter {
    const message = createBaseMinter();
    message.inflation = object.inflation ?? "";
    message.annualProvisions = object.annualProvisions ?? "";
    return message;
  },
};

function createBaseParams(): Params {
  return {
    mintDenom: "",
    inflationRateChange: "",
    inflationMax: "",
    inflationMin: "",
    goalBonded: "",
    blocksPerYear: 0,
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintDenom !== "") {
      writer.uint32(10).string(message.mintDenom);
    }
    if (message.inflationRateChange !== "") {
      writer.uint32(18).string(message.inflationRateChange);
    }
    if (message.inflationMax !== "") {
      writer.uint32(26).string(message.inflationMax);
    }
    if (message.inflationMin !== "") {
      writer.uint32(34).string(message.inflationMin);
    }
    if (message.goalBonded !== "") {
      writer.uint32(42).string(message.goalBonded);
    }
    if (message.blocksPerYear !== 0) {
      writer.uint32(48).uint64(message.blocksPerYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mintDenom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inflationRateChange = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inflationMax = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inflationMin = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.goalBonded = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.blocksPerYear = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      mintDenom: isSet(object.mintDenom) ? globalThis.String(object.mintDenom) : "",
      inflationRateChange: isSet(object.inflationRateChange) ? globalThis.String(object.inflationRateChange) : "",
      inflationMax: isSet(object.inflationMax) ? globalThis.String(object.inflationMax) : "",
      inflationMin: isSet(object.inflationMin) ? globalThis.String(object.inflationMin) : "",
      goalBonded: isSet(object.goalBonded) ? globalThis.String(object.goalBonded) : "",
      blocksPerYear: isSet(object.blocksPerYear) ? globalThis.Number(object.blocksPerYear) : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.mintDenom !== "") {
      obj.mintDenom = message.mintDenom;
    }
    if (message.inflationRateChange !== "") {
      obj.inflationRateChange = message.inflationRateChange;
    }
    if (message.inflationMax !== "") {
      obj.inflationMax = message.inflationMax;
    }
    if (message.inflationMin !== "") {
      obj.inflationMin = message.inflationMin;
    }
    if (message.goalBonded !== "") {
      obj.goalBonded = message.goalBonded;
    }
    if (message.blocksPerYear !== 0) {
      obj.blocksPerYear = Math.round(message.blocksPerYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.mintDenom = object.mintDenom ?? "";
    message.inflationRateChange = object.inflationRateChange ?? "";
    message.inflationMax = object.inflationMax ?? "";
    message.inflationMin = object.inflationMin ?? "";
    message.goalBonded = object.goalBonded ?? "";
    message.blocksPerYear = object.blocksPerYear ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
